<!-- build configuration -->
<project name="msoy" default="compile" basedir="." xmlns:artifact="urn:maven-artifact-ant">

  <!-- read in our server properties -->
  <property file="server.properties"/>

  <!-- define some basic project parameters -->
  <property name="app.name"     value="msoy"/>

  <!-- things you probably don't want to change -->
  <property name="src.dir"       value="src/java"/>
  <property name="gsrc.dir"      value="src/gwt"/>
  <property name="asrc.dir"      value="src/as"/>
  <property name="deploy.dir"    value="dist"/>
  <property name="classes.dir"   value="${deploy.dir}/classes"/>
  <property name="gwtout.dir"    value="pages"/>
  <property name="flexsdk.dir"   value="tools/extern/flex_sdk"/>
  <property name="extlibs.dir"   value="extlibs/java"/>
  <property name="javadoc.title" value="Metasoy API"/>

  <!-- defines the build version (normally zero unless we're doing a package build) -->
  <property name="build_version" value="0"/>

  <!-- define our subprojects and include the standard build system -->
  <property name="projects1" value="whirled"/>
  <property name="projects2" value="facebook"/>
  <property name="projects" value="${projects1},${projects2}"/>
  <import file="build/etc/build-support.xml"/>
  <fileset dir="." id="check.paths">
    <include name="${src.dir}/**/*.java"/>
    <include name="${gsrc.dir}/**/*.java"/>
  </fileset>

  <!-- override the src dirset and package names for the common javadoc target -->
  <property name="javadoc.pkg.names" value="client.*,com.threerings.*"/>
  <path id="javadoc.src.path">
    <!-- TODO make this only look for bits inside of client/ -->
    <dirset dir="${gsrc.dir}">
      <exclude name="**/.svn"/>
    </dirset>
    <dirset dir="${src.dir}">
      <exclude name="**/.svn"/>
    </dirset>
  </path>

  <!-- declare the properties files. -->
  <property name="props.list" value="server.properties"/>

  <!-- declare the files from bin needed in the package -->
  <property name="bin.list1" value="msoy,msoyrespawn,msoyserver,msoyjava,runmsoy,rungame,mysql"/>
  <property name="bin.list2" value="process_stats,roll_logs,swiftlycompiler,runcommon,runpolicy"/>
  <property name="bin.list"   value="${bin.list1},${bin.list2}"/>

  <!-- declare the files that will be deployed to the maven repository -->
  <filelist dir="." id="deploy.filelist">
    <file name="${deploy.dir}/msoy-code.jar"/>
  </filelist>

  <!-- declare the libraries needed by the MSOY runtime -->
  <filelist dir="." id="dist.libs">
    <file name="${extlibs.dir}/activation.jar"/>
    <file name="${extlibs.dir}/ant.jar"/>
    <file name="${extlibs.dir}/args4j-2.0.7.jar"/>
    <file name="${extlibs.dir}/commons-beanutils.jar"/>
    <file name="${extlibs.dir}/commons-codec.jar"/>
    <file name="${extlibs.dir}/commons-collections.jar"/>
    <file name="${extlibs.dir}/commons-digester.jar"/>
    <file name="${extlibs.dir}/commons-fileupload.jar"/>
    <file name="${extlibs.dir}/commons-httpclient.jar"/>
    <file name="${extlibs.dir}/commons-io.jar"/>
    <file name="${extlibs.dir}/commons-lang.jar"/>
    <file name="${extlibs.dir}/commons-logging.jar"/>
    <file name="${extlibs.dir}/ehcache-1.2.jar"/>
    <file name="${extlibs.dir}/ganymed.jar"/>
    <file name="${extlibs.dir}/google-collect.jar"/>
    <file name="${extlibs.dir}/getdown.jar"/>
    <file name="${extlibs.dir}/gwt-user.jar"/>
    <file name="${extlibs.dir}/gwt-widgets.jar"/>
    <file name="${extlibs.dir}/javassist.jar"/>
    <file name="${extlibs.dir}/jetty6/jetty.jar"/>
    <file name="${extlibs.dir}/jetty6/jetty-util.jar"/>
    <file name="${extlibs.dir}/junit-3.7.jar"/>
    <file name="${extlibs.dir}/junit4.jar"/>
    <file name="${extlibs.dir}/mina-core.jar"/>
    <file name="${extlibs.dir}/mail.jar"/>
    <file name="${extlibs.dir}/mysql-connector-java.jar"/>
    <file name="${extlibs.dir}/postgresql-jdbc.jar"/>
    <file name="${extlibs.dir}/proguard.jar"/>
    <file name="${extlibs.dir}/servlet-api.jar"/>
    <file name="${extlibs.dir}/slf4j-api.jar"/>
    <file name="${extlibs.dir}/slf4j-jdk14.jar"/>
    <file name="${extlibs.dir}/svnClientAdapter.jar"/>
    <file name="${extlibs.dir}/svnjavahl.jar"/>
    <file name="${extlibs.dir}/svnkit-cli.jar"/>
    <file name="${extlibs.dir}/svnkit-javahl.jar"/>
    <file name="${extlibs.dir}/svnkit.jar"/>
    <file name="${extlibs.dir}/velocity-1.5-dev.jar"/>
    <file name="${extlibs.dir}/ws-commons-util.jar"/>
    <file name="${extlibs.dir}/xmlrpc-client.jar"/>
    <file name="${extlibs.dir}/xmlrpc-common.jar"/>
    <file name="${extlibs.dir}/redstone-xmlrpc.jar"/>
    <file name="${extlibs.dir}/redstone-xmlrpc-client.jar"/>
    <file name="${extlibs.dir}/s3lib.jar"/>

    <!-- The following are used for HTML sanitization -->
    <file name="${extlibs.dir}/antisamy/antisamy-bin.1.0.jar"/>
    <file name="${extlibs.dir}/antisamy/batik-css.jar"/>
    <file name="${extlibs.dir}/antisamy/batik-util.jar"/>
    <file name="${extlibs.dir}/antisamy/dom4j.jar"/>
    <file name="${extlibs.dir}/antisamy/nekohtml.jar"/>
    <file name="${extlibs.dir}/antisamy/sac.jar"/>
    <file name="${extlibs.dir}/xercesImpl.jar"/>

    <file name="lib/json.jar"/>
    <file name="lib/jswiff-8.0-beta-2-threerings.jar"/>
    <file name="lib/sdoc-0.5.0-beta-ooo.jar"/>
    <file name="lib/substance-lite.jar"/>

    <file name="lib/lwjgl-applet.jar"/>

    <!-- The following are used for aperture -->
    <file name="lib/aperture/aperture-2006.1-alpha-3.jar"/>
    <file name="lib/aperture/aperture-test-2006.1-alpha-3.jar"/>
    <file name="lib/aperture/applewrapper-0.1.jar"/>
    <file name="lib/aperture/bcmail-jdk14-132.jar"/>
    <file name="lib/aperture/bcprov-jdk14-132.jar"/>
    <file name="lib/aperture/demork-2.0.jar"/>
    <file name="lib/aperture/fontbox-0.1.0-dev.jar"/>
    <file name="lib/aperture/htmlparser-1.6.jar"/>
    <file name="lib/aperture/ical4j-cvs20061019.jar"/>
    <file name="lib/aperture/jacob-1.10-pre4.jar"/>
    <file name="lib/aperture/openrdf-model-2.0-alpha-3.jar"/>
    <file name="lib/aperture/openrdf-util-2.0-alpha-3.jar"/>
    <file name="lib/aperture/openrdf-util-crazy-debug.jar"/>
    <file name="lib/aperture/openrdf-util-fixed-locking.jar"/>
    <file name="lib/aperture/pdfbox-0.7.3.jar"/>
    <file name="lib/aperture/poi-3.0-alpha2-20060616.jar"/>
    <file name="lib/aperture/poi-contrib-3.0-alpha2-20060616.jar"/>
    <file name="lib/aperture/poi-scratchpad-3.0-alpha2-20060616.jar"/>
    <file name="lib/aperture/rio-2.0-alpha-3.jar"/>
    <file name="lib/aperture/sesame-2.0-alpha-3.jar"/>
    <file name="lib/aperture/winlaf-0.5.1.jar"/>

    <!-- The following are used for Panopticon -->
    <file name="${extlibs.dir}/hessian.jar"/>
  </filelist>

  <!-- enumerate our translation files -->
  <property name="msgs1.list" value="shell.Shell,admin.Admin,catalog.Catalog,game.Game"/>
  <property name="msgs2.list" value="group.Group,inventory.Inventory,editem.Editem,item.Item"/>
  <property name="msgs3.list" value="mail.Mail,msgs.Msgs,profile.Profile,swiftly.Swiftly"/>
  <property name="msgs4.list" value="world.World,whirled.Whirled"/>
  <property name="gmsgs.list" value="${msgs1.list},${msgs2.list},${msgs3.list},${msgs4.list}"/>

  <!-- declare our classpath -->
  <path id="classpath">
    <pathelement location="${classes.dir}"/>
    <fileset dir="${deploy.dir}/lib" includes="*.jar"/>
    <fileset dir="lib" includes="plugin.jar"/>
  </path>

  <!-- prepares the application directories -->
  <target name="prepare" depends="copydistlibs,copydistprops">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/lib"/>
    <mkdir dir="${deploy.dir}/tmp"/>
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${classes.dir}/rsrc"/>
    <copy todir="${classes.dir}/rsrc">
      <fileset dir="rsrc">
       <include name="**/*"/>
      </fileset>
    </copy>

    <!-- create our toybox propertis from server.properties -->
    <exec executable="egrep">
      <arg line="^toybox\."/>
      <arg line="${deploy.dir}/server.properties"/>
      <redirector output="${classes.dir}/toybox.properties">
        <outputfilterchain>
          <replacestring from="toybox." to=""/>
        </outputfilterchain>
      </redirector>
    </exec>

    <!-- copy logging.properties -->
    <copy file="${basedir}/etc/logging.properties" todir="${deploy.dir}"/>

    <!-- copy ehcache.xml to a classpath location -->
    <if><equals arg1="${props.dist}" arg2="production"/>
    <then>
      <copy tofile="${deploy.dir}/ehcache.xml" file="${basedir}/etc/ehcache-production.xml"/>
    </then><else>
      <copy todir="${deploy.dir}" file="${basedir}/etc/ehcache.xml"/>
    </else></if>

    <!-- copy our HTML sanitizer configuration -->
    <copy file="${basedir}/etc/antisamy-config.xml" todir="${deploy.dir}"/>

    <!-- create dev usable security.policy and swiftly.policy files -->
    <!-- real ones are created in prepare-server-extra -->
    <copy file="etc/security.policy.in" tofile="${deploy.dir}/security.policy" overwrite="true">
      <filterset><filter token="PREFIX" value="${server_root}"/></filterset>
    </copy>
    <copy file="etc/swiftly.policy.in" tofile="${deploy.dir}/swiftly.policy" overwrite="true">
      <filterset><filter token="PREFIX" value="${basedir}"/></filterset>
    </copy>
  </target>

  <!-- fetches our library dependencies -->
  <target name="mavendeps" depends="prepare">
    <artifact:dependencies filesetId="dependency.fileset">
      <remoteRepository refid="maven.depends.repo"/>
      <dependency groupId="com.threerings.panopticon.${maven.dist}" artifactId="panopticon-client"
                  version="0.0-SNAPSHOT"/>
      <dependency groupId="com.threerings.narya" artifactId="narya-base" version="0.0-SNAPSHOT"/>
      <dependency groupId="com.threerings.narya" artifactId="narya-distrib" version="0.0-SNAPSHOT"/>
      <dependency groupId="com.threerings.nenya" artifactId="nenya-rsrc" version="0.0-SNAPSHOT"/>
      <dependency groupId="com.threerings.nenya" artifactId="nenya-media" version="0.0-SNAPSHOT"/>
      <dependency groupId="com.threerings.vilya" artifactId="vilya-parlor" version="0.0-SNAPSHOT"/>
      <dependency groupId="com.threerings.vilya" artifactId="vilya-whirled" version="0.0-SNAPSHOT"/>
      <dependency groupId="com.threerings.vilya" artifactId="vilya-stats" version="0.0-SNAPSHOT"/>
      <dependency groupId="com.threerings.vilya" artifactId="vilya-micasa" version="0.0-SNAPSHOT"/>
      <dependency groupId="com.threerings" artifactId="threerings" version="0.0-SNAPSHOT"/>
      <dependency groupId="com.threerings" artifactId="toybox" version="0.0-SNAPSHOT"/>
    </artifact:dependencies>
    <copy todir="${deploy.dir}/lib">
      <fileset refid="dependency.fileset"/>
      <mapper type="flatten"/>
    </copy>
  </target>

  <!-- runs the GWT debugging shell -->
  <target name="gshell">
    <available property="gwtdir.present" file="lib/gwt"/>
    <fail message="You must symlink 'lib/gwt' to a current GWT distribution."
          unless="gwtdir.present"/>

    <path id="gwt.classpath">
      <fileset dir="${deploy.dir}/lib" includes="**/*.jar"/>
      <fileset dir="lib/gwt" includes="*.jar"/>
      <pathelement location="${classes.dir}"/>
      <pathelement location="${src.dir}"/>
      <pathelement location="${gsrc.dir}"/>
    </path>
    <available property="gwt.present" classname="com.google.gwt.dev.GWTShell"
               classpathref="gwt.classpath"/>
    <fail message="You must symlink 'lib/gwt' to a current GWT distribution."
          unless="gwt.present"/>

    <if><equals arg1="${platform.darwin}" arg2="true"/><then>
      <java classpathref="gwt.classpath" fork="true" maxmemory="256M"
            classname="com.google.gwt.dev.GWTShell">
        <jvmarg value="-XstartOnFirstThread"/>
        <arg value="-noserver"/>
        <arg value="-port"/>
        <arg value="${http_port}"/>
        <arg value="-out"/>
        <arg value="${gwtout.dir}"/>
        <arg value="msoy/index.html#profile"/>
      </java>
    </then><else>
      <java classpathref="gwt.classpath" fork="true" maxmemory="256M"
            classname="com.google.gwt.dev.GWTShell">
        <arg value="-noserver"/>
        <arg value="-port"/>
        <arg value="${http_port}"/>
        <arg value="-out"/>
        <arg value="${gwtout.dir}"/>
        <arg value="msoy/index.html#profile"/>
      </java>
    </else></if>
  </target>

  <!-- regenerates our i18n messages classes -->
  <target name="gmsgs">
    <uptodate property="gmsgs.uptodate">
      <srcfiles dir= "${gsrc.dir}" includes="client/*/*Messages.properties">
        <exclude name="**/ServerMessages.properties"/>
        <exclude name="**/DynamicMessages.properties"/>
      </srcfiles>
      <mapper type="glob" from="*.properties" to="*.java"/>
    </uptodate>
    <if><not><isset property="gmsgs.uptodate"/></not><then>
      <for list="${gmsgs.list}" param="which"><sequential>
        <echo>Regenerating Java for @{which}Messages.properties...</echo>
        <java fork="true" classname="com.google.gwt.i18n.tools.I18NSync">
          <classpath>
            <fileset dir="${extlibs.dir}" includes="gwt-user.jar"/>
            <fileset dir="${extlibs.dir}" includes="gwt-dev-*.jar"/>
            <pathelement location="${gsrc.dir}"/>
          </classpath>
          <arg value="-createMessages"/>
          <arg value="-out"/>
          <arg value="${gsrc.dir}"/>
          <arg value="client.@{which}Messages"/>
        </java>
      </sequential></for>
    </then></if>
  </target>

  <!-- prepares to build our GWT client -->
  <target name="jprepare" depends="prepare">
    <tstamp>
      <format property="build_time" pattern="yyyy-MM-dd HH:mm:ss"/>
    </tstamp>
    <!-- set default properties -->
    <property name="dev_deployment" value="true"/>
    <!-- then overwrite with values read from server.properties -->
    <copy file="${src.dir}/com/threerings/msoy/web/client/DeploymentConfig.java.tmpl"
          tofile="${src.dir}/com/threerings/msoy/web/client/DeploymentConfig.java" overwrite="true">
      <filterset>
        <filter token="build_time" value="${build_time}"/>
        <filter token="build_version" value="${build_version}"/>
        <filter token="media_url" value="${media_url}"/>
        <filter token="static_media_url" value="${static_media_url}"/>
        <filter token="dev_deployment" value="${dev_deployment}"/>
      </filterset>
    </copy>
  </target>

  <!-- builds our GWT web client -->
  <property name="gwtc.style" value="OBF"/>
  <target name="gclient" depends="jprepare,gmsgs"
          description="Rebuilds the GWT client (but only for Mozilla).">
    <delete dir="pages/msoy"/>
    <mkdir dir="pages/msoy"/>
    <if><isset property="full"/><then>
       <copy file="${gsrc.dir}/msoy.gwt.xml.in"
             tofile="${gsrc.dir}/msoy.gwt.xml" overwrite="true"/>
    </then><else>
       <echo>Doing Gecko-only compile...</echo>
       <exec executable="bin/quickify" failonerror="true">
         <arg value="${gsrc.dir}/msoy.gwt.xml"/>
       </exec>
    </else></if>
    <java fork="true" maxmemory="768M" failonerror="false" resultproperty="gwt.result"
          classname="com.google.gwt.dev.GWTCompiler">
      <classpath>
        <pathelement location="${classes.dir}"/>
        <fileset dir="${extlibs.dir}" includes="gwt-dev-*.jar"/> <!-- the GWT compiler -->
        <fileset dir="${deploy.dir}/lib" includes="*.jar"/>
        <pathelement location="${src.dir}"/>
        <pathelement location="${gsrc.dir}"/>
      </classpath>
      <arg value="-style"/><arg value="${gwtc.style}"/>
      <arg value="-out"/>
      <arg value="${gwtout.dir}"/>
      <arg value="msoy"/>
      <!-- gather all the compiler output into a property -->
      <redirector outputproperty="redirector.out"/>
    </java>

    <!-- until the GWT compiler does the right thing echo errors/warnings correctly -->
    <if><contains string="${redirector.out}" substring="[ERROR]"/><then>
      <echo level="error">${redirector.out}</echo>
      <!-- be really, really sure that the build fails if we get an error logs -->
      <property name="has.errors" value="true"/>
    </then><elseif><contains string="${redirector.out}" substring="[WARNING]"/><then>
      <echo level="warning">${redirector.out}</echo>
    </then></elseif><else>
      <echo level="info">${redirector.out}</echo>
    </else></if>

    <!-- fail the build if the GWT compiler returned 1 or errors were detected -->
    <fail message="The GWT build failed. See output for details.">
      <condition><or>
        <equals arg1="${gwt.result}" arg2="1"/>
        <isset property="has.errors"/>
      </or></condition>
    </fail>

    <!-- clear out some variables -->
    <var name="gwt.result" unset="true"/>
    <var name="redirector.out" unset="true"/>
    <var name="has.errors" unset="true"/>
  </target>

  <!-- prepares to build our Flash client -->
  <target name="asprepare" depends="prepare">
    <mkdir dir="pages/clients/${build_version}"/>
    <tstamp>
      <format property="build_time" pattern="yyyy-MM-dd HH:mm:ss"/>
    </tstamp>
    <!-- set default properties -->
    <property name="dev_deployment" value="true"/>
    <property name="socket_policy_port" value="47623"/>
    <!-- then overwrite with values read from server.properties -->
    <copy file="${asrc.dir}/com/threerings/msoy/client/DeploymentConfig.as.tmpl"
          tofile="${asrc.dir}/com/threerings/msoy/client/DeploymentConfig.as"
          overwrite="true">
      <filterset>
        <filter token="build_time" value="${build_time}"/>
        <filter token="build_version" value="${build_version}"/>
        <filter token="server_host" value="${server_host}"/>
        <filter token="server_ports" value="${server_ports}"/>
        <filter token="socket_policy_port" value="${socket_policy_port}"/>
        <filter token="http_port" value="${http_port}"/>
        <filter token="media_url" value="${media_url}"/>
        <filter token="dev_deployment" value="${dev_deployment}"/>
        <filter token="static_media_url" value="${static_media_url}"/>
      </filterset>
    </copy>
  </target>

  <!-- checks whether our Flash library needs building -->
  <target name="checkaslib">
    <uptodate property="aslib_is_up_to_date" targetfile="${deploy.dir}/ooo.swc">
      <srcfiles dir="projects/narya/src/as" includes="**/*.as"/>
      <srcfiles dir="projects/nenya/src/as" includes="**/*.as"/>
      <srcfiles dir="projects/vilya/src/as" includes="**/*.as"/>
      <srcfiles dir="projects/toybox/src/as" includes="**/*.as"/>
      <srcfiles dir="projects/whirled/src/as" includes="**/*.as"/>
    </uptodate>
  </target>

  <!-- builds our Flash library -->
  <target name="aslib" unless="aslib_is_up_to_date" depends="checkaslib">
    <java jar="${flexsdk.dir}/lib/compc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/aslib-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=projects/narya/src/as/"/>
      <arg value="-compiler.source-path=projects/nenya/src/as/"/>
      <arg value="-compiler.source-path=projects/vilya/src/as/"/>
      <arg value="-compiler.source-path=projects/toybox/src/as/"/>
      <arg value="-compiler.source-path=projects/whirled/src/as/"/>
      <arg value="-compiler.source-path=rsrc/{locale}/i18n/"/>
      <arg value="-include-sources=projects/narya/src/as/"/>
      <arg value="-include-sources=projects/nenya/src/as/"/>
      <arg value="-include-sources=projects/vilya/src/as/"/>
      <arg value="-include-sources=projects/toybox/src/as/"/>
      <arg value="-include-sources=projects/whirled/src/as/"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/ooo.swc"/>
    </java>
  </target>

  <!-- just rebuilds the Flash client, assumes nothing has changed -->
  <property name="astype" value="world"/>
  <target name="asquick">
    <exec executable="${basedir}/bin/mxmlc" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/msoy-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=${asrc.dir}/"/>
      <arg value="-compiler.source-path=rsrc/{locale}/i18n"/>
      <arg value="-incremental=true"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/${astype}-client.swf"/>
      <arg value="-file-specs"/>
      <arg value="${asrc.dir}/${astype}.mxml"/>
    </exec>
    <copy file="${deploy.dir}/${astype}-client.swf" todir="pages/clients/${build_version}"/>
  </target>

  <!-- builds our Flash world client -->
  <target name="asclient" depends="asprepare,aslib" description="Rebuilds the Flash world client.">
    <antcall target="asquick"><param name="astype" value="world"/></antcall>
  </target>

  <!-- builds our Flash game client -->
  <target name="asgclient" depends="asprepare,aslib" description="Rebuilds the Flash game client.">
    <antcall target="asquick"><param name="astype" value="game"/></antcall>
  </target>

  <!-- builds our Flash debug client -->
  <target name="asdebug" depends="asprepare,aslib">
    <exec executable="${basedir}/bin/mxmlc" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/msoy-config.xml"/>
      <arg value="-compiler.debug"/>
      <arg value="-compiler.verbose-stacktraces=true"/>
      <arg value="-compiler.source-path=${asrc.dir}/"/>
      <arg value="-compiler.source-path=rsrc/{locale}/i18n"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/${astype}-client.swf"/>
      <arg value="-file-specs"/>
      <arg value="${asrc.dir}/${astype}.mxml"/>
    </exec>
    <copy file="${deploy.dir}/${type}-client.swf" todir="pages/clients/${build_version}"/>
  </target>

  <!-- builds our avatar viewer thingy -->
  <target name="avatarviewer" depends="asprepare,aslib">
    <exec executable="${basedir}/bin/mxmlc" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/msoy-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=${asrc.dir}/"/>
      <arg value="-compiler.source-path=rsrc/{locale}/i18n"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/avatarviewer.swf"/>
      <arg value="-file-specs"/>
      <arg value="${asrc.dir}/AvatarViewer.mxml"/>
    </exec>
    <copy file="${deploy.dir}/avatarviewer.swf" todir="pages/clients/${build_version}"/>
  </target>

  <!-- builds our video viewer thingy -->
  <target name="videoviewer" depends="asprepare,aslib">
    <exec executable="${basedir}/bin/mxmlc" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/msoy-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=${asrc.dir}/"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/videoviewer.swf"/>
      <arg value="-file-specs"/>
      <arg value="${asrc.dir}/VideoViewer.as"/>
    </exec>
    <copy file="${deploy.dir}/videoviewer.swf" todir="pages/clients/${build_version}"/>
  </target>

  <!-- builds our awesome decor viewer -->
  <target name="decorviewer" depends="asprepare,aslib">
    <exec executable="${basedir}/bin/mxmlc" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/msoy-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=${asrc.dir}/"/>
      <arg value="-compiler.source-path=rsrc/{locale}/i18n"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/decorviewer.swf"/>
      <arg value="-file-specs"/>
      <arg value="${asrc.dir}/DecorViewer.mxml"/>
    </exec>
    <copy file="${deploy.dir}/decorviewer.swf" todir="pages/clients/${build_version}"/>
  </target>

  <!-- builds our neighborhood visualization client -->
  <target name="neighborhood">
    <ant dir="projects/neighborhood" target="dist" inheritAll="false"/>
    <copy file="${deploy.dir}/neighborhood.swf" todir="pages/clients/${build_version}"/>
  </target>

  <!-- builds our tutorial game -->
  <target name="tutorial" depends="prepare,whirled">
    <ant dir="projects/games/tutorial" target="dist" inheritAll="false"/>
    <copy file="${deploy.dir}/tutorial.swf" todir="pages/media/static/game"/>
  </target>

  <!-- builds the ActionScript documention -->
  <target name="asdoc">
    <mkdir dir="${deploy.dir}/asdoc"/>
    <java classpath="${flexsdk.dir}/lib/asdoc.jar" classname="flex2.tools.ASDoc" fork="true">
      <jvmarg value="-Xmx1024m"/>
      <jvmarg value="-Dsun.io.useCanonCashes=false"/>
      <jvmarg value="-Xbootclasspath/p:${flexsdk.dir}/asdoc/lib/xalan.jar"/>
      <jvmarg value="-Dos.name=Windows"/>
      <arg value="+flexlib=${flexsdk.dir}/frameworks"/>
      <arg line="-library-path ${flexsdk.dir}/frameworks/libs"/>
      <arg line="-library-path lib/corelib.swc"/>
      <arg line="-library-path lib/flexlib.swc"/>
      <arg line="-library-path ${deploy.dir}/ooo.swc"/>
      <arg line="-doc-sources projects/flexlib/src"/>
      <arg line="-templates-path ${flexsdk.dir}/asdoc/templates"/>
      <arg line="-doc-sources projects/narya/src/as"/>
      <arg line="-doc-sources projects/nenya/src/as"/>
      <arg line="-doc-sources projects/vilya/src/as"/>
      <arg line="-doc-sources src/as"/>
      <arg line="-output ${deploy.dir}/asdoc"/>
    </java>
  </target>

  <!-- builds, runs Proguard on and signs a Java client -->
  <target name="proguard">
    <echo>Building ${ident} Java client...</echo>

    <!-- figure out where the Java rt.jar file lives -->
    <condition property="rtClasses" value="${java.home}/../Classes/classes.jar">
      <istrue value="${platform.darwin}"/>
    </condition>
    <condition property="rtClasses" value="${java.home}/lib/rt.jar">
      <isfalse value="${platform.darwin}"/>
    </condition>
    <mkdir dir="${deploy.dir}"/>

    <!-- run Proguard -->
    <taskdef resource="proguard/ant/task.properties" classpath="${extlibs.dir}/proguard.jar"/>
    <proguard configuration="etc/${ident}-client.pro">
      <libraryjar name="${rtClasses}"/>
    </proguard>

    <!-- sign the lwjgl-enabled client -->
    <if><equals arg1="${ident}" arg2="lwjgl-game"/>
      <then>
        <!-- Sign the resulting jar file -->
        <if><isset property="cert_dir"/>
          <then>
            <property file="${cert_dir}/certificate.properties"/>
          </then>
          <else>
            <!-- No official keystore, use the development keystore -->
            <echo message="Signing with self-signed development certificate"/>
            <echo message="(cert_dir is not set, using development keystore)"/>
            <property name="sign.keystore" value="lib/dev-keystore.dat"/>
            <property name="sign.storepass" value="secret"/>
            <property name="sign.alias" value="threerings-dev"/>
          </else>
        </if>
        <signjar jar="${deploy.dir}/${ident}-client.jar" keystore="${sign.keystore}" lazy="true"
                 alias="${sign.alias}" storepass="${sign.storepass}"/>
      </then>
    </if>

    <!-- Copy the resulting jar file into the document tree. -->
    <copy file="${deploy.dir}/${ident}-client.jar" todir="pages/clients/${build_version}"/>
  </target>

  <!-- builds our Java clients -->
  <property name="jclients" value="admin,game,lwjgl-game,swiftly"/>
  <target name="jclients" depends="dist"
          description="Rebuilds the Java clients. Use -Djclients=IDENT to just rebuild just one.">
    <for list="${jclients}" param="ident">
      <sequential>
        <antcall target="proguard"><param name="ident" value="@{ident}"/></antcall>
      </sequential>
    </for>
    <!-- build the howdy pardner jar -->
    <jar file="pages/clients/${build_version}/howdy.jar" basedir="${classes.dir}">
      <include name="com/threerings/msoy/client/HowdyPardner.class"/>
    </jar>
  </target>

  <!-- generates fields for persistent record classes -->
  <target name="genrecord" depends="prepare">
    <taskdef name="grecord" classname="com.samskivert.jdbc.depot.tools.GenRecordTask"
             classpathref="classpath"/>
    <!-- make sure the record class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on" target="1.5">
      <classpath refid="classpath"/>
      <include name="**/*Record.java"/>
    </javac>
    <!-- now update the source files -->
    <grecord classpathref="classpath">
      <fileset dir="${src.dir}" includes="**/*Record.java"/>
    </grecord>
  </target>

  <!-- generates additional methods for distributed object classes -->
  <target name="gendobj" depends="prepare">
    <taskdef name="dobj"
             classname="com.threerings.presents.tools.GenDObjectTask"
             classpathref="classpath"/>
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on" target="1.5">
      <classpath refid="classpath"/>
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <dobj classpathref="classpath">
      <fileset dir="${src.dir}" includes="**/*Object.java"/>
    </dobj>
  </target>

  <!-- generates marshaller and dispatcher classes for all invocation -->
  <!-- service declarations -->
  <target name="genservice" depends="prepare">
    <taskdef name="service" classpathref="classpath"
             classname="com.threerings.presents.tools.GenServiceTask"/>
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on" target="1.5">
      <classpath refid="classpath"/>
      <include name="**/*Service.java"/>
      <exclude name="**/web/**"/>
    </javac>
    <!-- now generate the associated files -->
    <service header="lib/SOURCE_HEADER" asroot="${asrc.dir}" classpathref="classpath">
      <fileset dir="${src.dir}">
        <include name="**/*Service.java"/>
        <exclude name="**/web/**"/>
        <exclude name="**/peer/**"/>
        <exclude name="**/swiftly/**"/>
        <exclude name="**/GameServerService.java"/>
      </fileset>
    </service>
    <service header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="${src.dir}" includes="**/peer/client/*Service.java"/>
      <fileset dir="${src.dir}" includes="**/swiftly/client/*Service.java"/>
      <fileset dir="${src.dir}" includes="**/GameServerService.java"/>
    </service>
  </target>

  <!-- generates sender and decoder classes for all invocation -->
  <!-- receiver declarations -->
  <target name="genreceiver" depends="prepare">
    <taskdef name="receiver" classpathref="classpath"
             classname="com.threerings.presents.tools.GenReceiverTask"/>
    <!-- make sure the receiver class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on" target="1.5">
      <classpath refid="classpath"/>
      <include name="**/*Receiver.java"/>
      <exclude name="**/InvocationReceiver.java"/>
    </javac>
    <!-- now generate the associated files -->
    <receiver header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="${src.dir}" includes="**/*Receiver.java"
        excludes="**/InvocationReceiver.java"/>
    </receiver>
  </target>

  <!-- adds readField and writeField methods to Stremable classes -->
  <target name="procstream">
    <taskdef name="instream" classpathref="classpath"
             classname="com.threerings.presents.tools.InstrumentStreamableTask"/>
    <!-- now instrument the associated files -->
    <instream outdir="${classes.dir}">
      <path refid="classpath"/>
      <!--<fileset dir="${classes.dir}" includes="**/data/*.class"/>-->
      <fileset dir="${classes.dir}" includes="**/data/**/*.class"/>
    </instream>
  </target>

  <!-- generates ActionScript versions of our Streamable classes -->
  <target name="genascript" depends="dist">
    <taskdef name="genscript" classpathref="classpath"
             classname="com.threerings.presents.tools.GenActionScriptTask"/>
    <!-- now generate the associated files -->
    <genscript header="lib/SOURCE_HEADER" asroot="${asrc.dir}">
      <fileset dir="${src.dir}">
        <include name="**/msoy/data/*.java"/>
        <include name="**/msoy/data/all/*.java"/>
        <include name="**/msoy/game/data/*.java"/>
        <exclude name="**/*CustomFieldSerializer.java"/> <!-- fucking GWT -->
        <exclude name="**/MemberName.java"/> <!-- alas, too fiddly -->
        <include name="**/msoy/item/data/all/*.java"/>
        <exclude name="**/Item.java"/> <!-- alas, too fiddly -->
        <exclude name="**/Game.java"/> <!-- alas, too fiddly -->
        <exclude name="**/MediaDesc.java"/> <!-- alas, too fiddly -->
        <exclude name="**/GameMemberInfo.java"/> <!-- can't handle WhirledOccupantInfo -->
        <include name="**/msoy/chat/data/*.java"/>
      </fileset>
    </genscript>
  </target>

  <!-- run the unit tests -->
  <target name="tests" depends="compile" description="Runs unit tests.">
    <!-- haul in our testing properties -->
    <if><isset property="msoy.test.propertyfile"/><then>
        <property file="${msoy.test.propertyfile}"/>
    </then><else>
        <property file="test.properties"/>
    </else></if>

    <mkdir dir="${basedir}/${deploy.dir}/tmp"/>
    <taskdef name="unit" classpathref="classpath"
      classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>

      <unit printsummary="no" haltonfailure="yes" fork="yes" dir="${basedir}">
        <classpath refid="classpath"/>
        <formatter type="brief" usefile="false" unless="use.xml.output"/>
        <formatter type="xml" usefile="true" if="use.xml.output"/>

        <!-- Vend the test. properties -->
        <syspropertyset>
            <propertyref prefix="test."/>
        </syspropertyset>

        <!-- batch run our tests -->
        <batchtest todir="${basedir}/${deploy.dir}/tmp" unless="test">
          <fileset dir="${src.dir}">
            <include name="**/*UnitTest.java"/>

            <!-- XXX A nasty way to exclude S3 tests. This is fragile and
                 not-good, but I don't know of a better way to do it -->
            <exclude name="**/ProjectS3StorageUnitTest.java" unless="test.aws.id"/>
          </fileset>
        </batchtest>

        <!-- or run the requested test -->
        <test name="${test}" if="test"/>
      </unit>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="jprepare,qcompile" description="Builds java class files."/>

  <!-- builds the java class files only, without preparing the build directories etc. -->
  <target name="qcompile">
    <echo>Compiling MSOY...</echo>
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="off" deprecation="on" target="1.5">
      <exclude name="**/chiyogami/**/*.java"/>
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <!-- builds the javadoc documentation -->
  <target name="javadoc" depends="prepare,common-javadoc"/>

  <!-- convenience targets that build specific projects and copy the results -->
  <target name="toybox">
    <antcall target="distprojects"><param name="projects" value="toybox"/></antcall>
  </target>
  <target name="whirled">
    <antcall target="distprojects"><param name="projects" value="whirled"/></antcall>
  </target>
  <target name="facebook">
    <antcall target="distprojects"><param name="projects" value="facebook"/></antcall>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,prepare,compile,dist"/>

  <!-- builds the distribution jar files -->
  <target name="dist" depends="prepare,compile,procstream">
    <!-- stick all our code in one jar file -->
    <jar file="${deploy.dir}/${app.name}-code.jar" basedir="${classes.dir}">
      <include name="com/**"/>
      <include name="*.properties"/>
      <include name="rsrc/**/*.properties"/>
      <include name="rsrc/**/*.tmpl"/>
      <exclude name="com/threerings/msoy/swiftly/server/build/FlexCompilerDelegate*"/>
    </jar>
    <!-- and all of our configuration and media in another -->
    <jar file="${deploy.dir}/${app.name}-media.jar" basedir="${classes.dir}" includes="rsrc/**"/>
    <!-- and our server-only data in yet another -->
    <jar file="${deploy.dir}/${app.name}-data.jar" basedir="." includes="data/dictionary/**"/>
    <!-- and our flex compiler delegate all by itself -->
    <jar file="${deploy.dir}/flex-compiler-delegate.jar" basedir="${classes.dir}"
         includes="com/threerings/msoy/swiftly/server/build/FlexCompilerDelegate*"/>
  </target>

  <!-- builds top-level flash applications. -->
  <target name="flashapps"
          depends="asprepare,aslib,avatarviewer,videoviewer,decorviewer,neighborhood,tutorial">
    <antcall target="asquick"><param name="astype" value="world"/></antcall>
    <antcall target="asquick"><param name="astype" value="game"/></antcall>
  </target>

  <!-- rebuilds all subprojects and the whole top-level distribution -->
  <target name="distall" depends="prepare,mavendeps,distprojects,dist,flashapps,jclients,tests"
        description="Rebuilds all subprojects and whole top-level distribution.">
    <antcall target="gclient">
      <param name="full" value="true"/>
    </antcall>
  </target>

  <!-- assigns a version number to this build -->
  <target name="assignversion">
    <var name="build_version" unset="true"/>
    <exec executable="${basedir}/build/bin/buildstamp" outputproperty="build_version"
          failonerror="true">
    </exec>
    <echo>Assigned build version ${build_version}</echo>
  </target>

  <!-- rebuilds everything and extra bits for packaging -->
  <target name="distpkg" depends="assignversion,distall"/>

  <!-- cleans out the compiled code -->
  <target name="clean" description="Cleans out compiled code.">
    <delete dir="${classes.dir}/com"/>
    <delete file="${src.dir}/com/threerings/msoy/web/client/DeploymentConfig.java"/>
  </target>

  <!-- cleans out the compiled ActionScript code and caches -->
  <target name="asclean">
    <delete><fileset dir="${asrc.dir}" includes="*.cache"/></delete>
    <delete file="${asrc.dir}/com/threerings/msoy/client/DeploymentConfig.as"/>
  </target>

  <!-- cleans out the compiled GWT bits and caches -->
  <target name="gclean">
    <delete dir=".gwt-cache"/>
    <delete dir="pages/msoy"/>
    <delete file="${gsrc.dir}/msoy.gwt.xml"/>
  </target>

  <!-- fully cleans out all build results -->
  <target name="distclean" depends="clean,asclean,gclean">
    <delete dir="${deploy.dir}"/>
    <delete dir="pages/clients"/>
    <ant dir="projects/neighborhood" target="clean" inheritAll="false"/>
    <ant dir="projects/games/tutorial" target="clean" inheritAll="false"/>
    <delete file="pages/media/static/game/tutorial.swf"/>
    <for list="${gmsgs.list}" param="which"><sequential>
      <propertyregex property="file" input="@{which}" regexp="\." replace="/"/>
      <delete file="${gsrc.dir}/client/${file}Messages.java"/>
      <var name="file" unset="true"/>
    </sequential></for>
  </target>

  <!-- fully cleans out the application and all subprojects -->
  <target name="distcleanall" depends="distcleanprojects,distclean"
        description="Fully cleans out the application and all subprojects."/>

  <!-- prepare ${destroot} for all the packages being built -->
  <target name="preppkg">
    <antcallback target="prepare-server" return="pkg.base"/>
    <antcall target="prepare-server-extra"/>
  </target>

  <!-- install project specific server code into ${pkg.base} -->
  <target name="prepare-server-extra">
    <antcall target="copywithperms">
      <param name="copy.perms" value="755"/>
      <param name="copy.src"   value="tools/bin"/>
      <param name="copy.list"  value="lfilter,filter_interesting,sum_invokers"/>
      <param name="copy.dest"  value="${pkg.base}/tools/bin"/>
    </antcall>
    <copy file="tools/lib/perl/GrindUtil.pm" todir="${pkg.base}/tools/lib/perl"/>
    <antcall target="prepare-server-rcscript"/>
    <mkdir dir="${pkg.base}/data"/>
    <copy todir="${pkg.base}/data">
      <fileset dir="data" includes="**"/>
    </copy>
    <chmod perm="755">
      <fileset dir="${pkg.base}/data/swiftly/flex_sdk/bin"/>
    </chmod>
    <!-- need some xml files -->
    <copy file="${deploy.dir}/ehcache.xml" todir="${pkg.base}/${deploy.dir}"/>
    <copy file="${deploy.dir}/antisamy-config.xml" todir="${pkg.base}/${deploy.dir}"/>
    <!-- and logging.properties -->
    <copy file="${deploy.dir}/logging.properties" todir="${pkg.base}/${deploy.dir}"/>
    <!-- create some runtime directories -->
    <copy file="log/README" todir="${pkg.base}/log"/>
    <mkdir dir="${pkg.base}/log/lighttpd"/>
    <mkdir dir="${pkg.base}/logs"/>
    <mkdir dir="${pkg.base}/run"/>
    <mkdir dir="${pkg.base}/tmp"/>
    <!-- create our production security.policy file -->
    <copy file="etc/security.policy.in" tofile="${pkg.base}/${deploy.dir}/security.policy">
      <filterset>
        <filter token="PREFIX" value="${prefix.app}"/>
      </filterset>
    </copy>
    <copy file="etc/swiftly.policy.in" tofile="${pkg.base}/${deploy.dir}/swiftly.policy">
      <filterset>
        <filter token="PREFIX" value="${prefix.app}"/>
      </filterset>
    </copy>
    <!-- set up our pages/ contents -->
    <copy todir="${pkg.base}/pages">
      <fileset dir="pages">
        <exclude name="**/*.in"/>
        <exclude name="source/**"/>
        <exclude name="**/source/**"/>
      </fileset>
      <fileset dir="data" includes="whirled_sdk*.zip"/>
    </copy>
    <mkdir dir="${pkg.base}/pages/buildresults"/>
    <mkdir dir="${pkg.base}/pages/stats"/>
    <!-- set up our policy server startup stuff -->
    <startupscript name="policy_server" runas="root"
                   pidfile="${prefix.app}/run/policy-server.pid"
                   output="${pkg.base}/etc/rc.d/policy-server.sh">
     <command cmd="/usr/sbin/daemon" args="-f ${prefix.app}/bin/runpolicy" procname="*java*"/>
    </startupscript>
  </target>

</project>
