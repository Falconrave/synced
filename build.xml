<!-- build configuration -->
<project name="msoy" default="compile" basedir=".">

  <!-- read in our server properties -->
  <property file="server.properties"/>

  <!-- define some basic project parameters -->
  <property name="app.name"     value="msoy"/>

  <!-- things you probably don't want to change -->
  <property name="src.dir"       value="src/java"/>
  <property name="gsrc.dir"      value="src/gwt"/>
  <property name="asrc.dir"      value="src/as"/>
  <property name="deploy.dir"    value="dist"/>
  <property name="javadoc.dir"   value="${deploy.dir}/docs"/>
  <property name="savedoc.dir"   value="docs"/>
  <property name="gwtout.dir"    value="pages"/>

  <!-- define our subprojects and include the standard build system -->
  <property name="projects" value="samskivert,narya,nenya,vilya,toybox,s3lib/java,threerings"/>
  <import file="projects/tools/etc/build-support.xml"/>
  <fileset dir="." id="check.paths">
    <include name="projects/s3lib/java/src/java/**/*.java"/> 
    <include name="projects/toybox/src/java/**/*.java"/> 
    <include name="${src.dir}/**/*.java"/> 
    <include name="${gsrc.dir}/**/*.java"/> 
  </fileset>

  <!-- declare the properties files. -->
  <property name="props.list"     value="server.properties"/>
  <property name="optprops.list"  value="build.properties"/>

  <!-- declare the files from bin needed in the package -->
  <property name="bin.list" value="msoy,msoyrespawn,msoyserver,msoyjava,runmsoy"/>

  <!-- declare the libraries needed by the MSOY runtime -->
  <filelist dir="." id="dist.libs">
    <file name="${extlib.dir}/ant.jar"/>
    <file name="${extlib.dir}/commons-codec.jar"/>
    <file name="${extlib.dir}/commons-collections.jar"/>
    <file name="${extlib.dir}/commons-digester.jar"/>
    <file name="${extlib.dir}/commons-fileupload.jar"/>
    <file name="${extlib.dir}/commons-httpclient.jar"/>
    <file name="${extlib.dir}/commons-io.jar"/>
    <file name="${extlib.dir}/commons-lang.jar"/>
    <file name="${extlib.dir}/commons-logging.jar"/>
    <file name="${extlib.dir}/getdown.jar"/>
    <file name="${extlib.dir}/gwt-user.jar"/>
    <file name="${extlib.dir}/gwt-widgets-0.1.1.jar"/>
    <file name="${extlib.dir}/jetty/lib/org.mortbay.jetty.jar"/>
    <file name="${extlib.dir}/junit-3.7.jar"/>
    <file name="${extlib.dir}/mail.jar"/>
    <file name="${extlib.dir}/mysql-connector-java-3.1.12-bin.jar"/>
    <file name="${extlib.dir}/proguard.jar"/>
    <file name="${extlib.dir}/servlet-2.3.jar"/>
    <file name="${extlib.dir}/ws-commons-util-1.0.1.jar"/>
    <file name="${extlib.dir}/velocity-1.5-dev.jar"/>
    <file name="${extlib.dir}/ehcache-1.2.jar"/>
    <file name="lib/json.jar"/>
    <file name="lib/jswiff-8.0-beta-2-threerings.jar"/>
  </filelist>

  <!-- declare our classpath -->
  <path id="classpath">
    <pathelement location="${deploy.dir}/classes"/>
    <fileset dir="${deploy.dir}/lib" includes="*.jar"/>
  </path>

  <!-- prepares the application directories -->
  <target name="prepare" depends="copydistlibs,copydistprops">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/lib"/>
    <mkdir dir="${deploy.dir}/tmp"/>
    <mkdir dir="${deploy.dir}/classes"/>
    <mkdir dir="${deploy.dir}/classes/rsrc"/>
    <mkdir dir="${javadoc.dir}"/>
    <copy todir="${deploy.dir}/classes/rsrc">
      <fileset dir="rsrc">
       <include name="**/*"/>
      </fileset>
    </copy>
    <!-- create our toybox propertis from server.properties -->
    <exec executable="egrep">
      <arg line="^toybox\."/>
      <arg line="${deploy.dir}/server.properties"/>
      <redirector output="${deploy.dir}/classes/toybox.properties">
        <outputfilterchain>
          <replacestring from="toybox." to=""/>
        </outputfilterchain>
      </redirector>
    </exec>
    <!-- copy ehcache.xml to a classpath location -->
    <copy todir="${deploy.dir}" file="${basedir}/etc/ehcache.xml"/>
    <mkdir dir="${deploy.dir}/lib"/>
  </target>

  <!-- runs the GWT debugging shell -->
  <target name="gshell">
    <fail unless="page">
      Please specify a page: ant -Dpage=inventory gshell
    </fail>

    <available property="gwtdir.present" file="lib/gwt"/>
    <fail message="You must symlink 'lib/gwt' to a current GWT distribution."
          unless="gwtdir.present"/>

    <path id="gwt.classpath">
      <fileset dir="${deploy.dir}/lib" includes="**/*.jar"/>
      <fileset dir="lib/gwt" includes="*.jar"/>
      <pathelement location="${deploy.dir}/classes"/>
      <pathelement location="${src.dir}"/>
      <pathelement location="${gsrc.dir}"/>
    </path>
    <available property="gwt.present" classname="com.google.gwt.dev.GWTShell"
               classpathref="gwt.classpath"/>
    <fail message="You must symlink 'lib/gwt' to a current GWT distribution."
          unless="gwt.present"/>

    <if><equals arg1="${platform.darwin}" arg2="true"/><then>
      <java classpathref="gwt.classpath" fork="true" maxmemory="256M"
            classname="com.google.gwt.dev.GWTShell">
        <jvmarg value="-XstartOnFirstThread"/>
        <arg value="-noserver"/>
        <arg value="-port"/>
        <arg value="${http_port}"/>
        <arg value="-out"/>
        <arg value="${gwtout.dir}"/>
        <arg value="${page}/index.html"/>
      </java>
    </then><else>
      <java classpathref="gwt.classpath" fork="true" maxmemory="256M"
            classname="com.google.gwt.dev.GWTShell">
        <arg value="-noserver"/>
        <arg value="-port"/>
        <arg value="${http_port}"/>
        <arg value="-out"/>
        <arg value="${gwtout.dir}"/>
        <arg value="${page}/index.html"/>
      </java>
    </else></if>
  </target>

  <!-- regenerates a single i18n messages class -->
  <target name="gmsg">
    <java fork="true" classname="com.google.gwt.i18n.tools.I18NSync">
      <classpath>
        <fileset dir="${extlib.dir}" includes="gwt*.jar"/>
        <pathelement location="${gsrc.dir}"/>
      </classpath>
      <arg value="-createMessages"/>
      <arg value="-out"/>
      <arg value="${gsrc.dir}"/>
      <arg value="client.${which}Messages"/>
    </java>
  </target>

  <!-- regenerates our i18n messages classes -->
  <target name="gmsgs">
    <antcall target="gmsg"><param name="which" value="shell.Shell"/></antcall>
    <antcall target="gmsg"><param name="which" value="admin.Admin"/></antcall>
    <antcall target="gmsg"><param name="which" value="catalog.Catalog"/></antcall>
    <antcall target="gmsg"><param name="which" value="game.Game"/></antcall>
    <antcall target="gmsg"><param name="which" value="group.Group"/></antcall>
    <antcall target="gmsg"><param name="which" value="inventory.Inventory"/></antcall>
    <antcall target="gmsg"><param name="which" value="editem.Editem"/></antcall>
    <antcall target="gmsg"><param name="which" value="item.Item"/></antcall>
    <antcall target="gmsg"><param name="which" value="mail.Mail"/></antcall>
    <antcall target="gmsg"><param name="which" value="msgs.Msgs"/></antcall>
    <antcall target="gmsg"><param name="which" value="profile.Profile"/></antcall>
    <antcall target="gmsg"><param name="which" value="swiftly.Swiftly"/></antcall>
    <antcall target="gmsg"><param name="which" value="world.World"/></antcall>
  </target>

  <!-- builds our GWT web client -->
  <property name="pages" value="admin,catalog,game,group,inventory,mail,profile,swiftly,world"/>
  <target name="gclient" depends="prepare">
    <for list="${pages}" param="page"><sequential>
      <echo>Compiling @{page} module...</echo>
      <delete dir="pages/@{page}"/>
      <mkdir dir="pages/@{page}"/>
      <if><isset property="full"/><then>
         <copy file="${gsrc.dir}/@{page}.gwt.xml.in"
               tofile="${gsrc.dir}/@{page}.gwt.xml" overwrite="true"/>
      </then><else>
         <echo>Doing Gecko-only compile...</echo>
         <exec executable="bin/quickify" failonerror="true">
           <arg value="${gsrc.dir}/@{page}.gwt.xml"/>
         </exec>
      </else></if>
      <java fork="true" maxmemory="128M" failonerror="false" resultproperty="gwt.result"
            classname="com.google.gwt.dev.GWTCompiler">
        <classpath>
          <pathelement location="${deploy.dir}/classes"/>
          <fileset dir="${extlib.dir}" includes="gwt*.jar"/>
          <fileset dir="${deploy.dir}/lib" includes="*.jar"/>
          <pathelement location="${src.dir}"/>
          <pathelement location="${gsrc.dir}"/>
        </classpath>
        <!--<arg value="-style"/><arg value="PRETTY"/>-->
        <arg value="-out"/>
        <arg value="${gwtout.dir}"/>
        <arg value="@{page}"/>
        <!-- gather all the compiler output into a property -->
        <redirector outputproperty="redirector.out"/>
      </java>

      <!-- until the GWT compiler does the right thing echo errors/warnings correctly -->
      <if><contains string="${redirector.out}" substring="[ERROR]"/><then>
        <echo level="error">${redirector.out}</echo>
        <!-- be really, really sure that the build fails if we get an error logs -->
        <property name="has.errors" value="true"/>
      </then><elseif><contains string="${redirector.out}" substring="[WARNING]"/><then>
        <echo level="warning">${redirector.out}</echo>
      </then></elseif><else>
        <echo level="info">${redirector.out}</echo>
      </else></if>

      <!-- fail the build if the GWT compiler returned 1 or errors were detected -->
      <fail message="The GWT build failed. See output for details.">
        <condition><or>
          <equals arg1="${gwt.result}" arg2="1"/>
          <isset property="has.errors"/>
        </or></condition>
      </fail>
    <var name="gwt.result" unset="true"/>
    <var name="redirector.out" unset="true"/>
    <var name="has.errors" unset="true"/>
    </sequential></for>
  </target> 

  <!-- prepares to build our Flash client -->
  <target name="asprepare" depends="prepare">
    <mkdir dir="pages/clients"/>
    <tstamp>
      <format property="build_time" pattern="yyyy-MM-dd HH:mm:ss"/>
    </tstamp>
    <copy file="${asrc.dir}/com/threerings/msoy/client/DeploymentConfig.as.tmpl"
          tofile="${asrc.dir}/com/threerings/msoy/client/DeploymentConfig.as"
          overwrite="true">
      <filterset>
        <filter token="build_time" value="${build_time}"/>
        <filter token="server_host" value="${server_host}"/>
        <filter token="server_ports" value="${server_ports}"/>
        <filter token="http_port" value="${http_port}"/>
      </filterset>
    </copy>
  </target>

  <target name="checkaslib">
    <uptodate property="aslib_is_up_to_date" targetfile="${deploy.dir}/ooo.swc">
      <srcfiles dir="projects/narya/src/as" includes="**/*.as"/>
      <srcfiles dir="projects/nenya/src/as" includes="**/*.as"/>
      <srcfiles dir="projects/vilya/src/as" includes="**/*.as"/>
      <srcfiles dir="projects/toybox/src/as" includes="**/*.as"/>
    </uptodate>
  </target>

  <!-- builds our Flash library -->
  <target name="aslib" unless="aslib_is_up_to_date" depends="checkaslib">
    <java jar="projects/tools/extern/flex_sdk/lib/compc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/aslib-config.xml"/>
      <arg value="-external-library-path"/>
      <arg value="projects/tools/extern/flex_sdk/frameworks/libs"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=projects/narya/src/as/"/>
      <arg value="-compiler.source-path=projects/nenya/src/as/"/>
      <arg value="-compiler.source-path=projects/vilya/src/as/"/>
      <arg value="-compiler.source-path=projects/toybox/src/as/"/>
      <arg value="-include-sources=projects/narya/src/as/"/>
      <arg value="-include-sources=projects/nenya/src/as/"/>
      <arg value="-include-sources=projects/vilya/src/as/"/>
      <arg value="-include-sources=projects/toybox/src/as/"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/ooo.swc"/>
    </java>
  </target>

  <target name="checkexportlib">
    <uptodate property="exportlib_is_up_to_date" targetfile="${deploy.dir}/msoy-export.swc">
      <srcfiles dir="${asrc.dir}/com/threerings/msoy/export" includes="**/*.as"/>
    </uptodate>
  </target>

  <!-- builds our Flash library -->
  <target name="exportlib" unless="exportlib_is_up_to_date" depends="checkexportlib">
    <java jar="projects/tools/extern/flex_sdk/lib/compc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/msoy-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-include-sources=${asrc.dir}/com/threerings/msoy/export/"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/msoy-export.swc"/>
    </java>
  </target>

  <!-- just rebuilds the Flash client, assumes nothing has changed -->
  <target name="asquick">
    <!-- sanity check to avoid confusion if someone tries to call this directly -->
    <fail message="type property must be specified: ant -Dtype=world ...">
      <condition><not><isset property="type"/></not></condition>
    </fail>
    <if><equals arg1="${type}" arg2="header"/><then>
      <property name="extension" value="as"/>
    </then><else>
      <property name="extension" value="mxml"/>
    </else></if>
    <exec executable="${basedir}/bin/mxmlc" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/msoy-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=${asrc.dir}/"/>
      <arg value="-compiler.source-path=rsrc/{locale}/i18n"/>
      <arg value="-incremental=true"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/${type}-client.swf"/>
      <arg value="-file-specs"/>
      <arg value="${asrc.dir}/${type}.${extension}"/>
    </exec>
    <copy file="${deploy.dir}/${type}-client.swf" todir="pages/clients"/>
  </target>

  <!-- builds our Flash client -->
  <target name="asclient" depends="asprepare,aslib,exportlib,asquick"/>

  <!-- builds our Flash debug client -->
  <target name="asdebug" depends="asprepare,aslib,exportlib">
    <!-- sanity check to avoid confusion if someone tries to call this directly -->
    <fail message="type property must be specified: ant -Dtype=world ...">
      <condition><not><isset property="type"/></not></condition>
    </fail>
    <if><equals arg1="${type}" arg2="header"/><then>
      <property name="extension" value="as"/>
    </then><else>
      <property name="extension" value="mxml"/>
    </else></if>
    <exec executable="${basedir}/bin/mxmlc" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/msoy-config.xml"/>
      <arg value="-compiler.debug"/>
      <arg value="-compiler.verbose-stacktraces=true"/>
      <arg value="-compiler.source-path=${asrc.dir}/"/>
      <arg value="-compiler.source-path=rsrc/{locale}/i18n"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/${type}-client.swf"/>
      <arg value="-file-specs"/>
      <arg value="${asrc.dir}/${type}.${extension}"/>
    </exec>
    <copy file="${deploy.dir}/${type}-client.swf" todir="pages/clients"/>
  </target>

  <!-- builds our avatar viewer thingy -->
  <target name="avatarviewer" depends="asprepare,aslib">
    <exec executable="${basedir}/bin/mxmlc" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/msoy-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=${asrc.dir}/"/>
      <arg value="-compiler.source-path=rsrc/{locale}/i18n"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/avatarviewer.swf"/>
      <arg value="-file-specs"/>
      <arg value="${asrc.dir}/AvatarViewer.mxml"/>
    </exec>
    <copy file="${deploy.dir}/avatarviewer.swf" todir="pages/clients"/>
  </target>

  <!-- builds our RemixAnalyzer -->
  <target name="remixer">
    <exec executable="${basedir}/bin/mxmlc" failonerror="true">
      <arg value="-load-config"/>
      <arg value="etc/msoy-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=${asrc.dir}/"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/RemixAnalyzer.swf"/>
      <arg value="-file-specs"/>
      <arg value="${asrc.dir}/com/threerings/msoy/item/remix/tools/RemixAnalyzer.as"/>
    </exec>
    <!--<copy file="${deploy.dir}/RemixAnalyzer.swf" todir="bin"/>-->
  </target>

  <!-- builds, runs Proguard on and signs a Java client -->
  <target name="proguard">
    <!-- figure out where the Java rt.jar file lives -->
    <condition property="rtClasses" value="${java.home}/../Classes/classes.jar">
      <istrue value="${platform.darwin}"/>
    </condition>
    <condition property="rtClasses" value="${java.home}/lib/rt.jar">
      <isfalse value="${platform.darwin}"/>
    </condition>
    <mkdir dir="${deploy.dir}"/>

    <!-- run Proguard -->
    <taskdef resource="proguard/ant/task.properties" classpath="${extlib.dir}/proguard.jar"/>
    <proguard configuration="etc/${ident}-client.pro">
      <libraryjar name="${rtClasses}"/>
    </proguard>

    <!-- optionally sign the resulting jar file -->
    <if><isset property="cert_dir"/><then>
      <property file="${cert_dir}/certificate.properties"/>
      <signjar lazy="true" keystore="${sign.keystore}" storepass="${sign.storepass}"
               alias="${sign.alias}">
        <fileset dir="${deploy.dir}" includes="${ident}-client.jar"/>
      </signjar>
      <copy file="${deploy.dir}/${ident}-client.jar" todir="pages/clients"/>
    </then></if>
  </target>

  <!-- builds our Java clients -->
  <property name="jclients" value="admin,game,swiftly"/>
  <target name="jclients" depends="dist">
    <for list="${jclients}" param="ident">
      <sequential>
        <antcall target="proguard"><param name="ident" value="@{ident}"/></antcall>
      </sequential>
    </for>
  </target>

  <!-- generates fields for persistent record classes -->
  <target name="genrecord" depends="prepare">
    <taskdef name="grecord" classname="com.samskivert.jdbc.depot.tools.GenRecordTask"
             classpathref="classpath"/>
    <!-- make sure the record class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Record.java"/>
    </javac>
    <!-- now update the source files -->
    <grecord classpathref="classpath">
      <fileset dir="${src.dir}" includes="**/*Record.java"/>
    </grecord>
  </target>

  <!-- generates additional methods for distributed object classes -->
  <target name="gendobj" depends="prepare">
    <taskdef name="dobj"
             classname="com.threerings.presents.tools.GenDObjectTask"
             classpathref="classpath"/>
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <dobj classpathref="classpath">
      <fileset dir="${src.dir}" includes="**/*Object.java"/>
    </dobj>
  </target>

  <!-- generates marshaller and dispatcher classes for all invocation -->
  <!-- service declarations -->
  <target name="genservice" depends="prepare">
    <taskdef name="service"
             classname="com.threerings.presents.tools.GenServiceTask"
             classpathref="classpath"/>
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Service.java"/>
      <exclude name="**/web/**"/>
    </javac>
    <!-- now generate the associated files -->
    <service header="lib/SOURCE_HEADER" asroot="${asrc.dir}"
             classpathref="classpath">
      <fileset dir="${src.dir}" includes="**/*Service.java" excludes="**/web/**"/>
    </service>
  </target>

  <!-- generates sender and decoder classes for all invocation -->
  <!-- receiver declarations -->
  <target name="genreceiver" depends="prepare"> 
    <taskdef name="receiver"
             classname="com.threerings.presents.tools.GenReceiverTask"
             classpathref="classpath"/>
    <!-- make sure the receiver class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Receiver.java"/>
      <exclude name="**/InvocationReceiver.java"/>
    </javac>
    <!-- now generate the associated files -->
    <receiver header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="${src.dir}" includes="**/*Receiver.java"
        excludes="**/InvocationReceiver.java"/>
    </receiver>
  </target>

  <!-- generates ActionScript versions of our Streamable classes -->
  <target name="genascript">
    <taskdef name="genscript" classpathref="classpath"
             classname="com.threerings.presents.tools.GenActionScriptTask"/>
    <!-- now generate the associated files -->
    <genscript header="lib/SOURCE_HEADER" asroot="${asrc.dir}">
      <fileset dir="${src.dir}" includes="**/data/*.java"/>
    </genscript>
  </target>

  <!-- creates the serialized color repository config -->
  <target name="colorpos">
    <taskdef name="confcomp" classpathref="classpath"
      classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp parser="com.threerings.media.image.tools.xml.ColorPositoryParser"
      configdef="rsrc/config/media/colordefs.xml"/>
  </target>

  <!-- run the unit tests -->
  <target name="tests" depends="compile" description="Runs unit tests.">
    <taskdef name="unit" classpathref="classpath"
      classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
    <unit printsummary="no" haltonfailure="yes" fork="true">
      <classpath refid="classpath"/>
      <formatter type="brief" usefile="false"/>
      <batchtest>
        <fileset dir="${src.dir}" includes="**/*UnitTest.java"/>
      </batchtest>
    </unit>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="prepare">
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes"
           debug="on" optimize="off" deprecation="on">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
    <!-- copy native libraries into dist/lib -->
    <copy todir="${deploy.dir}/lib">
      <fileset dir="projects/narya/${deploy.dir}/lib" includes="**/libsignal.so"/>
    </copy>
  </target>

  <!-- build the javadoc documentation -->
  <target name="javadoc" depends="prepare">
    <property name="copy.holder"  value="Three Rings Design, Inc."/>
    <javadoc windowtitle="${app.name} API"
             doctitle="${app.name} API"
             bottom="Copyright &#169; 2006-2007 ${copy.holder}. All Rights Reserved."
             destdir="${javadoc.dir}"
             additionalparam="-breakiterator">
      <classpath refid="classpath"/>
      <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
      <link href="http://samskivert.com/code/samskivert/samskivert/docs/api"/>
      <fileset dir="${src.dir}" includes="**/*.java"/>
      <fileset dir="${gsrc.dir}" includes="client/**/*.java"/>
    </javadoc>
  </target>

  <!-- builds the javadocs and stuffs them in a directory where they -->
  <!-- won't be blown away when we do "clean" next time -->
  <target name="savedoc" depends="javadoc">
    <delete dir="${savedoc.dir}/api"/>
    <copy todir="${savedoc.dir}/api">
      <fileset dir="${javadoc.dir}" includes="**/*"/>
    </copy>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,prepare,compile,javadoc,dist"/>

  <!-- rebuild all the niggling bits -->
  <target name="bits" depends="colorpos"/>

  <!-- builds the distribution jar files -->
  <target name="dist" depends="prepare,compile">
    <!-- stick all our code in one jar file -->
    <jar file="${deploy.dir}/${app.name}-code.jar"
         basedir="${deploy.dir}/classes">
      <include name="com/**"/>
      <include name="*.properties"/>
      <include name="rsrc/**/*.properties"/>
    </jar>
    <!-- and all of our configuration and media in another -->
    <jar file="${deploy.dir}/${app.name}-media.jar"
         basedir="${deploy.dir}/classes" includes="rsrc/**"/>
  </target>

  <!-- builds top-level flash applications. -->
  <target name="flashapps" depends="avatarviewer">
    <antcall target="asclient"><param name="type" value="world"/></antcall>
    <antcall target="asclient"><param name="type" value="header"/></antcall>
  </target>

  <!-- rebuilds all subprojects and the whole top-level distribution -->
  <target name="distall" depends="prepare,distprojects,dist,flashapps,jclients">
    <antcall target="gclient">
      <param name="full" value="true"/>
    </antcall>
  </target>

  <!-- rebuilds everything and extra bits for packaging -->
  <target name="distpkg" depends="distall,javadoc"/>

  <!-- cleans out the compiled code -->
  <target name="clean">
    <delete dir="${deploy.dir}/classes/com"/>
  </target>

  <!-- cleans out the compiled ActionScript code and caches -->
  <target name="asclean">
    <delete><fileset dir="${asrc.dir}" includes="*.cache"/></delete>
    <delete file="${asrc.dir}/com/threerings/msoy/client/DeploymentConfig.as"/>
  </target>

  <!-- cleans out the compiled GWT bits and caches -->
  <target name="gclean">
    <delete dir=".gwt-cache"/>
    <for list="${pages}" param="page">
      <sequential>
        <delete dir="pages/@{page}"/>
        <delete file="${gsrc.dir}/@{page}.gwt.xml"/>
      </sequential>
    </for>
  </target>

  <!-- fully cleans out the application -->
  <target name="distclean" depends="asclean,gclean">
    <delete dir="${deploy.dir}"/>
    <delete dir="pages/clients"/>
  </target>

  <!-- cleans out the application and all subprojects -->
  <target name="cleanall" depends="cleanprojects,clean,gclean,asclean"/>

  <!-- fully cleans out the application and all subprojects -->
  <target name="distcleanall" depends="distcleanprojects,distclean"/>

  <!-- prepare ${destroot} for all the packages being built -->
  <target name="preppkg">
    <antcallback target="prepare-server" return="pkg.base"/>
    <antcall target="prepare-server-extra"/>
    <antcall target="prepare-pages"/>
    <antcall target="prepare-docs"/>
  </target>

  <!-- install project specific server code into ${pkg.base} -->
  <target name="prepare-server-extra">
    <antcall target="copywithperms">
      <param name="copy.perms" value="755"/>
      <param name="copy.src"   value="${tools.dir}/bin"/>
      <param name="copy.list"  value="lfilter,filter_interesting"/>
      <param name="copy.dest"  value="${pkg.base}/${tools.dir}/bin"/>
    </antcall>
    <antcall target="prepare-server-rcscript"/>
    <mkdir dir="${pkg.base}/data"/>
    <copy todir="${pkg.base}/data">
      <fileset dir="data" includes="**"/>
    </copy>
  </target>

</project>
