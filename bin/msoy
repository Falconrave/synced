#!/bin/sh
#
# $Id$
#
# Startup script for a Java server.

# Define project specific bits here
SERVER=msoy
RESPAWN=msoyrespawn
RUNSERVER=msoyserver
CONF=msoy-server.conf

# Everything from here down should not need configuration
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
    echo "This script must be run as root."
    exit 255
fi

ROOT=`dirname $0`/..
ROOT=`cd $ROOT ; pwd`
if [ ! -f $ROOT/dist/$CONF ]; then
    echo "Unable to infer ROOT. No $CONF file?"
    exit 1
fi

check_pid() {
    NAME=$1
    PIDFILE=$2
    PROCESS=$3
    if [ -f $PIDFILE ]; then
        PID=`cat $PIDFILE`
        RPIDS=`ps auxww | grep " $PID " | grep $PROCESS | awk '{ print $2 }' | \
            sort -n | head -1`
        if [ ! -z "$RPIDS" ]; then
            echo "WARNING: A $NAME process is currently running with pid $RPIDS."
            echo "WARNING: Run '$0 stop' to stop it."
            exit 255
        fi
    fi
}

kill_server() {
    MESSAGE=$1
    SIGNAL=$2
    SERVER_PIDFILE=$ROOT/run/server-$PROCID.pid
    if [ ! -f $SERVER_PIDFILE ]; then
        echo "No $SERVER_PIDFILE exists. Is the server running?"
    else
        echo -n "$MESSAGE $SERVER $PROCID."
        # if we're SIGKILLing the server, try to generate a thread dump first
        if [ "$SIGNAL" = 9 ]; then
            kill -3 `cat $SERVER_PIDFILE`
        fi
        kill -$SIGNAL `cat $SERVER_PIDFILE`
        echo "Check $ROOT/log/respawn-$PROCID.log to ensure that it restarts."
        rm -f $SERVER_PIDFILE
    fi
}

# Read in our configuration
. $ROOT/dist/$CONF

# Use our hostname to compute an identifier for log files and such
PROCID=`hostname | sed 's:\..*::'`

# Let's blow that file descriptor limit wide open baby!
ulimit -n 4096

# Bump our maximum data segment size to 1.5 gigs
ulimit -d 1572864

# See how we were called
case "$1" in
  start)
        # Make sure respawn script is not currently running
        check_pid "respawn" $ROOT/run/respawn-$PROCID.pid $RESPAWN

        # Make sure there are no hung server processes
        check_pid "$RUNSERVER" $ROOT/run/server-$PROCID.pid java

        # Go ahead and start things up
        DAEMON=$ROOT/bin/$RESPAWN
        RESPAWN_PIDFILE=$ROOT/run/respawn-$PROCID.pid
        SERVER_PIDFILE=$ROOT/run/server-$PROCID.pid
        LOGFILE=$ROOT/log/respawn-$PROCID.log
        echo -n "Starting $DAEMON: "
        touch $RESPAWN_PIDFILE $LOGFILE
        $DAEMON $PROCID $RESPAWN_PIDFILE $SERVER_PIDFILE >>$LOGFILE 2>&1 </dev/null &
        echo "started."
        ;;

  stop)
        RESPAWN_PIDFILE=$ROOT/run/respawn-$PROCID.pid
        SERVER_PIDFILE=$ROOT/run/server-$PROCID.pid
        if [ ! -f $RESPAWN_PIDFILE ]; then
            echo "No $RESPAWN_PIDFILE exists. Is $RESPAWN running?"
        else
            echo "Shutting down $RESPAWN."
            kill `cat $RESPAWN_PIDFILE`
            rm -f $RESPAWN_PIDFILE
        fi
        if [ ! -f $SERVER_PIDFILE ]; then
            echo "No $SERVER_PIDFILE exists. Is $RUNSERVER running?"
        else
            echo "Shutting down $SERVER."
            kill `cat $SERVER_PIDFILE`
            rm -f $SERVER_PIDFILE
        fi
        ;;

  unspawn)
        RESPAWN_PIDFILE=$ROOT/run/respawn-$PROCID.pid
        if [ ! -f $RESPAWN_PIDFILE ]; then
            echo "No $RESPAWN_PIDFILE exists. Is $RESPAWN running?"
        else
            echo -n "Shutting down $RESPAWN."
            kill `cat $RESPAWN_PIDFILE`
            rm -f $RESPAWN_PIDFILE
        fi
        ;;

  restart)
        kill_server "Shutting down" 15
        ;;

  kill)
        kill_server "Sticking a fork in" 9
        ;;

  *)
        echo "Usage: $0 {start|stop|unspawn|restart}"
        exit 1
esac

exit 0
