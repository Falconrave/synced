#!/usr/bin/perl -w
#
# $Id$
#
# A script to respawn the MetaSOY server over and over again, assuming that
# it exits cleanly each time.

my $root = `cd \`dirname $0\`/..; pwd`; chomp($root);
my $node = shift or die "Usage: $0 nodename [pidfile]\n";

# figure out what user as which to run the server
my $msoy_user;
open(CONFIG, "$root/server.conf") or die "Can't read $root/server.conf: $!\n";
while (<CONFIG>) {
    chomp;
    my @bits = split(/=/);
    if (@bits && $bits[0] eq "MSOY_USER") {
        $msoy_user = $bits[1];
    }
}
close(CONFIG);
die "Unable to determine server user from $root/server.conf\n" unless (defined $msoy_user);

my $LOG;
if (!open($LOG, ">$root/log/respawn-$node.log")) {
    warn "Unable to log to $root/log/respawn-$node.log: $!\n";
    $LOG = STDERR;
}

my $pidfile = shift;
my $server_pidfile = shift;
if (defined $pidfile) {
    if (open(OUT, ">$pidfile")) {
        print OUT "$$\n";
        close(OUT);
        print $LOG "Wrote pid ($$) to $pidfile.\n";
    } else {
        print $LOG "Unable to write PID to '$pidfile': $!\n";
    }
}

while (1) {
    # note the time
    my $start = time();
    my $now = localtime($start);

    # update the code to the latest version
    check_system("apt-get update");
    check_system("apt-get install msoy-server");

    # now run the server
    print $LOG "$now Running msoy server: $root/bin/runmsoy $node $server_pidfile\n";
    my $rcode = system("su -m $msoy_user -c \"$root/bin/runmsoy $node $server_pidfile\"");

    # note the time again
    my $finish = time();
    my $duration = $finish-$start;
    my $fnow = localtime($finish);

    # report and deal with the server's exit code
    if ($rcode != 0) {
        print $LOG "$fnow MetaSOY server failed (return code: $rcode) after $duration seconds.\n";
    } else {
	print $LOG "$fnow MetaSOY server exited healthily after $duration seconds.\n";
    }

    # don't spiral out of control; only restart once per minute
    if ($duration < 60) {
        print $LOG "$fnow MetaSOY server exited too quickly. Taking a breather.\n";
        sleep(60-$duration);
    }
}

sub check_system {
    my @command = @_;
    my $rcode = system($command);
    die "'$command' failed: $rcode\n" unless ($rcode == 0);
}
