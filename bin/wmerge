#!/usr/bin/python

## Executable for mergin log files

import os.path, sys
sys.path.append(os.path.join(os.path.dirname(sys.argv[0]), "../src/python"))

import msoy.servers, msoy.logs, util.log as logutil, util.process as procutil
import optparse

description = '''Downloads and merges whirled log files from all whirled servers. Only downloads
files once unless forced (see below). By default, includes only world server logs, but may include
any combination of world or bureau logs. Merged output contains a short prefix on each line
indicating the original source. The merged file is written to the console.'''

parser = optparse.OptionParser(description=description)
parser.add_option("-d", "--date", dest="date", metavar="YYYY-MM-DD",
    help="Merges the rolled logs for a given date", default=None)
parser.add_option("-s", "--servers", dest="servers", metavar="[w][b]",
    default="w", help="Servers to include in the merge, w=world, b=bureau")
parser.add_option("-f", "--force", dest="force", action="store_true",
    default=False, help="Always download files, even if local copies exist")

(opts, args) = parser.parse_args()

try:
    user = os.environ['USER']
    logs = []
    tags = []

    def appendLogs (servers):
        for server in servers:
            for stem in server.logstems():
                for localFile in msoy.logs.retrieveLogs([server], stem, opts.date, opts.force):
                    logs.append(localFile)
                    tags.append(server.brief())

    if opts.servers.find("w") >= 0:
        appendLogs(msoy.servers.world)

    if opts.servers.find("b") >= 0:
        appendLogs(msoy.servers.bureau)

    print >> sys.stderr, "Merging %d logs" % len(logs)

    opened = []
    try:
        for log in logs: opened.append(open(log))
        logutil.mergeLogs(opened, tags, sys.stdout)

    finally:
        for file in opened: file.close()

except procutil.ProgramError, err:
    err.dump(sys.stderr)

except KeyboardInterrupt:
    pass
