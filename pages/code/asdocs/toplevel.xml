<asdoc>

<classRec name='Random' fullname='com.threerings.util:Random' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Random.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A seedable pseudorandom generator of the Mersenne Twister variety, with an extremely
 long period. Note that this is not a cryptographically sound generator.
 This implementation is based on one found at --
    http://onegame.bona.jp/tips/mersennetwister.html
 An explanation of the algorithm can be found at --
    http://en.wikipedia.org/wiki/Mersenne_twister
 ]]></description>
</classRec>
<method name='Random' fullname='com.threerings.util:Random/Random' isStatic='false' isFinal='false' isOverride='false'  param_names='seed' param_types='uint' param_defaults='0' result_type='*'>
<description><![CDATA[
     Creates a pseudo random number generation.
     
     ]]></description>
<param><![CDATA[seed a seed of 0 will randomly seed the generator, anything
     other than 0 will create a generator with the specified seed.
     ]]></param>
</method>
<method name='imul' fullname='com.threerings.util:Random/protected:imul' isStatic='false' isFinal='false' isOverride='false'  param_names='a;b' param_types='Number;Number' param_defaults='undefined;undefined' result_type='Number'>
</method>
<method name='next' fullname='com.threerings.util:Random/protected:next' isStatic='false' isFinal='false' isOverride='false'  param_names='bits' param_types='int' param_defaults='undefined' result_type='uint'>
</method>
<method name='nextBoolean' fullname='com.threerings.util:Random/nextBoolean' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Returns a random Boolean value.
     ]]></description>
</method>
<method name='nextInt' fullname='com.threerings.util:Random/nextInt' isStatic='false' isFinal='false' isOverride='false'  param_names='n' param_types='int' param_defaults='0' result_type='int'>
<description><![CDATA[
     Returns the an int value n where 0 <= value < n.
          ]]></description>
<param><![CDATA[n the range to return.  If this is set to 0 it will return a
     random integer value.  Anything less than 0 will thrown an error.
     ]]></param>
</method>
<method name='nextNumber' fullname='com.threerings.util:Random/nextNumber' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Returns a random Number where 0.0 <= value < 1.0.
     ]]></description>
</method>
<method name='setSeed' fullname='com.threerings.util:Random/setSeed' isStatic='false' isFinal='false' isOverride='false'  param_names='seed' param_types='uint' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Sets the seed of the generator.  This will result in the same generator
     sequence of values as a new generator created with the specified seed.
     ]]></description>
</method>
<field name='LOWER_MASK' fullname='com.threerings.util:Random/protected:LOWER_MASK' type='uint' isStatic='true' isConst='true' defaultValue='0x7fffffff' >
</field>
<field name='M' fullname='com.threerings.util:Random/protected:M' type='int' isStatic='true' isConst='true' defaultValue='397' >
</field>
<field name='MATRIX_A' fullname='com.threerings.util:Random/protected:MATRIX_A' type='uint' isStatic='true' isConst='true' defaultValue='0x9908b0df' >
</field>
<field name='N' fullname='com.threerings.util:Random/protected:N' type='int' isStatic='true' isConst='true' defaultValue='624' >
</field>
<field name='UPPER_MASK' fullname='com.threerings.util:Random/protected:UPPER_MASK' type='uint' isStatic='true' isConst='true' defaultValue='0x80000000' >
</field>
<field name='p' fullname='com.threerings.util:Random/protected:p' type='int' isStatic='false' isConst='false' >
</field>
<field name='q' fullname='com.threerings.util:Random/protected:q' type='int' isStatic='false' isConst='false' >
</field>
<field name='r' fullname='com.threerings.util:Random/protected:r' type='int' isStatic='false' isConst='false' >
</field>
<field name='seedUniquifier' fullname='com.threerings.util:Random/protected:seedUniquifier' type='uint' isStatic='true' isConst='false' defaultValue='2812526361' >
</field>
<field name='x' fullname='com.threerings.util:Random/protected:x' type='Array' isStatic='false' isConst='false' >
</field>
<interfaceRec name='Map' fullname='com.threerings.util:Map' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Map.as' namespace='com.threerings.util' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A Map is an object that maps keys to values.
 ]]></description>
</interfaceRec>
<method name='clear' fullname='com.threerings.util:Map/com.threerings.util:Map:clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Clear this map, removing all stored elements.
     ]]></description>
</method>
<method name='containsKey' fullname='com.threerings.util:Map/com.threerings.util:Map:containsKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='Object' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Returns true if the specified key exists in the map.
     ]]></description>
</method>
<method name='forEach' fullname='com.threerings.util:Map/com.threerings.util:Map:forEach' isStatic='false' isFinal='false' isOverride='false'  param_names='fn' param_types='Function' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Call the specified function, which accepts two args: key and value,
     for every mapping.
     ]]></description>
</method>
<method name='get' fullname='com.threerings.util:Map/com.threerings.util:Map:get' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='Object' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Retrieve the value stored in this map for the specified key.
     Returns the value, or undefined if there is no mapping for the key.
     ]]></description>
</method>
<method name='isEmpty' fullname='com.threerings.util:Map/com.threerings.util:Map:isEmpty' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Returns true if this map contains no elements.
     ]]></description>
</method>
<method name='keys' fullname='com.threerings.util:Map/com.threerings.util:Map:keys' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Return all the unique keys in this Map, in Array form.
     The Array is not a 'view': it can be modified without disturbing
     the Map from whence it came.
     ]]></description>
</method>
<method name='put' fullname='com.threerings.util:Map/com.threerings.util:Map:put' isStatic='false' isFinal='false' isOverride='false'  param_names='key;value' param_types='Object;Object' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
     Store a value in the map associated with the specified key.
     Returns the previous value stored for that key, or undefined.
     ]]></description>
</method>
<method name='remove' fullname='com.threerings.util:Map/com.threerings.util:Map:remove' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='Object' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Removes the mapping for the specified key.
     Returns the value that had been stored, or undefined.
     ]]></description>
</method>
<method name='size' fullname='com.threerings.util:Map/com.threerings.util:Map:size' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Return the current size of the map.
     ]]></description>
</method>
<method name='values' fullname='com.threerings.util:Map/com.threerings.util:Map:values' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Return all the values in this Map, in Array form.
     The Array is not a 'view': it can be modified without disturbing
     the Map from whence it came.
     ]]></description>
</method>
<classRec name='StringUtil' fullname='com.threerings.util:StringUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/StringUtil.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<method name='deNull' fullname='com.threerings.util:StringUtil/deNull' isStatic='true' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Return the specified String, or "" if it is null.
     ]]></description>
</method>
<method name='endsWith' fullname='com.threerings.util:StringUtil/endsWith' isStatic='true' isFinal='false' isOverride='false'  param_names='str;substr' param_types='String;String' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Does the specified string end with the specified substring.
     ]]></description>
</method>
<method name='fieldsToString' fullname='com.threerings.util:StringUtil/fieldsToString' isStatic='true' isFinal='false' isOverride='false'  param_names='buf;obj;fieldNames' param_types='com.threerings.util:StringBuilder;Object;Array' param_defaults='undefined;undefined;null' result_type='void'>
<description><![CDATA[
     Return a string containing all the public fields of the object
          ]]></description>
<param><![CDATA[buf the StringBuilder to which to append
     ]]></param>
<param><![CDATA[obj the object to be inspected
     ]]></param>
<param><![CDATA[fieldNames the names of fields to print, or null to print all.
     ]]></param>
</method>
<method name='formatNumber' fullname='com.threerings.util:StringUtil/formatNumber' isStatic='true' isFinal='false' isOverride='false'  param_names='n' param_types='Number' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Format the specified number, nicely, with commas.
     TODO: format specifyer, locale handling, etc. We'll probably move this into a
     NumberFormat-style class.
     ]]></description>
</method>
<method name='fromBytes' fullname='com.threerings.util:StringUtil/fromBytes' isStatic='true' isFinal='false' isOverride='false'  param_names='bytes' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Turn the specified byte array, containing only ascii characters, into a String.
     ]]></description>
</method>
<method name='hashCode' fullname='com.threerings.util:StringUtil/hashCode' isStatic='true' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='int'>
<description><![CDATA[
     Get a reasonable hash code for the specified String.
     ]]></description>
</method>
<method name='hexdump' fullname='com.threerings.util:StringUtil/hexdump' isStatic='true' isFinal='false' isOverride='false'  param_names='bytes' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Create line-by-line hexadecimal output with a counter, much like the
     'hexdump' Unix utility. For debugging purposes.
     ]]></description>
</method>
<method name='hexlate' fullname='com.threerings.util:StringUtil/hexlate' isStatic='true' isFinal='false' isOverride='false'  param_names='bytes' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Generates a string from the supplied bytes that is the hex encoded
     representation of those byts. Returns the empty String for a
     <code>null</code> or empty byte array.
     ]]></description>
</method>
<method name='isBlank' fullname='com.threerings.util:StringUtil/isBlank' isStatic='true' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Is the specified string null, empty, or does it contain only whitespace?
     ]]></description>
</method>
<method name='isLowerCase' fullname='com.threerings.util:StringUtil/isLowerCase' isStatic='true' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Return true iff the first character is a lower-case character.
     ]]></description>
</method>
<method name='isUpperCase' fullname='com.threerings.util:StringUtil/isUpperCase' isStatic='true' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Return true iff the first character is an upper-case character.
     ]]></description>
</method>
<method name='isWhitespace' fullname='com.threerings.util:StringUtil/isWhitespace' isStatic='true' isFinal='false' isOverride='false'  param_names='character' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     ]]></description>
<return><![CDATA[true if the specified String is == to a single whitespace character.
     ]]></return>
</method>
<method name='pad' fullname='com.threerings.util:StringUtil/pad' isStatic='true' isFinal='false' isOverride='false'  param_names='str;length;padChar' param_types='String;int;String' param_defaults='undefined;undefined; ' result_type='String'>
<description><![CDATA[
     Append 0 or more copies of the padChar String to the input String
     until it is at least the specified length.
     ]]></description>
</method>
<method name='parseBoolean' fullname='com.threerings.util:StringUtil/parseBoolean' isStatic='true' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Parse a Boolean from a String, throwing an ArgumentError if the String
     contains invalid characters.
          "1", "0", and any capitalization variation of "true" and "false" are
     the only valid input values.
          ]]></description>
<param><![CDATA[str the String to parse.
     ]]></param>
</method>
<method name='parseInt0' fullname='com.threerings.util:StringUtil/protected:parseInt0' isStatic='true' isFinal='false' isOverride='false'  param_names='str;radix;allowNegative' param_types='String;uint;Boolean' param_defaults='undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[
     Internal helper function for parseInteger and parseUnsignedInteger.
     ]]></description>
</method>
<method name='parseInteger' fullname='com.threerings.util:StringUtil/parseInteger' isStatic='true' isFinal='false' isOverride='false'  param_names='str;radix' param_types='String;uint' param_defaults='undefined;0' result_type='int'>
<description><![CDATA[
     Parse an integer more anally than the built-in parseInt() function,
     throwing an ArgumentError if there are any invalid characters.
          The built-in parseInt() will ignore trailing non-integer characters.
          ]]></description>
<param><![CDATA[str The string to parse.
     ]]></param>
<param><![CDATA[radix The radix to use, from 2 to 16. If not specified the radix will be 10,
            unless the String begins with "0x" in which case it will be 16,
            or the String begins with "0" in which case it will be 8.
     ]]></param>
</method>
<method name='parseNumber' fullname='com.threerings.util:StringUtil/parseNumber' isStatic='true' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
     Parse a Number from a String, throwing an ArgumentError if there are any
     invalid characters.
          1.5, 2e-3, -Infinity, Infinity, and NaN are all valid Strings.
          ]]></description>
<param><![CDATA[str the String to parse.
     ]]></param>
</method>
<method name='parseURLs' fullname='com.threerings.util:StringUtil/parseURLs' isStatic='true' isFinal='false' isOverride='false'  param_names='s' param_types='String' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
     Locate URLs in a string, return an array in which even elements
     are plain text, odd elements are urls (as Strings). Any even element
     may be an empty string.
     ]]></description>
</method>
<method name='parseUnsignedInteger' fullname='com.threerings.util:StringUtil/parseUnsignedInteger' isStatic='true' isFinal='false' isOverride='false'  param_names='str;radix' param_types='String;uint' param_defaults='undefined;0' result_type='uint'>
<description><![CDATA[
     Parse an integer more anally than the built-in parseInt() function,
     throwing an ArgumentError if there are any invalid characters.
          The built-in parseInt() will ignore trailing non-integer characters.
          ]]></description>
<param><![CDATA[str The string to parse.
     ]]></param>
<param><![CDATA[radix The radix to use, from 2 to 16. If not specified the radix will be 10,
            unless the String begins with "0x" in which case it will be 16,
            or the String begins with "0" in which case it will be 8.
     ]]></param>
</method>
<method name='prepad' fullname='com.threerings.util:StringUtil/prepad' isStatic='true' isFinal='false' isOverride='false'  param_names='str;length;padChar' param_types='String;int;String' param_defaults='undefined;undefined; ' result_type='String'>
<description><![CDATA[
     Prepend 0 or more copies of the padChar String to the input String
     until it is at least the specified length.
     ]]></description>
</method>
<method name='simpleToString' fullname='com.threerings.util:StringUtil/simpleToString' isStatic='true' isFinal='false' isOverride='false'  param_names='obj;fieldNames' param_types='Object;Array' param_defaults='undefined;null' result_type='String'>
<description><![CDATA[
     Return a pretty basic toString of the supplied Object.
          ]]></description>
<param><![CDATA[obj the object to be string'd
     ]]></param>
<param><![CDATA[fieldNames the names of fields to print, or null to print all.
     ]]></param>
</method>
<method name='startsWith' fullname='com.threerings.util:StringUtil/startsWith' isStatic='true' isFinal='false' isOverride='false'  param_names='str;substr' param_types='String;String' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Does the specified string start with the specified substring.
     ]]></description>
</method>
<method name='substitute' fullname='com.threerings.util:StringUtil/substitute' isStatic='true' isFinal='false' isOverride='false'  param_names='str;args' param_types='String;restParam' param_defaults='undefined;undefined' result_type='String'>
<description><![CDATA[
     Substitute "{n}" tokens for the corresponding passed-in arguments.
     ]]></description>
</method>
<method name='toBytes' fullname='com.threerings.util:StringUtil/toBytes' isStatic='true' isFinal='false' isOverride='false'  param_names='s' param_types='String' param_defaults='undefined' result_type='flash.utils:ByteArray'>
<description><![CDATA[
     Turn the specified String, containing only ascii characters, into a ByteArray.
     ]]></description>
</method>
<method name='toHex' fullname='com.threerings.util:StringUtil/toHex' isStatic='true' isFinal='false' isOverride='false'  param_names='n;width' param_types='uint;uint' param_defaults='undefined;undefined' result_type='String'>
<description><![CDATA[
     Return a hexadecimal representation of an unsigned int, potentially left-padded with
     zeroes to arrive at of precisely the requested width, e.g.
           toHex(131, 4) -> "0083"
     ]]></description>
</method>
<method name='toString' fullname='com.threerings.util:StringUtil/toString' isStatic='true' isFinal='false' isOverride='false'  param_names='obj;refs' param_types=';flash.utils:Dictionary' param_defaults='undefined;null' result_type='String'>
<description><![CDATA[
     Nicely format the specified object into a String.
     ]]></description>
</method>
<method name='trim' fullname='com.threerings.util:StringUtil/trim' isStatic='true' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Utility function that strips whitespace from the beginning and end of a String.
     ]]></description>
</method>
<method name='trimBeginning' fullname='com.threerings.util:StringUtil/trimBeginning' isStatic='true' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Utility function that strips whitespace from the beginning of a String.
     ]]></description>
</method>
<method name='trimEnd' fullname='com.threerings.util:StringUtil/trimEnd' isStatic='true' isFinal='false' isOverride='false'  param_names='str' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Utility function that strips whitespace from the end of a String.
     ]]></description>
</method>
<method name='truncate' fullname='com.threerings.util:StringUtil/truncate' isStatic='true' isFinal='false' isOverride='false'  param_names='s;maxLength;append' param_types='String;int;String' param_defaults='undefined;undefined;' result_type='String'>
<description><![CDATA[
     Truncate the specified String if it is longer than maxLength.
     The string will be truncated at a position such that it is
     maxLength chars long after the addition of the 'append' String.
          ]]></description>
<param><![CDATA[append a String to add to the truncated String only after
     truncation.
     ]]></param>
</method>
<method name='unhexlate' fullname='com.threerings.util:StringUtil/unhexlate' isStatic='true' isFinal='false' isOverride='false'  param_names='hex' param_types='String' param_defaults='undefined' result_type='flash.utils:ByteArray'>
<description><![CDATA[
     Turn a hexlated String back into a ByteArray.
     ]]></description>
</method>
<method name='validateDecimal' fullname='com.threerings.util:StringUtil/protected:validateDecimal' isStatic='true' isFinal='false' isOverride='false'  param_names='str;allowDot;allowTrailingE' param_types='String;Boolean;Boolean' param_defaults='undefined;undefined;undefined' result_type='String'>
<description><![CDATA[
     Internal helper function for parseNumber.
     ]]></description>
</method>
<field name='DECIMAL' fullname='com.threerings.util:StringUtil/protected:DECIMAL' type='Array' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[ Decimal digits. ]]></description>
</field>
<field name='HEX' fullname='com.threerings.util:StringUtil/protected:HEX' type='Array' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[ Hexidecimal digits. ]]></description>
</field>
<field name='URL_REGEXP' fullname='com.threerings.util:StringUtil/protected:URL_REGEXP' type='RegExp' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[ A regular expression that finds URLs. ]]></description>
</field>
<classRec name='ObserverList' fullname='com.threerings.util:ObserverList' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/ObserverList.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<method name='ObserverList' fullname='com.threerings.util:ObserverList/ObserverList' isStatic='false' isFinal='false' isOverride='false'  param_names='notifyPolicy' param_types='int' param_defaults='2' result_type='*'>
<description><![CDATA[
     Constructor
     ]]></description>
</method>
<method name='add' fullname='com.threerings.util:ObserverList/add' isStatic='false' isFinal='false' isOverride='false'  param_names='observer;index' param_types='Object;int' param_defaults='undefined;-1' result_type='void'>
<description><![CDATA[
     Add an observer to this list.
          ]]></description>
<param><![CDATA[index the index at which to add the observer, or -1 for the end.
     ]]></param>
</method>
<method name='apply' fullname='com.threerings.util:ObserverList/apply' isStatic='false' isFinal='false' isOverride='false'  param_names='func' param_types='Function' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Apply some operation to all observers.
     The function to be passed in should expect one argument and either
     return void or a Boolean. If returning a Boolean, returning false
     indicates that the observer should be removed from the list.
     ]]></description>
</method>
<method name='remove' fullname='com.threerings.util:ObserverList/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='observer' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Remove an observer from this list.
     ]]></description>
</method>
<method name='size' fullname='com.threerings.util:ObserverList/size' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Return the size of the list.
     ]]></description>
</method>
<field name='FAST_UNSAFE_NOTIFY' fullname='com.threerings.util:ObserverList/FAST_UNSAFE_NOTIFY' type='int' isStatic='true' isConst='true' defaultValue='2' >
<description><![CDATA[ A notification ordering policy wherein the observers are notified
     last to first so that they can be removed during the notification
     process and new observers added will not inadvertently be notified
     as well, but no copy of the observer list need be made. This will
     not work if observers are added or removed from arbitrary positions
     in the list during a notification call. ]]></description>
</field>
<field name='SAFE_IN_ORDER_NOTIFY' fullname='com.threerings.util:ObserverList/SAFE_IN_ORDER_NOTIFY' type='int' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[ A notification ordering policy indicating that the observers
     should be notified in the order they were added and that the
     notification should be done on a snapshot of the array. ]]></description>
</field>
<field name='_list' fullname='com.threerings.util:ObserverList/protected:_list' type='Array' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[ The actual list of observers. ]]></description>
</field>
<field name='_notifyPolicy' fullname='com.threerings.util:ObserverList/protected:_notifyPolicy' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ Our notification policy. ]]></description>
</field>
<classRec name='ObjectMarshaller' fullname='com.threerings.util:ObjectMarshaller' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/ObjectMarshaller.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Utility methods for transforming flash objects into byte[].
 ]]></description>
</classRec>
<method name='decode' fullname='com.threerings.util:ObjectMarshaller/decode' isStatic='true' isFinal='false' isOverride='false'  param_names='encoded' param_types='Object' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
     Decode the specified byte[] or byte[][] back into a flash Object.
     ]]></description>
</method>
<method name='encode' fullname='com.threerings.util:ObjectMarshaller/encode' isStatic='true' isFinal='false' isOverride='false'  param_names='obj;encodeArrayElements' param_types='Object;Boolean' param_defaults='undefined;false' result_type='Object'>
<description><![CDATA[
     Encode the specified object as either a byte[] or a byte[][] (see below).
     The specific mechanism of encoding is not important,
     as long as decode returns a clone of the original object.
          No validation is done to verify that the object can be serialized.
          Currently, cycles in the object graph are preserved on the other end.
          ]]></description>
<param><![CDATA[encodeArrayElements if true and the obj is an Array, each element is
     encoded separately, returning a byte[][] instead of a byte[].
     ]]></param>
</method>
<method name='getValidationError' fullname='com.threerings.util:ObjectMarshaller/getValidationError' isStatic='true' isFinal='false' isOverride='false'  param_names='value' param_types='Object' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Get the String reason why this value is not encodable, or null if no error.
     ]]></description>
</method>
<method name='staticInit' fullname='com.threerings.util:ObjectMarshaller/private:staticInit' isStatic='true' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Our static initializer.
     ]]></description>
</method>
<method name='validateAndEncode' fullname='com.threerings.util:ObjectMarshaller/validateAndEncode' isStatic='true' isFinal='false' isOverride='false'  param_names='obj;maxLength' param_types='Object;int' param_defaults='undefined;-1' result_type='flash.utils:ByteArray'>
<description><![CDATA[
     Validate the value and encode it. Arrays are not broken-up.
     ]]></description>
<param><![CDATA[maxLength The maximum size of the data after encoding,
                      or -1 if no size restriction.
     ]]></param>
</method>
<method name='validateValue' fullname='com.threerings.util:ObjectMarshaller/validateValue' isStatic='true' isFinal='false' isOverride='false'  param_names='value' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Validate that the value is kosher for encoding, or throw an ArgumentError if it's not.
     ]]></description>
</method>
<field name='DICTIONARY_MARKER' fullname='com.threerings.util:ObjectMarshaller/DICTIONARY_MARKER' type='int' isStatic='true' isConst='true' defaultValue='99' >
</field>
<field name='VALID_CLASSES' fullname='com.threerings.util:ObjectMarshaller/protected:VALID_CLASSES' type='Array' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[ Non-simple classes that we allow, as long as they are not subclassed. ]]></description>
</field>
<classRec name='ClassUtil' fullname='com.threerings.util:ClassUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/ClassUtil.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<method name='getClass' fullname='com.threerings.util:ClassUtil/getClass' isStatic='true' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='Class'>
</method>
<method name='getClassByName' fullname='com.threerings.util:ClassUtil/getClassByName' isStatic='true' isFinal='false' isOverride='false'  param_names='cname' param_types='String' param_defaults='undefined' result_type='Class'>
</method>
<method name='getClassName' fullname='com.threerings.util:ClassUtil/getClassName' isStatic='true' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Get the full class name, e.g. "com.threerings.util.ClassUtil".
     ]]></description>
</method>
<method name='isAssignableAs' fullname='com.threerings.util:ClassUtil/isAssignableAs' isStatic='true' isFinal='false' isOverride='false'  param_names='asClass;srcClass' param_types='Class;Class' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Returns true if an object of type srcClass is a subclass of or
     implements the interface represented by the asClass paramter.
          <code>
     if (ClassUtil.isAssignableAs(Streamable, someClass)) {
         var s :Streamable = (new someClass() as Streamable);
     </code>
     ]]></description>
</method>
<method name='isFinal' fullname='com.threerings.util:ClassUtil/isFinal' isStatic='true' isFinal='false' isOverride='false'  param_names='type' param_types='Class' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='isSameClass' fullname='com.threerings.util:ClassUtil/isSameClass' isStatic='true' isFinal='false' isOverride='false'  param_names='obj1;obj2' param_types='Object;Object' param_defaults='undefined;undefined' result_type='Boolean'>
</method>
<method name='newInstance' fullname='com.threerings.util:ClassUtil/newInstance' isStatic='true' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
     Return a new instance that is the same class as the specified
     object. The class must have a zero-arg constructor.
     ]]></description>
</method>
<method name='shortClassName' fullname='com.threerings.util:ClassUtil/shortClassName' isStatic='true' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Get the class name with the last part of the package, e.g. "util.ClassUtil".
     ]]></description>
</method>
<method name='tinyClassName' fullname='com.threerings.util:ClassUtil/tinyClassName' isStatic='true' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Get just the class name, e.g. "ClassUtil".
     ]]></description>
</method>
<classRec name='RingBuffer' fullname='com.threerings.util:RingBuffer' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/RingBuffer.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<method name='RingBuffer' fullname='com.threerings.util:RingBuffer/RingBuffer' isStatic='false' isFinal='false' isOverride='false'  param_names='capacity' param_types='uint' param_defaults='1' result_type='*'>
<description><![CDATA[ Creates a new RingBuffer with the specified capacity. ]]></description>
</method>
<method name='at' fullname='com.threerings.util:RingBuffer/at' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='uint' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Returns the element at the specified index.
     If index >= length, at() will return undefined.
     ]]></description>
</method>
<method name='clear' fullname='com.threerings.util:RingBuffer/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ Removes all elements from the RingBuffer. ]]></description>
</method>
<method name='every' fullname='com.threerings.util:RingBuffer/every' isStatic='false' isFinal='false' isOverride='false'  param_names='callback;thisObject' param_types='Function' param_defaults='undefined;null' result_type='Boolean'>
<description><![CDATA[
     Executes a test function on each item in the ring buffer
     until an item is reached that returns false for the specified
     function.
     
     Returns a Boolean value of true if all items in the buffer return
     true for the specified function; otherwise, false.
     ]]></description>
</method>
<method name='forEach' fullname='com.threerings.util:RingBuffer/forEach' isStatic='false' isFinal='false' isOverride='false'  param_names='callback;thisObject' param_types='Function' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Executes a function on each item in the ring buffer.
     ]]></description>
</method>
<method name='indexOf' fullname='com.threerings.util:RingBuffer/indexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='searchElement;fromIndex' param_types=';int' param_defaults='undefined;0' result_type='int'>
<description><![CDATA[
     Searches for an item in the ring buffer by using strict equality
     (===) and returns the index position of the item, or -1
     if the item is not found.
     ]]></description>
</method>
<method name='pop' fullname='com.threerings.util:RingBuffer/pop' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
     Removes the last element from the RingBuffer and returns it.
     If the RingBuffer is empty, pop() will return undefined.
     ]]></description>
</method>
<method name='push' fullname='com.threerings.util:RingBuffer/push' isStatic='false' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
     Adds the specified elements to the back of the RingBuffer.
     If the RingBuffer's length is equal to its capacity, this
     will cause a elements to be removed from the front of
     the RingBuffer.
     Returns the new length of the RingBuffer.
     ]]></description>
</method>
<method name='shift' fullname='com.threerings.util:RingBuffer/shift' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
     Removes the first element from the RingBuffer and returns it.
     If the RingBuffer is empty, shift() will return undefined.
     ]]></description>
</method>
<method name='unshift' fullname='com.threerings.util:RingBuffer/unshift' isStatic='false' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
     Adds the specified elements to the front of the RingBuffer.
     If the RingBuffer's length is equal to its capacity, this
     will cause elements to be removed from the back of
     the RingBuffer.
     Returns the new length of the RingBuffer.
     ]]></description>
</method>
<method name='capacity' fullname='com.threerings.util:RingBuffer/capacity/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[ Returns the capacity of the RingBuffer. ]]></description>
</method>
<method name='empty' fullname='com.threerings.util:RingBuffer/empty/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[ Returns true if the RingBuffer contains 0 elements. ]]></description>
</method>
<method name='length' fullname='com.threerings.util:RingBuffer/length/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[ Returns the number of elements currently stored in the RingBuffer. ]]></description>
</method>
<method name='capacity' fullname='com.threerings.util:RingBuffer/capacity/set' isStatic='false' isFinal='false' isOverride='false'  param_names='newCapacity' param_types='uint' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Sets the capacity of the RingBuffer.
     If the new capacity is less than the RingBuffer's length,
     elements will be removed from the end of the RingBuffer
     to accommodate the smaller capacity.
     ]]></description>
</method>
<field name='_array' fullname='com.threerings.util:RingBuffer/protected:_array' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_capacity' fullname='com.threerings.util:RingBuffer/protected:_capacity' type='uint' isStatic='false' isConst='false' >
</field>
<field name='_firstIndex' fullname='com.threerings.util:RingBuffer/protected:_firstIndex' type='uint' isStatic='false' isConst='false' >
</field>
<field name='_length' fullname='com.threerings.util:RingBuffer/protected:_length' type='uint' isStatic='false' isConst='false' >
</field>
<classRec name='Command' fullname='com.threerings.util:Command' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Command.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Contains a simple binding function to bind events to commands.
  TODO: be able to set up a Command object, and bind it to multiple functions
 ]]></description>
</classRec>
<method name='bind' fullname='com.threerings.util:Command/bind' isStatic='true' isFinal='false' isOverride='false'  param_names='source;eventType;cmdOrFn;arg' param_types='flash.events:IEventDispatcher;String;Object;Object' param_defaults='undefined;undefined;undefined;null' result_type='void'>
<description><![CDATA[
     Bind an event to a command.
     ]]></description>
</method>
<method name='dispatch' fullname='com.threerings.util:Command/dispatch' isStatic='true' isFinal='false' isOverride='false'  param_names='source;cmdOrFn;arg' param_types='flash.events:IEventDispatcher;Object;Object' param_defaults='undefined;undefined;null' result_type='void'>
<description><![CDATA[
     Convenience, since otherwise nobody usually needs to ever import CommandEvent.
     ]]></description>
</method>
<interfaceRec name='ResultListener' fullname='com.threerings.util:ResultListener' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/ResultListener.as' namespace='com.threerings.util' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
</interfaceRec>
<method name='requestCompleted' fullname='com.threerings.util:ResultListener/com.threerings.util:ResultListener:requestCompleted' isStatic='false' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='requestFailed' fullname='com.threerings.util:ResultListener/com.threerings.util:ResultListener:requestFailed' isStatic='false' isFinal='false' isOverride='false'  param_names='cause' param_types='Error' param_defaults='undefined' result_type='void'>
</method>
<classRec name='RandomUtil' fullname='com.threerings.util:RandomUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/RandomUtil.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Random Random utilities.
 ]]></description>
</classRec>
<method name='getWeightedIndex' fullname='com.threerings.util:RandomUtil/getWeightedIndex' isStatic='true' isFinal='false' isOverride='false'  param_names='weights;randomFn' param_types='Array;Function' param_defaults='undefined;null' result_type='int'>
<description><![CDATA[
     Return the picked index from a weighted list.
          ]]></description>
<param><![CDATA[weights an Array containing Numbers, ints, or uints. All values should be
     non-negative.
     ]]></param>
<param><![CDATA[a random function that returns (0 <= value < 1), if null then Math.random() will
     be used.
     ]]></param>
</method>
<method name='pickRandom' fullname='com.threerings.util:RandomUtil/pickRandom' isStatic='true' isFinal='false' isOverride='false'  param_names='values;randomFn' param_types='Array;Function' param_defaults='undefined;null' result_type='Object'>
<description><![CDATA[
     Picks a random object from the supplied array of values. Even weight is given to all
     elements of the array.
          ]]></description>
<return><![CDATA[a randomly selected item or null if the array is null or of length zero.
     ]]></return>
</method>
<classRec name='Util' fullname='com.threerings.util:Util' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Util.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<method name='XMLtoString' fullname='com.threerings.util:Util/XMLtoString' isStatic='true' isFinal='false' isOverride='false'  param_names='xml;settings' param_types='XML;Object' param_defaults='undefined;null' result_type='String'>
<description><![CDATA[
     Call toString() on the specified XML object safely. This is equivalent to
     <code>xml.toString()</code> but offers protection from other code that may have changed
     the default settings used for stringing XML. Also, if you would like to use the
     non-standard printing settings this method will protect other code from being
     broken by you.
          ]]></description>
<param><![CDATA[xml the xml value to Stringify.
     ]]></param>
<param><![CDATA[settings an Object containing your desired XML settings, or null (or omitted) to
     use the default settings.
     ]]></param>
<see><![CDATA[XML#toString()
     ]]></see>
<see><![CDATA[XML#setSettings()
     ]]></see>
</method>
<method name='XMLtoXMLString' fullname='com.threerings.util:Util/XMLtoXMLString' isStatic='true' isFinal='false' isOverride='false'  param_names='xml;settings' param_types='XML;Object' param_defaults='undefined;null' result_type='String'>
<description><![CDATA[
     Call toXMLString() on the specified XML object safely. This is equivalent to
     <code>xml.toXMLString()</code> but offers protection from other code that may have changed
     the default settings used for stringing XML. Also, if you would like to use the
     non-standard printing settings this method will protect other code from being
     broken by you.
          ]]></description>
<param><![CDATA[xml the xml value to Stringify.
     ]]></param>
<param><![CDATA[settings an Object containing your desired XML settings, or null (or omitted) to
     use the default settings.
     ]]></param>
<see><![CDATA[XML#toXMLString()
     ]]></see>
<see><![CDATA[XML#setSettings()
     ]]></see>
</method>
<method name='equals' fullname='com.threerings.util:Util/equals' isStatic='true' isFinal='false' isOverride='false'  param_names='obj1;obj2' param_types='Object;Object' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     A nice utility method for testing equality in a better way.
     If the objects are Equalable, then that will be tested. Arrays
     and ByteArrays are also compared and are equal if they have
     elements that are equals (deeply).
     ]]></description>
</method>
<method name='init' fullname='com.threerings.util:Util/init' isStatic='true' isFinal='false' isOverride='false'  param_names='target;initProps;defaults;maskProps' param_types='Object;Object;Object;Object' param_defaults='undefined;undefined;null;null' result_type='void'>
<description><![CDATA[
     Initialize the target object with values present in the initProps object and the defaults
     object. Neither initProps nor defaults will be modified.
     ]]></description>
<param><![CDATA[target any object or class instance.
     ]]></param>
<param><![CDATA[initProps a plain Object hash containing names and properties to set on the target
                      object.
     ]]></param>
<param><![CDATA[defaults a plain Object hash containing names and properties to set on the target
                     object, only if the same property name does not exist in initProps.
     ]]></param>
<param><![CDATA[maskProps a plain Object hash containing names of properties to omit setting
                      from the initProps object. This allows you to add custom properties to
                      initProps without having to modify the value from your callers.
     ]]></param>
<throws><![CDATA[ReferenceError if a property cannot be set on the target object.
          ]]></throws>
</method>
<method name='isPlainObject' fullname='com.threerings.util:Util/isPlainObject' isStatic='true' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Returns true if the specified object is just a regular old associative hash.
     ]]></description>
</method>
<method name='isSimple' fullname='com.threerings.util:Util/isSimple' isStatic='true' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Is the specified object 'simple': one of the basic built-in flash types.
     ]]></description>
</method>
<method name='keys' fullname='com.threerings.util:Util/keys' isStatic='true' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
     Get an array containing the property keys of the specified object, in their
     natural iteration order.
     ]]></description>
</method>
<method name='newXML' fullname='com.threerings.util:Util/newXML' isStatic='true' isFinal='false' isOverride='false'  param_names='value;settings' param_types='Object;Object' param_defaults='undefined;null' result_type='XML'>
<description><![CDATA[
     Parse the 'value' object into XML safely. This is equivalent to <code>new XML(value)</code>
     but offers protection from other code that may have changing the default settings
     used for parsing XML. Also, if you would like to use non-standard parsing settings
     this method will protect other code from being broken by you.
          ]]></description>
<param><![CDATA[value the value to parse into XML.
     ]]></param>
<param><![CDATA[settings an Object containing your desired XML settings, or null (or omitted) to
     use the default settings.
     ]]></param>
<see><![CDATA[XML#setSettings()
     ]]></see>
</method>
<method name='safeXMLOp' fullname='com.threerings.util:Util/safeXMLOp' isStatic='true' isFinal='false' isOverride='false'  param_names='fn;settings' param_types='Function;Object' param_defaults='undefined;null' result_type='*'>
<description><![CDATA[
     Perform an operation on XML that takes place using the specified settings, and
     restores the XML settings to their previous values.
          ]]></description>
<param><![CDATA[fn a function to be called with no arguments.
     ]]></param>
<param><![CDATA[settings an Object containing your desired XML settings, or null (or omitted) to
     use the default settings.
          ]]></param>
<return><![CDATA[the return value of your function, if any.
     ]]></return>
<see><![CDATA[XML#setSettings()
     ]]></see>
<see><![CDATA[XML#settings()
     ]]></see>
</method>
<method name='unfuckVarargs' fullname='com.threerings.util:Util/unfuckVarargs' isStatic='true' isFinal='false' isOverride='false'  param_names='args' param_types='Array' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
     If you call a varargs method by passing it an array, the array
     will end up being arg 1.
     ]]></description>
</method>
<method name='values' fullname='com.threerings.util:Util/values' isStatic='true' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
     Get an array containing the property values of the specified object, in their
     natural iteration order.
     ]]></description>
</method>
<interfaceRec name='Boxed' fullname='com.threerings.util:Boxed' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Boxed.as' namespace='com.threerings.util' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 An interface implemented by our "boxed" data classes.
 ]]></description>
</interfaceRec>
<method name='unbox' fullname='com.threerings.util:Boxed/com.threerings.util:Boxed:unbox' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Return the unboxed value.
     ]]></description>
</method>
<classRec name='Comparators' fullname='com.threerings.util:Comparators' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Comparators.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Contains sorting Comparators.
 These functions are suitable for passing to Array.sort(), or with a flex Sort object.
 ]]></description>
</classRec>
<method name='COMPARABLE' fullname='com.threerings.util:Comparators/COMPARABLE' isStatic='true' isFinal='false' isOverride='false'  param_names='c1;c2;ignored' param_types='com.threerings.util:Comparable;com.threerings.util:Comparable;restParam' param_defaults='undefined;undefined;undefined' result_type='int'>
<description><![CDATA[
     A standard Comparator for comparing Comparable values.
     ]]></description>
</method>
<method name='createReverse' fullname='com.threerings.util:Comparators/createReverse' isStatic='true' isFinal='false' isOverride='false'  param_names='comparator' param_types='Function' param_defaults='undefined' result_type='Function'>
<description><![CDATA[
     Create a Comparator function that reverses the ordering of the specified Comparator.
     ]]></description>
</method>
<classRec name='StringBuilder' fullname='com.threerings.util:StringBuilder' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/StringBuilder.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<method name='StringBuilder' fullname='com.threerings.util:StringBuilder/StringBuilder' isStatic='false' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='*'>
</method>
<method name='append' fullname='com.threerings.util:StringBuilder/append' isStatic='false' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='com.threerings.util:StringBuilder'>
<description><![CDATA[
     Append all arguments to the end of the string being built
     and return this StringBuilder.
     ]]></description>
</method>
<method name='toString' fullname='com.threerings.util:StringBuilder/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Return the String built so far.
     ]]></description>
</method>
<field name='_buf' fullname='com.threerings.util:StringBuilder/protected:_buf' type='String' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[ The string upon which we build. Internally in AVM2, Strings have
     been designed with a prefix pointer so that concatination is
     really cheap. ]]></description>
</field>
<classRec name='MethodQueue' fullname='com.threerings.util:MethodQueue' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/MethodQueue.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A simple mechanism for queueing functions to be called on the next frame.
 Similar to UIComponent's callLater, only flex-free.
 ]]></description>
</classRec>
<method name='callLater' fullname='com.threerings.util:MethodQueue/callLater' isStatic='true' isFinal='false' isOverride='false'  param_names='fn;args' param_types='Function;Array' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Call the specified method at the entry to the next frame.
     ]]></description>
</method>
<method name='handleTimer' fullname='com.threerings.util:MethodQueue/protected:handleTimer' isStatic='true' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:TimerEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Handle a timer event: call any queued functions.
     ]]></description>
</method>
<field name='_methodQueue' fullname='com.threerings.util:MethodQueue/protected:_methodQueue' type='Array' isStatic='true' isConst='false' defaultValue='unknown' >
<description><![CDATA[ The currently queued functions. ]]></description>
</field>
<field name='_t' fullname='com.threerings.util:MethodQueue/protected:_t' type='flash.utils:Timer' isStatic='true' isConst='false' defaultValue='' >
<description><![CDATA[ A timer that will fire as quickly as possible. ]]></description>
</field>
<interfaceRec name='Iterator' fullname='com.threerings.util:Iterator' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Iterator.as' namespace='com.threerings.util' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Java has Iterator, ActionScript has IViewCursor.
 The problem is, IViewCursor defines 14 methods and 5 read-only properties.
 That is a serious PITA to write for every collection that might desire
 iteration. This provides a simpler alternative.
 ]]></description>
</interfaceRec>
<method name='hasNext' fullname='com.threerings.util:Iterator/com.threerings.util:Iterator:hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Is there another element available?
     ]]></description>
</method>
<method name='next' fullname='com.threerings.util:Iterator/com.threerings.util:Iterator:next' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Returns the next element.
     ]]></description>
</method>
<method name='remove' fullname='com.threerings.util:Iterator/com.threerings.util:Iterator:remove' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Remove the last returned element.
     ]]></description>
</method>
<classRec name='ParameterUtil' fullname='com.threerings.util:ParameterUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/ParameterUtil.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A utility for loading parameters from an XML file when run from
 the local filesystem.
  The file "parameters.xml" should reside in the current directory and contains:
  <parameters>
      <param name="name1" value="val1"/>
      <param name="name2" value="val2"/>
  </parameters>
 ]]></description>
</classRec>
<method name='getInfoParameters' fullname='com.threerings.util:ParameterUtil/getInfoParameters' isStatic='true' isFinal='false' isOverride='false'  param_names='loaderInfo;callback' param_types='flash.display:LoaderInfo;Function' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Get the parameters.
     Note: the callback function may be called prior to this method
     returning.
     ]]></description>
</method>
<method name='getParameters' fullname='com.threerings.util:ParameterUtil/getParameters' isStatic='true' isFinal='false' isOverride='false'  param_names='disp;callback' param_types='flash.display:DisplayObject;Function' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Get the parameters.
     Note: the callback function may be called prior to this method
     returning.
     ]]></description>
</method>
<method name='logWarning' fullname='com.threerings.util:ParameterUtil/protected:logWarning' isStatic='true' isFinal='false' isOverride='false'  param_names='msg' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Convenience function to log a warning, since we don't keep around
     a Log instance.
     ]]></description>
</method>
<interfaceRec name='Comparable' fullname='com.threerings.util:Comparable' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Comparable.as' namespace='com.threerings.util' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
</interfaceRec>
<method name='compareTo' fullname='com.threerings.util:Comparable/com.threerings.util:Comparable:compareTo' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='Object' param_defaults='undefined' result_type='int'>
<description><![CDATA[
     Compare this object to the other one, and return 0 if they're equal,
     -1 if this object is less than the other, or 1 if this object is greater.
     Note: Please use [-1, 0, 1] to be compatible with flex Sort objects.
     ]]></description>
</method>
<classRec name='Assert' fullname='com.threerings.util:Assert' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Assert.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Simple implementation of assertion checks for debug environments.
 When running in a debug player, each function will test the assert expression,
 and if it fails, log an error message with a stack trace. When running in a
 release player, these functions do not run any tests, and exit immediately.
  Note: stack dumping is controlled via the Assert.dumpStack parameter.
  Usage example:
 <pre>
   Assert.isNotNull(mystack.top());
   Assert.isTrue(mystack.length == 1, "Unexpected number of items on stack!");
 </pre>
 ]]></description>
</classRec>
<method name='fail' fullname='com.threerings.util:Assert/fail' isStatic='true' isFinal='false' isOverride='false'  param_names='message' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ Displays an error message, with an optional stack trace. ]]></description>
</method>
<method name='isFalse' fullname='com.threerings.util:Assert/isFalse' isStatic='true' isFinal='false' isOverride='false'  param_names='value;message' param_types='Boolean;String' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[ Asserts that the value is false. ]]></description>
</method>
<method name='isNotNull' fullname='com.threerings.util:Assert/isNotNull' isStatic='true' isFinal='false' isOverride='false'  param_names='value;message' param_types='Object;String' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[ Asserts that the value is not equal to null. ]]></description>
</method>
<method name='isNull' fullname='com.threerings.util:Assert/isNull' isStatic='true' isFinal='false' isOverride='false'  param_names='value;message' param_types='Object;String' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[ Asserts that the value is equal to null. ]]></description>
</method>
<method name='isTrue' fullname='com.threerings.util:Assert/isTrue' isStatic='true' isFinal='false' isOverride='false'  param_names='value;message' param_types='Boolean;String' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[ Asserts that the value is true. ]]></description>
</method>
<field name='_debug' fullname='com.threerings.util:Assert/protected:_debug' type='Boolean' isStatic='true' isConst='false' defaultValue='' >
</field>
<field name='_log' fullname='com.threerings.util:Assert/protected:_log' type='com.threerings.util:Log' isStatic='true' isConst='false' defaultValue='' >
</field>
<field name='dumpStack' fullname='com.threerings.util:Assert/dumpStack' type='Boolean' isStatic='true' isConst='false' defaultValue='true' >
<description><![CDATA[ Controls whether stack dumps should be included in the error log (default value is true).]]></description>
</field>
<classRec name='DateUtil' fullname='com.threerings.util:DateUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/DateUtil.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Utility for dates.
 ]]></description>
</classRec>
<method name='getConversationalDateString' fullname='com.threerings.util:DateUtil/getConversationalDateString' isStatic='true' isFinal='false' isOverride='false'  param_names='date;now' param_types='Date;Date' param_defaults='undefined;null' result_type='String'>
<description><![CDATA[
     Calculates a brief, conversational representation of the given date relative to 'now':
          Date occured in a past year:
        10/10/1969
     Date occured over 6 days ago:
        Oct 10
     Date occured over 23 hours ago:
        Wed 15:10
     Date occured in the past 23 hours:
       15:10
     ]]></description>
</method>
<method name='getDayName' fullname='com.threerings.util:DateUtil/getDayName' isStatic='true' isFinal='false' isOverride='false'  param_names='day;full' param_types='uint;Boolean' param_defaults='undefined;false' result_type='String'>
<description><![CDATA[
     Return the name of the given (integer) day; 0 is Sunday, and so on.
     ]]></description>
</method>
<method name='getMonthName' fullname='com.threerings.util:DateUtil/getMonthName' isStatic='true' isFinal='false' isOverride='false'  param_names='month;full' param_types='uint;Boolean' param_defaults='undefined;false' result_type='String'>
<description><![CDATA[
     Return the name of the given (integer) month; 0 is January, and so on.
     ]]></description>
</method>
<field name='_days' fullname='com.threerings.util:DateUtil/protected:_days' type='Array' isStatic='true' isConst='false' defaultValue='unknown' >
</field>
<field name='_months' fullname='com.threerings.util:DateUtil/protected:_months' type='Object' isStatic='true' isConst='false' defaultValue='unknown' >
</field>
<classRec name='TimeUtil' fullname='com.threerings.util:TimeUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/TimeUtil.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Utility for times.
 ]]></description>
</classRec>
<method name='getQuantityPerUnit' fullname='com.threerings.util:TimeUtil/protected:getQuantityPerUnit' isStatic='true' isFinal='false' isOverride='false'  param_names='unit' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
     Internal method to get the quantity for the specified unit.
     (Not very OO)
     ]]></description>
</method>
<method name='getTimeOrderString' fullname='com.threerings.util:TimeUtil/getTimeOrderString' isStatic='true' isFinal='false' isOverride='false'  param_names='duration;minUnit;maxUnit' param_types='Number;int;int' param_defaults='undefined;undefined;-1' result_type='String'>
<description><![CDATA[
     Get a translatable string specifying the magnitude of the specified
     duration. Results will be between "1 second" and "X hours", with
     all times rounded to the nearest unit. "0 units" will never be
     displayed, the minimum is 1.
     ]]></description>
</method>
<method name='getTimeString' fullname='com.threerings.util:TimeUtil/getTimeString' isStatic='true' isFinal='false' isOverride='false'  param_names='duration;minUnit' param_types='Number;int' param_defaults='undefined;undefined' result_type='String'>
<description><![CDATA[
     Get a translatable string specifying the duration, down to the
     minimum granularity.
     ]]></description>
</method>
<method name='getTransKey' fullname='com.threerings.util:TimeUtil/protected:getTransKey' isStatic='true' isFinal='false' isOverride='false'  param_names='unit' param_types='int' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Internal method to get the translation key for the specified unit.
     (Not very OO)
     ]]></description>
</method>
<field name='DAY' fullname='com.threerings.util:TimeUtil/DAY' type='int' isStatic='true' isConst='true' defaultValue='4' >
<description><![CDATA[ Time unit constant. ]]></description>
</field>
<field name='HOUR' fullname='com.threerings.util:TimeUtil/HOUR' type='int' isStatic='true' isConst='true' defaultValue='3' >
<description><![CDATA[ Time unit constant. ]]></description>
</field>
<field name='MAX_UNIT' fullname='com.threerings.util:TimeUtil/protected:MAX_UNIT' type='int' isStatic='true' isConst='true' defaultValue='4' >
</field>
<field name='MILLISECOND' fullname='com.threerings.util:TimeUtil/MILLISECOND' type='int' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[ Time unit constant. ]]></description>
</field>
<field name='MINUTE' fullname='com.threerings.util:TimeUtil/MINUTE' type='int' isStatic='true' isConst='true' defaultValue='2' >
<description><![CDATA[ Time unit constant. ]]></description>
</field>
<field name='SECOND' fullname='com.threerings.util:TimeUtil/SECOND' type='int' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[ Time unit constant. ]]></description>
</field>
<classRec name='Throttle' fullname='com.threerings.util:Throttle' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Throttle.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A throttle is used to prevent code from attempting a particular operation too often. Often it is
 desirable to retry an operation under failure conditions, but simplistic approaches to retrying
 operations can lead to large numbers of spurious attempts to do something that will obviously
 fail. The throttle class provides a mechanism for limiting such attempts by measuring whether or
 not an activity has been performed N times in the last M seconds. The user of the class decides
 the appropriate throttle parameters and then simply calls through to throttle to determine
 whether or not to go ahead with the operation.
  <p> For example:
  <pre>
 protected Throttle _throttle = new Throttle(5, 60000L);
  public void performOp ()
     throws UnavailableException
 {
     if (_throttle.throttleOp()) {
         throw new UnavailableException();
     }
      // perform operation
 }
 </pre>
 ]]></description>
</classRec>
<method name='Throttle' fullname='com.threerings.util:Throttle/Throttle' isStatic='false' isFinal='false' isOverride='false'  param_names='operations;period' param_types='int;int' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
     Constructs a new throttle instance that will allow the specified number of operations to
     proceed within the specified period (the period is measured in milliseconds).
          <p> As operations and period define a ratio, use the smallest value possible for
     <code>operations</code> as an array is created to track the time at which each operation was
     performed (e.g. use 6 ops per 10 seconds rather than 60 ops per 100 seconds if
     possible). However, note that you may not always want to reduce the ratio as much as
     possible if you wish to allow bursts of operations up to some large value.
     ]]></description>
</method>
<method name='getLatestOperation' fullname='com.threerings.util:Throttle/getLatestOperation' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Returns the timestamp of the most recently recorded operation.
     ]]></description>
</method>
<method name='noteOp' fullname='com.threerings.util:Throttle/noteOp' isStatic='false' isFinal='false' isOverride='false'  param_names='timeStamp' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Note that an operation occurred at the specified timestamp. This method should be used with
     {]]></description>
<link><![CDATA[#wouldThrottle} to note an operation that has already been cleared to
     occur. Typically this is used if there is another limiting factor besides the throttle that
     determines whether the operation can occur. You are responsible for calling this method in a
     safe and timely manner after using wouldThrottle.
     ]]></link>
</method>
<method name='opsToString' fullname='com.threerings.util:Throttle/opsToString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     For debugging, includes the age of all operations.
     ]]></description>
</method>
<method name='reinit' fullname='com.threerings.util:Throttle/reinit' isStatic='false' isFinal='false' isOverride='false'  param_names='operations;period' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Updates the number of operations for this throttle to a new maximum, retaining the current
     history of operations if the limit is being increased and truncating the newest operations
     if the limit is decreased.
          ]]></description>
<param><![CDATA[operations the new maximum number of operations.
     ]]></param>
<param><![CDATA[period the new period (in milliseconds).
     ]]></param>
</method>
<method name='throttleOp' fullname='com.threerings.util:Throttle/throttleOp' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Registers an attempt at an operation and returns false if the operation should be performed
     or true if it should be throttled (meaning N operations have already been performed in the
     last M seconds).
          ]]></description>
<return><![CDATA[true if the throttle is activated, false if the operation can proceed.
     ]]></return>
</method>
<method name='throttleOpAt' fullname='com.threerings.util:Throttle/throttleOpAt' isStatic='false' isFinal='false' isOverride='false'  param_names='timeStamp' param_types='int' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Registers an attempt at an operation and returns false if the operation should be performed
     or true if it should be throttled (meaning N operations have already been performed in the
     last M seconds).
          ]]></description>
<param><![CDATA[timeStamp the timestamp at which this operation is being attempted.
          ]]></param>
<return><![CDATA[true if the throttle is activated, false if the operation can proceed.
     ]]></return>
</method>
<method name='toString' fullname='com.threerings.util:Throttle/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='wouldThrottle' fullname='com.threerings.util:Throttle/wouldThrottle' isStatic='false' isFinal='false' isOverride='false'  param_names='timeStamp' param_types='int' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Check to see if we would throttle an operation occuring at the specified timestamp.
     Typically used in conjunction with {]]></description>
<link><![CDATA[#noteOp}.
     ]]></link>
</method>
<field name='_oldestOp' fullname='com.threerings.util:Throttle/protected:_oldestOp' type='int' isStatic='false' isConst='false' >
</field>
<field name='_ops' fullname='com.threerings.util:Throttle/protected:_ops' type='Array' isStatic='false' isConst='false' >
</field>
<field name='_period' fullname='com.threerings.util:Throttle/protected:_period' type='int' isStatic='false' isConst='false' >
</field>
<interfaceRec name='Set' fullname='com.threerings.util:Set' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Set.as' namespace='com.threerings.util' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
</interfaceRec>
<method name='add' fullname='com.threerings.util:Set/com.threerings.util:Set:add' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Adds the specified element to the set if it's not already present.
     Returns true if the set did not already contain the specified element.
     ]]></description>
</method>
<method name='clear' fullname='com.threerings.util:Set/com.threerings.util:Set:clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ Remove all elements from this set. ]]></description>
</method>
<method name='contains' fullname='com.threerings.util:Set/com.threerings.util:Set:contains' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[ Returns true if this set contains the specified element. ]]></description>
</method>
<method name='forEach' fullname='com.threerings.util:Set/com.threerings.util:Set:forEach' isStatic='false' isFinal='false' isOverride='false'  param_names='fn' param_types='Function' param_defaults='undefined' result_type='void'>
<description><![CDATA[ Call the specified function, which accepts an element as an argument. ]]></description>
</method>
<method name='isEmpty' fullname='com.threerings.util:Set/com.threerings.util:Set:isEmpty' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[ Returns true if this set contains no elements. ]]></description>
</method>
<method name='remove' fullname='com.threerings.util:Set/com.threerings.util:Set:remove' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Removes the specified element from this set if it is present.
     Returns true if the set contained the specified element.
     ]]></description>
</method>
<method name='size' fullname='com.threerings.util:Set/com.threerings.util:Set:size' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[ Retuns the number of elements in this set. ]]></description>
</method>
<method name='toArray' fullname='com.threerings.util:Set/com.threerings.util:Set:toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Returns all elements in the set in an Array.
          <p>Note: this interface does not specify whether modifying the returned Array will modify
     the underlying set; the decision is up to implementation. 
     ]]></description>
</method>
<classRec name='ArrayUtil' fullname='com.threerings.util:ArrayUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/ArrayUtil.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Contains methods that should be in Array, but aren't. Additionally
 contains methods that understand the interfaces in this package.
 So, for example, removeFirst() understands Equalable and will remove
 an element that is equals() to the specified element, rather than just
 === (strictly equals) to the specified element.
 ]]></description>
</classRec>
<method name='contains' fullname='com.threerings.util:ArrayUtil/contains' isStatic='true' isFinal='false' isOverride='false'  param_names='arr;element' param_types='Array;Object' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     ]]></description>
<return><![CDATA[true if the specified element, or one that is Equalable.equals() to it, is
     contained in the array.
     ]]></return>
</method>
<method name='copy' fullname='com.threerings.util:ArrayUtil/copy' isStatic='true' isFinal='false' isOverride='false'  param_names='src;srcoffset;dst;dstoffset;count' param_types='Array;uint;Array;uint;uint' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Copy a segment of one array to another.
     ]]></description>
<param><![CDATA[src the array to copy from
     ]]></param>
<param><![CDATA[srcoffset the position in the source array to begin copying from
     ]]></param>
<param><![CDATA[dst the array to copy into
     ]]></param>
<param><![CDATA[dstoffset the position in the destition array to begin copying into
     ]]></param>
<param><![CDATA[count the number of elements to copy
     ]]></param>
</method>
<method name='copyOf' fullname='com.threerings.util:ArrayUtil/copyOf' isStatic='true' isFinal='false' isOverride='false'  param_names='arr' param_types='Array' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
     Creates a shallow copy of the array.
          ]]></description>
<internal><![CDATA[TODO: add support for copy ranges and deep copies?
     ]]></internal>
</method>
<method name='create' fullname='com.threerings.util:ArrayUtil/create' isStatic='true' isFinal='false' isOverride='false'  param_names='size;val' param_types='uint' param_defaults='undefined;null' result_type='Array'>
<description><![CDATA[
     Creates a new Array and fills it with a default value.
     ]]></description>
<param><![CDATA[size the size of the array
     ]]></param>
<param><![CDATA[val the value to store at each index of the Array
     ]]></param>
</method>
<method name='createEqualsPred' fullname='com.threerings.util:ArrayUtil/private:createEqualsPred' isStatic='true' isFinal='false' isOverride='false'  param_names='element' param_types='Object' param_defaults='undefined' result_type='Function'>
</method>
<method name='equals' fullname='com.threerings.util:ArrayUtil/equals' isStatic='true' isFinal='false' isOverride='false'  param_names='ar1;ar2' param_types='Array;Array' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Do the two arrays contain elements that are all equals()?
     ]]></description>
</method>
<method name='findIf' fullname='com.threerings.util:ArrayUtil/findIf' isStatic='true' isFinal='false' isOverride='false'  param_names='arr;predicate' param_types='Array;Function' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
     Returns the first item in the array for which the predicate function returns true, or
     undefined if no such item was found. The predicate function should be of type:
       function (element : :Boolean { }
          ]]></description>
<return><![CDATA[the matching element, or undefined if no matching element was found.
     ]]></return>
</method>
<method name='indexIf' fullname='com.threerings.util:ArrayUtil/indexIf' isStatic='true' isFinal='false' isOverride='false'  param_names='arr;predicate' param_types='Array;Function' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
     Returns the index of the first item in the array for which the predicate function
     returns true, or -1 if no such item was found. The predicate function should be of type:
       function (element : :Boolean { }
          ]]></description>
<return><![CDATA[the zero-based index of the matching element, or -1 if none found.
     ]]></return>
</method>
<method name='indexOf' fullname='com.threerings.util:ArrayUtil/indexOf' isStatic='true' isFinal='false' isOverride='false'  param_names='arr;element' param_types='Array;Object' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
     Returns the first index of the supplied element in the array. Note that if the element
     implements Equalable, an element that is equals() will have its index returned, instead
     of requiring the search element to be === (strictly equal) to an element in the array
     like Array.indexOf().
          ]]></description>
<return><![CDATA[the zero-based index of the matching element, or -1 if none found.
     ]]></return>
</method>
<method name='removeAll' fullname='com.threerings.util:ArrayUtil/removeAll' isStatic='true' isFinal='false' isOverride='false'  param_names='arr;element' param_types='Array;Object' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Removes all instances of the specified element from the array.
          ]]></description>
<return><![CDATA[true if at least one element was removed, false otherwise.
     ]]></return>
</method>
<method name='removeAllIf' fullname='com.threerings.util:ArrayUtil/removeAllIf' isStatic='true' isFinal='false' isOverride='false'  param_names='arr;pred' param_types='Array;Function' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Removes all elements in the array for which the specified predicate returns true.
          ]]></description>
<param><![CDATA[pred a Function of the form: function (element : :Boolean
          ]]></param>
<return><![CDATA[true if an element was removed, false otherwise.
     ]]></return>
</method>
<method name='removeFirst' fullname='com.threerings.util:ArrayUtil/removeFirst' isStatic='true' isFinal='false' isOverride='false'  param_names='arr;element' param_types='Array;Object' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Remove the first instance of the specified element from the array.
          ]]></description>
<return><![CDATA[true if an element was removed, false otherwise.
     ]]></return>
</method>
<method name='removeFirstIf' fullname='com.threerings.util:ArrayUtil/removeFirstIf' isStatic='true' isFinal='false' isOverride='false'  param_names='arr;pred' param_types='Array;Function' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Removes the first element in the array for which the specified predicate returns true.
          ]]></description>
<param><![CDATA[pred a Function of the form: function (element : :Boolean
          ]]></param>
<return><![CDATA[true if an element was removed, false otherwise.
     ]]></return>
</method>
<method name='removeIfImpl' fullname='com.threerings.util:ArrayUtil/private:removeIfImpl' isStatic='true' isFinal='false' isOverride='false'  param_names='arr;pred;firstOnly' param_types='Array;Function;Boolean' param_defaults='undefined;undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Implementation of removeIf methods.
     ]]></description>
</method>
<method name='removeImpl' fullname='com.threerings.util:ArrayUtil/private:removeImpl' isStatic='true' isFinal='false' isOverride='false'  param_names='arr;element;firstOnly' param_types='Array;Object;Boolean' param_defaults='undefined;undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Implementation of remove methods.
     ]]></description>
</method>
<method name='removeLast' fullname='com.threerings.util:ArrayUtil/removeLast' isStatic='true' isFinal='false' isOverride='false'  param_names='arr;element' param_types='Array;Object' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Remove the last instance of the specified element from the array.
          ]]></description>
<return><![CDATA[true if an element was removed, false otherwise.
     ]]></return>
</method>
<method name='removeLastIf' fullname='com.threerings.util:ArrayUtil/removeLastIf' isStatic='true' isFinal='false' isOverride='false'  param_names='arr;pred' param_types='Array;Function' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Removes the last element in the array for which the specified predicate returns true.
          ]]></description>
<param><![CDATA[pred a Function of the form: function (element : :Boolean
          ]]></param>
<return><![CDATA[true if an element was removed, false otherwise.
     ]]></return>
</method>
<method name='shuffle' fullname='com.threerings.util:ArrayUtil/shuffle' isStatic='true' isFinal='false' isOverride='false'  param_names='arr;rando' param_types='Array;com.threerings.util:Random' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Randomly shuffle the elements in the specified array.
          ]]></description>
<param><![CDATA[rando a random number generator to use, or null if you don't care.
     ]]></param>
</method>
<method name='sort' fullname='com.threerings.util:ArrayUtil/sort' isStatic='true' isFinal='false' isOverride='false'  param_names='arr' param_types='Array' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Sort the specified array according to natural order- all elements
     must implement Comparable or be null.
     ]]></description>
</method>
<method name='stableSort' fullname='com.threerings.util:ArrayUtil/stableSort' isStatic='true' isFinal='false' isOverride='false'  param_names='arr;comp' param_types='Array;Function' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Perform a stable sort on the specified array.
     ]]></description>
<param><![CDATA[comp a function that takes two objects in the array and returns -1 if the first
     object should appear before the second in the container, 1 if it should appear after,
     and 0 if the order does not matter. If omitted, Comparators.COMPARABLE is used and
     the array elements should be Comparable objects.
     ]]></param>
</method>
<classRec name='NetUtil' fullname='com.threerings.util:NetUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/NetUtil.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<method name='navigateToURL' fullname='com.threerings.util:NetUtil/navigateToURL' isStatic='true' isFinal='false' isOverride='false'  param_names='url;preferredWindow' param_types=';String' param_defaults='undefined;_self' result_type='Boolean'>
<description><![CDATA[
     Convenience method to load a web page in the browser window without
     having to worry about SecurityErrors in various conditions.
          ]]></description>
<param><![CDATA[url a String or a URLRequest.
     ]]></param>
<param><![CDATA[preferredWindow the browser tab/window identifier in which to load. If you
     specify a non-null window and it causes a security error, the request is retried with null.
          ]]></param>
<return><![CDATA[true if the url was able to be loaded.
     ]]></return>
</method>
<interfaceRec name='Cloneable' fullname='com.threerings.util:Cloneable' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Cloneable.as' namespace='com.threerings.util' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
</interfaceRec>
<method name='clone' fullname='com.threerings.util:Cloneable/com.threerings.util:Cloneable:clone' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Create a clone of this object.
     ]]></description>
</method>
<classRec name='Log' fullname='com.threerings.util:Log' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Log.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A simple logging mechanism.
  Log instances are created for modules, and the logging level can be configured per
 module in a hierarchical fashion.
  Typically, you should create a module name based on the full path to a class:
 calling getLog() and passing an object or Class will do this. Alternattely, you
 may create a Log to share in several classes in a package, in which case the
 module name can be like "com.foocorp.games.bunnywar". Finally, you can just
 create made-up module names like "mygame" or "util", but this is not recommended.
 You really should name things based on your packages, and your packages should be
 named according to Sun's recommendations for Java packages.
  Typical usage for creating a Log to be used by the entire class would be:
 public class MyClass
 {
     private static const log :Log = Log.getLog(MyClass);
     ...
  OR, if you just need a one-off Log:
     protected function doStuff (thingy :Thingy) :void
     {
          if (!isValid(thingy)) {
              Log.getLog(this).warn("Invalid thingy specified", "thingy", thingy);
              ....
 ]]></description>
</classRec>
<method name='Log' fullname='com.threerings.util:Log/Log' isStatic='false' isFinal='false' isOverride='false'  param_names='module' param_types='String' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Use Log.getLog();
          ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addTarget' fullname='com.threerings.util:Log/addTarget' isStatic='true' isFinal='false' isOverride='false'  param_names='target' param_types='com.threerings.util:LogTarget' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Add a logging target.
     ]]></description>
</method>
<method name='debug' fullname='com.threerings.util:Log/debug' isStatic='false' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Log a message with 'debug' priority.
          ]]></description>
<example><![CDATA[     <listing version="3.0">
        log.debug("Message", "key1", value1, "key2", value2, optionalError);
     </listing>
     ]]></example>
<param><![CDATA[args The first argument is the actual message to log. After that, each pair
     of parameters is printed in key/value form, the benefit being that if no log
     message is generated then toString() will not be called on the values.
     A final parameter may be an Error, in which case the stack trace is printed.
          ]]></param>
</method>
<method name='doLog' fullname='com.threerings.util:Log/protected:doLog' isStatic='false' isFinal='false' isOverride='false'  param_names='level;args' param_types='int;Array' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='dumpStack' fullname='com.threerings.util:Log/dumpStack' isStatic='true' isFinal='false' isOverride='false'  param_names='msg' param_types='String' param_defaults='dumpStack' result_type='void'>
<description><![CDATA[
     A convenience function for quickly printing a stack trace
     to the log, useful for debugging.
     ]]></description>
</method>
<method name='error' fullname='com.threerings.util:Log/error' isStatic='false' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Log a message with 'error' priority.
          ]]></description>
<example><![CDATA[     <listing version="3.0">
        log.error("Message", "key1", value1, "key2", value2, optionalError);
     </listing>
     ]]></example>
<param><![CDATA[args The first argument is the actual message to log. After that, each pair
     of parameters is printed in key/value form, the benefit being that if no log
     message is generated then toString() will not be called on the values.
     A final parameter may be an Error, in which case the stack trace is printed.
          ]]></param>
</method>
<method name='formatMessage' fullname='com.threerings.util:Log/protected:formatMessage' isStatic='false' isFinal='false' isOverride='false'  param_names='level;args' param_types='int;Array' param_defaults='undefined;undefined' result_type='String'>
</method>
<method name='getLevel' fullname='com.threerings.util:Log/protected:getLevel' isStatic='true' isFinal='false' isOverride='false'  param_names='module' param_types='String' param_defaults='undefined' result_type='int'>
<description><![CDATA[
     Get the logging level for the specified module.
     ]]></description>
</method>
<method name='getLog' fullname='com.threerings.util:Log/getLog' isStatic='true' isFinal='false' isOverride='false'  param_names='moduleSpec' param_types='' param_defaults='undefined' result_type='com.threerings.util:Log'>
<description><![CDATA[
     Retrieve a Log for the specified module.
          ]]></description>
<param><![CDATA[moduleSpec can be a String of the module name, or any Object or Class to
     have the module name be the full package and name of the class (recommended).
     ]]></param>
</method>
<method name='getTimeStamp' fullname='com.threerings.util:Log/protected:getTimeStamp' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='info' fullname='com.threerings.util:Log/info' isStatic='false' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Log a message with 'info' priority.
          ]]></description>
<example><![CDATA[     <listing version="3.0">
        log.info("Message", "key1", value1, "key2", value2, optionalError);
     </listing>
     ]]></example>
<param><![CDATA[args The first argument is the actual message to log. After that, each pair
     of parameters is printed in key/value form, the benefit being that if no log
     message is generated then toString() will not be called on the values.
     A final parameter may be an Error, in which case the stack trace is printed.
          ]]></param>
</method>
<method name='logStackTrace' fullname='com.threerings.util:Log/logStackTrace' isStatic='false' isFinal='false' isOverride='false'  param_names='error' param_types='Error' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Log just a stack trace with 'warning' priority.
     Deprecated, sorta. Just use warning("Message", error);
     ]]></description>
</method>
<method name='removeTarget' fullname='com.threerings.util:Log/removeTarget' isStatic='true' isFinal='false' isOverride='false'  param_names='target' param_types='com.threerings.util:LogTarget' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Remove a logging target.
     ]]></description>
</method>
<method name='setLevel' fullname='com.threerings.util:Log/setLevel' isStatic='true' isFinal='false' isOverride='false'  param_names='module;level' param_types='String;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Set the log level for the specified module.
          ]]></description>
<param><![CDATA[module The smallest prefix desired to configure a log level.
     For example, you can set the global level with Log.setLevel("", Log.INFO);
     Then you can Log.setLevel("com.foo.game", Log.DEBUG). Now, everything
     logs at INFO level except for modules within com.foo.game, which is at DEBUG.
     ]]></param>
</method>
<method name='setLevels' fullname='com.threerings.util:Log/setLevels' isStatic='true' isFinal='false' isOverride='false'  param_names='settingString' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Parses a String in the form of ":info;com.foo.game:debug;com.bar.util:warning"
          Semicolons separate modules, colons separate a module name from the log level.
     An empty string specifies the top-level (global) module.
     ]]></description>
</method>
<method name='stringToLevel' fullname='com.threerings.util:Log/protected:stringToLevel' isStatic='true' isFinal='false' isOverride='false'  param_names='s' param_types='String' param_defaults='undefined' result_type='int'>
</method>
<method name='testing' fullname='com.threerings.util:Log/testing' isStatic='true' isFinal='false' isOverride='false'  param_names='params' param_types='restParam' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     A convenience function for quickly and easily inserting printy
     statements during application development.
     ]]></description>
</method>
<method name='warning' fullname='com.threerings.util:Log/warning' isStatic='false' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Log a message with 'warning' priority.
          ]]></description>
<example><![CDATA[     <listing version="3.0">
        log.warning("Message", "key1", value1, "key2", value2, optionalError);
     </listing>
     ]]></example>
<param><![CDATA[args The first argument is the actual message to log. After that, each pair
     of parameters is printed in key/value form, the benefit being that if no log
     message is generated then toString() will not be called on the values.
     A final parameter may be an Error, in which case the stack trace is printed.
          ]]></param>
</method>
<field name='DEBUG' fullname='com.threerings.util:Log/DEBUG' type='int' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[ Log level constants. ]]></description>
</field>
<field name='ERROR' fullname='com.threerings.util:Log/ERROR' type='int' isStatic='true' isConst='true' defaultValue='3' >
</field>
<field name='INFO' fullname='com.threerings.util:Log/INFO' type='int' isStatic='true' isConst='true' defaultValue='1' >
</field>
<field name='LEVEL_NAMES' fullname='com.threerings.util:Log/protected:LEVEL_NAMES' type='Array' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[ The outputted names of each level. The last one isn't used, it corresponds with OFF. ]]></description>
</field>
<field name='OFF' fullname='com.threerings.util:Log/OFF' type='int' isStatic='true' isConst='true' defaultValue='4' >
</field>
<field name='WARNING' fullname='com.threerings.util:Log/WARNING' type='int' isStatic='true' isConst='true' defaultValue='2' >
</field>
<field name='_levels' fullname='com.threerings.util:Log/protected:_levels' type='Object' isStatic='true' isConst='false' defaultValue='unknown' >
<description><![CDATA[ A cache of log levels, copied from _setLevels. ]]></description>
</field>
<field name='_module' fullname='com.threerings.util:Log/protected:_module' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ The module to which this log instance applies. ]]></description>
</field>
<field name='_setLevels' fullname='com.threerings.util:Log/protected:_setLevels' type='Object' isStatic='true' isConst='false' defaultValue='unknown' >
<description><![CDATA[ The configured log levels. ]]></description>
</field>
<field name='_targets' fullname='com.threerings.util:Log/protected:_targets' type='Array' isStatic='true' isConst='false' defaultValue='unknown' >
<description><![CDATA[ Other registered LogTargets, besides the trace log. ]]></description>
</field>
<classRec name='FileUtil' fullname='com.threerings.util:FileUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/FileUtil.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<method name='getDotSuffix' fullname='com.threerings.util:FileUtil/getDotSuffix' isStatic='true' isFinal='false' isOverride='false'  param_names='filename' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Returns the substring composed of the characters after the last '.' in the supplied string.
     The substring will be converted to lowercase.
     ]]></description>
</method>
<classRec name='MultiLoader' fullname='com.threerings.util:MultiLoader' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/MultiLoader.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Easy loader for many things, including managing multiple downloads.
 More documentation coming.
 ]]></description>
</classRec>
<method name='MultiLoader' fullname='com.threerings.util:MultiLoader/MultiLoader' isStatic='false' isFinal='false' isOverride='false'  param_names='sources;completeCallback;generatorFn;forEach;isCompleteCheckFn;errorTypes;completeType' param_types='Object;Function;Function;Boolean;String;Array;String' param_defaults='undefined;undefined;null;false;null;null;null' result_type='*'>
<description><![CDATA[
     Coordinate loading some asynchronous objects.
          ]]></description>
<default><![CDATA[Event.COMPLETE.
     ]]></default>
<param><![CDATA[sources An Array, Dictionary, or Object of sources, or just a single source.
     ]]></param>
<param><![CDATA[completeCallack the function to call when complete.
     ]]></param>
<param><![CDATA[generatorFunciton a function to call to generate the IEventDispatchers, or
     null if the source values are already ready to go.
     ]]></param>
<param><![CDATA[forEach whether to call the completeCallback for each source, or all-at-once at
     the end. If forEach is used, keys will never be returned.
     ]]></param>
<param><![CDATA[isCompleteCheckFn a function to attempt to call on the dispatcher to see if
     it's already complete after generation.
     ]]></param>
<param><![CDATA[errorTypes an Array of event types that will be dispatched by the loader.
     If unspecifed, all the normal error event types are used.
     ]]></param>
<param><![CDATA[completeType, the event complete type. If unspecifed ]]></param>
</method>
<method name='checkReport' fullname='com.threerings.util:MultiLoader/protected:checkReport' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='' param_defaults='undefined' result_type='void'>
</method>
<method name='getContents' fullname='com.threerings.util:MultiLoader/getContents' isStatic='true' isFinal='false' isOverride='false'  param_names='sources;completeCallback;forEach;appDom' param_types='Object;Function;Boolean;flash.system:ApplicationDomain' param_defaults='undefined;undefined;false;null' result_type='void'>
<description><![CDATA[
     Load one or more sources and return DisplayObjects.
          ]]></description>
<example><![CDATA[Load one embed, add it as a child.
     <listing version="3.0">
     MultiLoader.getContents(EMBED_CONSTANT, addChild);
     </listing>
          ]]></example>
<example><![CDATA[Load 3 embeds, add them as children.
     <listing version="3.0">
     MultiLoader.getContents([EMBED1, EMBED2, EMBED3], addChild, true);
     </listing>
          ]]></example>
<example><![CDATA[Load multiple URLs, have the contents returned to the result function one at
     a time.
     <listing version="3.0">
     function handleComplete (result :Object) :void {
        // process a result here. Result may be a DisplayObject or an Error.
     };
     
     var obj :Object = {
         key1: "http://somehost.com/someImage.gif",
         key2: "http://somehost.com/someOtherImage.gif"
     };
     
     MultiLoader.getContents(obj, handleComplete, true);
     </listing>
     
     ]]></example>
<example><![CDATA[Load 3 embeds, wait to handle them until they're all loaded.
     <listing version="3.0">
     function handleComplete (results :Array) :void {
         // process results here
     };
          MultiLoader.getContents([EMBED1, EMBED2, EMBED3], handleComplete);
     </listing>
     ]]></example>
<param><![CDATA[sources an Array, Dictionary, or Object containing sources as values, or a single
     source value. The sources may be Strings (representing urls), URLRequests, ByteArrays,
     or a Class that can be instantiated to become a URLRequest or ByteArray. Note that
     the format of your sources Object dictates the format of the return Object.
     ]]></param>
<param><![CDATA[completeCallback the function to call when complete. The signature should be:
     <code>function (value :Object) :void</code>. Note that the structure of the return Object
     is dictated by the sources parameter. If you pass in an Array, you get your results
     in an Array. If you use a Dictionary or Object, the results will be returned as the same,
     with the same keys used in sources now pointing to the results. If your sources parameter
     was just a single source (like a String) then the result will just be a single result,
     like a DisplayObject. Each result will be a DisplayObject or an Error
     describing the problem.
     ]]></param>
<param><![CDATA[forEach if true, each value or error will be returned as soon as possible. The values
     or errors will be returned directly to the completeCallback. Any keys are lost, so you
     probably only want to use this with an Array sources.
     ]]></param>
<param><![CDATA[appDom the ApplicationDomain in which to load the contents, or null to specify
     that it should load in a child of the current ApplicationDomain.
     
     ]]></param>
</method>
<method name='getLoaders' fullname='com.threerings.util:MultiLoader/getLoaders' isStatic='true' isFinal='false' isOverride='false'  param_names='sources;completeCallback;forEach;appDom' param_types='Object;Function;Boolean;flash.system:ApplicationDomain' param_defaults='undefined;undefined;false;null' result_type='void'>
<description><![CDATA[
     Exactly like getContents() only it returns the Loader objects rather than their contents.
          ]]></description>
<example><![CDATA[Advanced usage: Loading classes.
     <listing version="3.0">
     // A holder for new classes, created as a child of the system domain.
     var appDom :ApplicationDomain = new ApplicationDomain(null);
     <br/>
     function handleComplete (results :Object) :void {
         // now we can retrieve classes
         var clazz :Class = appDom.getDefinition("com.package.SomeClass") as Class;
     }
     <br/>
     // load all the classes contained in the specified sources
     MultiLoader.getLoaders([EMBED, "http://site.com/pack.swf"], handleComplete, false, appDom);
     <br/>
     [Embed(source="resource.swf", mimeType="application/octet-stream")]
     private static const EMBED :Class;
     </listing>
          ]]></example>
<see><![CDATA[getContents()
     ]]></see>
</method>
<method name='handleComplete' fullname='com.threerings.util:MultiLoader/protected:handleComplete' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='handleError' fullname='com.threerings.util:MultiLoader/protected:handleError' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:ErrorEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='loadClasses' fullname='com.threerings.util:MultiLoader/loadClasses' isStatic='true' isFinal='false' isOverride='false'  param_names='sources;appDom;completeCallback' param_types='Object;flash.system:ApplicationDomain;Function' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Loads classes into the specified ApplicationDomain.
     The complete callback receives either the same ApplicationDomain or no arguments.
     ]]></description>
</method>
<method name='processProperty' fullname='com.threerings.util:MultiLoader/protected:processProperty' isStatic='true' isFinal='false' isOverride='false'  param_names='retval;testClass;prop' param_types='Object;Class;String' param_defaults='undefined;undefined;undefined' result_type='Object'>
<description><![CDATA[
     Utility method used in this class.
     ]]></description>
</method>
<field name='_activeMultiLoaders' fullname='com.threerings.util:MultiLoader/protected:_activeMultiLoaders' type='flash.utils:Dictionary' isStatic='true' isConst='true' defaultValue='' >
</field>
<field name='_complete' fullname='com.threerings.util:MultiLoader/protected:_complete' type='Function' isStatic='false' isConst='false' >
</field>
<field name='_forEach' fullname='com.threerings.util:MultiLoader/protected:_forEach' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_remaining' fullname='com.threerings.util:MultiLoader/protected:_remaining' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='_result' fullname='com.threerings.util:MultiLoader/protected:_result' type='Object' isStatic='false' isConst='false' >
</field>
<field name='_targetsToKeys' fullname='com.threerings.util:MultiLoader/protected:_targetsToKeys' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
</field>
<interfaceRec name='Equalable' fullname='com.threerings.util:Equalable' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Equalable.as' namespace='com.threerings.util' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 An interface we can use to implement equals(), which is standard and
 very useful in Java.
 ]]></description>
</interfaceRec>
<method name='equals' fullname='com.threerings.util:Equalable/com.threerings.util:Equalable:equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='Object' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Returns true to indicate that the specified object is equal to
     this instance.
     ]]></description>
</method>
<interfaceRec name='LogTarget' fullname='com.threerings.util:LogTarget' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/LogTarget.as' namespace='com.threerings.util' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A very simple Logging interface used by Log.
 ]]></description>
</interfaceRec>
<method name='log' fullname='com.threerings.util:LogTarget/com.threerings.util:LogTarget:log' isStatic='false' isFinal='false' isOverride='false'  param_names='msg' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Log the specified message, which is already fully formatted.
     ]]></description>
</method>
<classRec name='MailUtil' fullname='com.threerings.util:MailUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/MailUtil.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Utility methods relating to the electronic mails.
 ]]></description>
</classRec>
<method name='isValidAddress' fullname='com.threerings.util:MailUtil/isValidAddress' isStatic='true' isFinal='false' isOverride='false'  param_names='email' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Returns true if the supplied email address appears valid (according to a widely used regular
     expression). False if it does not.
     ]]></description>
</method>
<field name='EMAIL_REGEX' fullname='com.threerings.util:MailUtil/protected:EMAIL_REGEX' type='RegExp' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[ Originally formulated by lambert]]></description>
<nas.nasa.gov.><![CDATA[]]></nas.nasa.gov.>
</field>
<classRec name='KeyboardCodes' fullname='com.threerings.util:KeyboardCodes' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/KeyboardCodes.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Keycode constants.
  (The Flex documentation incorrectly indicates that flash.ui.Keyboard has all these
 constants defined.)
 ]]></description>
</classRec>
<field name='A' fullname='com.threerings.util:KeyboardCodes/A' type='uint' isStatic='true' isConst='true' defaultValue='65' >
</field>
<field name='ALTERNATE' fullname='com.threerings.util:KeyboardCodes/ALTERNATE' type='uint' isStatic='true' isConst='true' defaultValue='18' >
</field>
<field name='B' fullname='com.threerings.util:KeyboardCodes/B' type='uint' isStatic='true' isConst='true' defaultValue='66' >
</field>
<field name='BACKQUOTE' fullname='com.threerings.util:KeyboardCodes/BACKQUOTE' type='uint' isStatic='true' isConst='true' defaultValue='192' >
</field>
<field name='BACKSLASH' fullname='com.threerings.util:KeyboardCodes/BACKSLASH' type='uint' isStatic='true' isConst='true' defaultValue='220' >
</field>
<field name='BACKSPACE' fullname='com.threerings.util:KeyboardCodes/BACKSPACE' type='uint' isStatic='true' isConst='true' defaultValue='8' >
</field>
<field name='C' fullname='com.threerings.util:KeyboardCodes/C' type='uint' isStatic='true' isConst='true' defaultValue='67' >
</field>
<field name='CAPS_LOCK' fullname='com.threerings.util:KeyboardCodes/CAPS_LOCK' type='uint' isStatic='true' isConst='true' defaultValue='20' >
</field>
<field name='COMMA' fullname='com.threerings.util:KeyboardCodes/COMMA' type='uint' isStatic='true' isConst='true' defaultValue='188' >
</field>
<field name='COMMAND' fullname='com.threerings.util:KeyboardCodes/COMMAND' type='uint' isStatic='true' isConst='true' defaultValue='15' >
</field>
<field name='CONTROL' fullname='com.threerings.util:KeyboardCodes/CONTROL' type='uint' isStatic='true' isConst='true' defaultValue='17' >
</field>
<field name='D' fullname='com.threerings.util:KeyboardCodes/D' type='uint' isStatic='true' isConst='true' defaultValue='68' >
</field>
<field name='DELETE' fullname='com.threerings.util:KeyboardCodes/DELETE' type='uint' isStatic='true' isConst='true' defaultValue='46' >
</field>
<field name='DOWN' fullname='com.threerings.util:KeyboardCodes/DOWN' type='uint' isStatic='true' isConst='true' defaultValue='40' >
</field>
<field name='E' fullname='com.threerings.util:KeyboardCodes/E' type='uint' isStatic='true' isConst='true' defaultValue='69' >
</field>
<field name='END' fullname='com.threerings.util:KeyboardCodes/END' type='uint' isStatic='true' isConst='true' defaultValue='35' >
</field>
<field name='ENTER' fullname='com.threerings.util:KeyboardCodes/ENTER' type='uint' isStatic='true' isConst='true' defaultValue='13' >
</field>
<field name='EQUAL' fullname='com.threerings.util:KeyboardCodes/EQUAL' type='uint' isStatic='true' isConst='true' defaultValue='187' >
</field>
<field name='ESCAPE' fullname='com.threerings.util:KeyboardCodes/ESCAPE' type='uint' isStatic='true' isConst='true' defaultValue='27' >
</field>
<field name='F' fullname='com.threerings.util:KeyboardCodes/F' type='uint' isStatic='true' isConst='true' defaultValue='70' >
</field>
<field name='F1' fullname='com.threerings.util:KeyboardCodes/F1' type='uint' isStatic='true' isConst='true' defaultValue='112' >
</field>
<field name='F10' fullname='com.threerings.util:KeyboardCodes/F10' type='uint' isStatic='true' isConst='true' defaultValue='121' >
</field>
<field name='F11' fullname='com.threerings.util:KeyboardCodes/F11' type='uint' isStatic='true' isConst='true' defaultValue='122' >
</field>
<field name='F12' fullname='com.threerings.util:KeyboardCodes/F12' type='uint' isStatic='true' isConst='true' defaultValue='123' >
</field>
<field name='F13' fullname='com.threerings.util:KeyboardCodes/F13' type='uint' isStatic='true' isConst='true' defaultValue='124' >
</field>
<field name='F14' fullname='com.threerings.util:KeyboardCodes/F14' type='uint' isStatic='true' isConst='true' defaultValue='125' >
</field>
<field name='F15' fullname='com.threerings.util:KeyboardCodes/F15' type='uint' isStatic='true' isConst='true' defaultValue='126' >
</field>
<field name='F2' fullname='com.threerings.util:KeyboardCodes/F2' type='uint' isStatic='true' isConst='true' defaultValue='113' >
</field>
<field name='F3' fullname='com.threerings.util:KeyboardCodes/F3' type='uint' isStatic='true' isConst='true' defaultValue='114' >
</field>
<field name='F4' fullname='com.threerings.util:KeyboardCodes/F4' type='uint' isStatic='true' isConst='true' defaultValue='115' >
</field>
<field name='F5' fullname='com.threerings.util:KeyboardCodes/F5' type='uint' isStatic='true' isConst='true' defaultValue='116' >
</field>
<field name='F6' fullname='com.threerings.util:KeyboardCodes/F6' type='uint' isStatic='true' isConst='true' defaultValue='117' >
</field>
<field name='F7' fullname='com.threerings.util:KeyboardCodes/F7' type='uint' isStatic='true' isConst='true' defaultValue='118' >
</field>
<field name='F8' fullname='com.threerings.util:KeyboardCodes/F8' type='uint' isStatic='true' isConst='true' defaultValue='119' >
</field>
<field name='F9' fullname='com.threerings.util:KeyboardCodes/F9' type='uint' isStatic='true' isConst='true' defaultValue='120' >
</field>
<field name='G' fullname='com.threerings.util:KeyboardCodes/G' type='uint' isStatic='true' isConst='true' defaultValue='71' >
</field>
<field name='H' fullname='com.threerings.util:KeyboardCodes/H' type='uint' isStatic='true' isConst='true' defaultValue='72' >
</field>
<field name='HOME' fullname='com.threerings.util:KeyboardCodes/HOME' type='uint' isStatic='true' isConst='true' defaultValue='36' >
</field>
<field name='I' fullname='com.threerings.util:KeyboardCodes/I' type='uint' isStatic='true' isConst='true' defaultValue='73' >
</field>
<field name='INSERT' fullname='com.threerings.util:KeyboardCodes/INSERT' type='uint' isStatic='true' isConst='true' defaultValue='45' >
</field>
<field name='J' fullname='com.threerings.util:KeyboardCodes/J' type='uint' isStatic='true' isConst='true' defaultValue='74' >
</field>
<field name='K' fullname='com.threerings.util:KeyboardCodes/K' type='uint' isStatic='true' isConst='true' defaultValue='75' >
</field>
<field name='L' fullname='com.threerings.util:KeyboardCodes/L' type='uint' isStatic='true' isConst='true' defaultValue='76' >
</field>
<field name='LEFT' fullname='com.threerings.util:KeyboardCodes/LEFT' type='uint' isStatic='true' isConst='true' defaultValue='37' >
</field>
<field name='LEFTBRACKET' fullname='com.threerings.util:KeyboardCodes/LEFTBRACKET' type='uint' isStatic='true' isConst='true' defaultValue='219' >
</field>
<field name='M' fullname='com.threerings.util:KeyboardCodes/M' type='uint' isStatic='true' isConst='true' defaultValue='77' >
</field>
<field name='MINUS' fullname='com.threerings.util:KeyboardCodes/MINUS' type='uint' isStatic='true' isConst='true' defaultValue='189' >
</field>
<field name='N' fullname='com.threerings.util:KeyboardCodes/N' type='uint' isStatic='true' isConst='true' defaultValue='78' >
</field>
<field name='NUMBER_0' fullname='com.threerings.util:KeyboardCodes/NUMBER_0' type='uint' isStatic='true' isConst='true' defaultValue='48' >
</field>
<field name='NUMBER_1' fullname='com.threerings.util:KeyboardCodes/NUMBER_1' type='uint' isStatic='true' isConst='true' defaultValue='49' >
</field>
<field name='NUMBER_2' fullname='com.threerings.util:KeyboardCodes/NUMBER_2' type='uint' isStatic='true' isConst='true' defaultValue='50' >
</field>
<field name='NUMBER_3' fullname='com.threerings.util:KeyboardCodes/NUMBER_3' type='uint' isStatic='true' isConst='true' defaultValue='51' >
</field>
<field name='NUMBER_4' fullname='com.threerings.util:KeyboardCodes/NUMBER_4' type='uint' isStatic='true' isConst='true' defaultValue='52' >
</field>
<field name='NUMBER_5' fullname='com.threerings.util:KeyboardCodes/NUMBER_5' type='uint' isStatic='true' isConst='true' defaultValue='53' >
</field>
<field name='NUMBER_6' fullname='com.threerings.util:KeyboardCodes/NUMBER_6' type='uint' isStatic='true' isConst='true' defaultValue='54' >
</field>
<field name='NUMBER_7' fullname='com.threerings.util:KeyboardCodes/NUMBER_7' type='uint' isStatic='true' isConst='true' defaultValue='55' >
</field>
<field name='NUMBER_8' fullname='com.threerings.util:KeyboardCodes/NUMBER_8' type='uint' isStatic='true' isConst='true' defaultValue='56' >
</field>
<field name='NUMBER_9' fullname='com.threerings.util:KeyboardCodes/NUMBER_9' type='uint' isStatic='true' isConst='true' defaultValue='57' >
</field>
<field name='NUMPAD_0' fullname='com.threerings.util:KeyboardCodes/NUMPAD_0' type='uint' isStatic='true' isConst='true' defaultValue='96' >
</field>
<field name='NUMPAD_1' fullname='com.threerings.util:KeyboardCodes/NUMPAD_1' type='uint' isStatic='true' isConst='true' defaultValue='97' >
</field>
<field name='NUMPAD_2' fullname='com.threerings.util:KeyboardCodes/NUMPAD_2' type='uint' isStatic='true' isConst='true' defaultValue='98' >
</field>
<field name='NUMPAD_3' fullname='com.threerings.util:KeyboardCodes/NUMPAD_3' type='uint' isStatic='true' isConst='true' defaultValue='99' >
</field>
<field name='NUMPAD_4' fullname='com.threerings.util:KeyboardCodes/NUMPAD_4' type='uint' isStatic='true' isConst='true' defaultValue='100' >
</field>
<field name='NUMPAD_5' fullname='com.threerings.util:KeyboardCodes/NUMPAD_5' type='uint' isStatic='true' isConst='true' defaultValue='101' >
</field>
<field name='NUMPAD_6' fullname='com.threerings.util:KeyboardCodes/NUMPAD_6' type='uint' isStatic='true' isConst='true' defaultValue='102' >
</field>
<field name='NUMPAD_7' fullname='com.threerings.util:KeyboardCodes/NUMPAD_7' type='uint' isStatic='true' isConst='true' defaultValue='103' >
</field>
<field name='NUMPAD_8' fullname='com.threerings.util:KeyboardCodes/NUMPAD_8' type='uint' isStatic='true' isConst='true' defaultValue='104' >
</field>
<field name='NUMPAD_9' fullname='com.threerings.util:KeyboardCodes/NUMPAD_9' type='uint' isStatic='true' isConst='true' defaultValue='105' >
</field>
<field name='NUMPAD_ADD' fullname='com.threerings.util:KeyboardCodes/NUMPAD_ADD' type='uint' isStatic='true' isConst='true' defaultValue='107' >
</field>
<field name='NUMPAD_DECIMAL' fullname='com.threerings.util:KeyboardCodes/NUMPAD_DECIMAL' type='uint' isStatic='true' isConst='true' defaultValue='110' >
</field>
<field name='NUMPAD_DIVIDE' fullname='com.threerings.util:KeyboardCodes/NUMPAD_DIVIDE' type='uint' isStatic='true' isConst='true' defaultValue='111' >
</field>
<field name='NUMPAD_ENTER' fullname='com.threerings.util:KeyboardCodes/NUMPAD_ENTER' type='uint' isStatic='true' isConst='true' defaultValue='108' >
</field>
<field name='NUMPAD_MULTIPLY' fullname='com.threerings.util:KeyboardCodes/NUMPAD_MULTIPLY' type='uint' isStatic='true' isConst='true' defaultValue='106' >
</field>
<field name='NUMPAD_SUBTRACT' fullname='com.threerings.util:KeyboardCodes/NUMPAD_SUBTRACT' type='uint' isStatic='true' isConst='true' defaultValue='109' >
</field>
<field name='O' fullname='com.threerings.util:KeyboardCodes/O' type='uint' isStatic='true' isConst='true' defaultValue='79' >
</field>
<field name='P' fullname='com.threerings.util:KeyboardCodes/P' type='uint' isStatic='true' isConst='true' defaultValue='80' >
</field>
<field name='PAGE_DOWN' fullname='com.threerings.util:KeyboardCodes/PAGE_DOWN' type='uint' isStatic='true' isConst='true' defaultValue='34' >
</field>
<field name='PAGE_UP' fullname='com.threerings.util:KeyboardCodes/PAGE_UP' type='uint' isStatic='true' isConst='true' defaultValue='33' >
</field>
<field name='PERIOD' fullname='com.threerings.util:KeyboardCodes/PERIOD' type='uint' isStatic='true' isConst='true' defaultValue='190' >
</field>
<field name='Q' fullname='com.threerings.util:KeyboardCodes/Q' type='uint' isStatic='true' isConst='true' defaultValue='81' >
</field>
<field name='QUOTE' fullname='com.threerings.util:KeyboardCodes/QUOTE' type='uint' isStatic='true' isConst='true' defaultValue='222' >
</field>
<field name='R' fullname='com.threerings.util:KeyboardCodes/R' type='uint' isStatic='true' isConst='true' defaultValue='82' >
</field>
<field name='RIGHT' fullname='com.threerings.util:KeyboardCodes/RIGHT' type='uint' isStatic='true' isConst='true' defaultValue='39' >
</field>
<field name='RIGHTBRACKET' fullname='com.threerings.util:KeyboardCodes/RIGHTBRACKET' type='uint' isStatic='true' isConst='true' defaultValue='221' >
</field>
<field name='S' fullname='com.threerings.util:KeyboardCodes/S' type='uint' isStatic='true' isConst='true' defaultValue='83' >
</field>
<field name='SEMICOLON' fullname='com.threerings.util:KeyboardCodes/SEMICOLON' type='uint' isStatic='true' isConst='true' defaultValue='186' >
</field>
<field name='SHIFT' fullname='com.threerings.util:KeyboardCodes/SHIFT' type='uint' isStatic='true' isConst='true' defaultValue='16' >
</field>
<field name='SLASH' fullname='com.threerings.util:KeyboardCodes/SLASH' type='uint' isStatic='true' isConst='true' defaultValue='191' >
</field>
<field name='SPACE' fullname='com.threerings.util:KeyboardCodes/SPACE' type='uint' isStatic='true' isConst='true' defaultValue='32' >
</field>
<field name='T' fullname='com.threerings.util:KeyboardCodes/T' type='uint' isStatic='true' isConst='true' defaultValue='84' >
</field>
<field name='TAB' fullname='com.threerings.util:KeyboardCodes/TAB' type='uint' isStatic='true' isConst='true' defaultValue='9' >
</field>
<field name='U' fullname='com.threerings.util:KeyboardCodes/U' type='uint' isStatic='true' isConst='true' defaultValue='85' >
</field>
<field name='UP' fullname='com.threerings.util:KeyboardCodes/UP' type='uint' isStatic='true' isConst='true' defaultValue='38' >
</field>
<field name='V' fullname='com.threerings.util:KeyboardCodes/V' type='uint' isStatic='true' isConst='true' defaultValue='86' >
</field>
<field name='W' fullname='com.threerings.util:KeyboardCodes/W' type='uint' isStatic='true' isConst='true' defaultValue='87' >
</field>
<field name='X' fullname='com.threerings.util:KeyboardCodes/X' type='uint' isStatic='true' isConst='true' defaultValue='88' >
</field>
<field name='Y' fullname='com.threerings.util:KeyboardCodes/Y' type='uint' isStatic='true' isConst='true' defaultValue='89' >
</field>
<field name='Z' fullname='com.threerings.util:KeyboardCodes/Z' type='uint' isStatic='true' isConst='true' defaultValue='90' >
</field>
<classRec name='Controller' fullname='com.threerings.util:Controller' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Controller.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<method name='handleAction' fullname='com.threerings.util:Controller/handleAction' isStatic='false' isFinal='false' isOverride='false'  param_names='cmd;arg' param_types='String;Object' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Handle an action that was generated by our panel or some child.
          ]]></description>
<return><![CDATA[true if the specified action was handled, false otherwise.
          When creating your own controller, override this function and return
     true for any command handled, and call super for any unknown commands.
     ]]></return>
</method>
<method name='handleCommandEvent' fullname='com.threerings.util:Controller/private:handleCommandEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='com.threerings.util:CommandEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Private function to handle the controller event and call
     handleAction.
     ]]></description>
</method>
<method name='postAction' fullname='com.threerings.util:Controller/postAction' isStatic='false' isFinal='true' isOverride='false'  param_names='cmd;arg' param_types='String;Object' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Post an action so that it can be handled by this controller or
     another controller above it in the display list.
     ]]></description>
</method>
<method name='setControlledPanel' fullname='com.threerings.util:Controller/protected:setControlledPanel' isStatic='false' isFinal='false' isOverride='false'  param_names='panel' param_types='flash.events:IEventDispatcher' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Set the panel being controlled.
     ]]></description>
</method>
<field name='_controlledPanel' fullname='com.threerings.util:Controller/protected:_controlledPanel' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
<description><![CDATA[ The panel currently being controlled. ]]></description>
</field>
<classRec name='HashMap_Entry' fullname='com.threerings.util:HashMap_Entry' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/HashMap_Entry.as' namespace='com.threerings.util' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[ 
 A key/value pair in a HashMap. This is really an internal class to HashMap, and when
 Flash CS4 is fixed, it will go nestle back into HashMap.as's luxurious folds.
 ]]></description>
</classRec>
<method name='HashMap_Entry' fullname='com.threerings.util:HashMap_Entry/HashMap_Entry' isStatic='false' isFinal='false' isOverride='false'  param_names='hash;key;value;next' param_types='int;com.threerings.util:Hashable;Object;com.threerings.util:HashMap_Entry' param_defaults='undefined;undefined;undefined;undefined' result_type='*'>
</method>
<method name='getOriginalKey' fullname='com.threerings.util:HashMap_Entry/getOriginalKey' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Get the original key used to store this entry.
     ]]></description>
</method>
<field name='hash' fullname='com.threerings.util:HashMap_Entry/hash' type='int' isStatic='false' isConst='false' >
</field>
<field name='key' fullname='com.threerings.util:HashMap_Entry/key' type='com.threerings.util:Hashable' isStatic='false' isConst='false' >
</field>
<field name='next' fullname='com.threerings.util:HashMap_Entry/next' type='com.threerings.util:HashMap_Entry' isStatic='false' isConst='false' >
</field>
<field name='value' fullname='com.threerings.util:HashMap_Entry/value' type='Object' isStatic='false' isConst='false' >
</field>
<classRec name='HashMap' fullname='com.threerings.util:HashMap' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/HashMap.as' namespace='com.threerings.util' access='public' baseclass='Object' interfaces='com.threerings.util:Map' isFinal='false' isDynamic='false' >
<description><![CDATA[
 An implementation of a HashMap in actionscript. Any object (and null) may
 be used as a key. Simple keys (Number, int, uint, Boolean, String) utilize
 a Dictionary internally for storage; keys that implement Hashable are
 stored efficiently, and any other key can also be used if the equalsFn
 and hashFn are specified to the constructor.
 ]]></description>
</classRec>
<method name='HashMap' fullname='com.threerings.util:HashMap/HashMap' isStatic='false' isFinal='false' isOverride='false'  param_names='loadFactor;equalsFn;hashFn' param_types='Number;Function;Function' param_defaults='1.75;null;null' result_type='*'>
<description><![CDATA[
     Construct a HashMap
          ]]></description>
<param><![CDATA[loadFactor - A measure of how full the hashtable is allowed to
                         get before it is automatically resized. The default
                         value of 1.75 should be fine.
     ]]></param>
<param><![CDATA[equalsFn   - (Optional) A function to use to compare object
                         equality for keys that are neither simple nor
                         implement Hashable. The signature should be
                         "function (o1, o2) :Boolean".
     ]]></param>
<param><![CDATA[hashFn     - (Optional) A function to use to generate a hash
                         code for keys that are neither simple nor
                         implement Hashable. The signature should be
                         "function (obj) :, where the return type is
                         numeric or String. Two objects that are equals
                         according to the specified equalsFn <b>must</b>
                         generate equal values when passed to the hashFn.
     ]]></param>
</method>
<method name='clear' fullname='com.threerings.util:HashMap/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ 
     Clear this map, removing all stored elements.
     ]]></description>
</method>
<method name='containsKey' fullname='com.threerings.util:HashMap/containsKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='Object' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[ 
     Returns true if the specified key exists in the map.
     ]]></description>
</method>
<method name='forEach' fullname='com.threerings.util:HashMap/forEach' isStatic='false' isFinal='false' isOverride='false'  param_names='fn' param_types='Function' param_defaults='undefined' result_type='void'>
<description><![CDATA[ 
     Call the specified function, which accepts two args: key and value,
     for every mapping.
     ]]></description>
</method>
<method name='indexFor' fullname='com.threerings.util:HashMap/protected:indexFor' isStatic='false' isFinal='false' isOverride='false'  param_names='hash' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
     Return an index for the specified hashcode.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isEmpty' fullname='com.threerings.util:HashMap/isEmpty' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[ 
     Returns true if this map contains no elements.
     ]]></description>
</method>
<method name='isSimple' fullname='com.threerings.util:HashMap/protected:isSimple' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='Object' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Return true if the specified key may be used to store values in a
     Dictionary object.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='keyFor' fullname='com.threerings.util:HashMap/protected:keyFor' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='Object' param_defaults='undefined' result_type='com.threerings.util:Hashable'>
<description><![CDATA[
     Return a Hashable that represents the key.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='keys' fullname='com.threerings.util:HashMap/keys' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[ 
     Return all the unique keys in this Map, in Array form.
     The Array is not a 'view': it can be modified without disturbing
     the Map from whence it came.
     ]]></description>
</method>
<method name='put' fullname='com.threerings.util:HashMap/put' isStatic='false' isFinal='false' isOverride='false'  param_names='key;value' param_types='Object;Object' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[ 
     Store a value in the map associated with the specified key.
     Returns the previous value stored for that key, or undefined.
     ]]></description>
</method>
<method name='remove' fullname='com.threerings.util:HashMap/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='Object' param_defaults='undefined' result_type='*'>
<description><![CDATA[ 
     Removes the mapping for the specified key.
     Returns the value that had been stored, or undefined.
     ]]></description>
</method>
<method name='resize' fullname='com.threerings.util:HashMap/protected:resize' isStatic='false' isFinal='false' isOverride='false'  param_names='newSize' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Resize the entries with Hashable keys to optimize
     the memory/performance tradeoff.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='size' fullname='com.threerings.util:HashMap/size' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[ 
     Return the current size of the map.
     ]]></description>
</method>
<method name='values' fullname='com.threerings.util:HashMap/values' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[ 
     Return all the values in this Map, in Array form.
     The Array is not a 'view': it can be modified without disturbing
     the Map from whence it came.
     ]]></description>
</method>
<method name='get' fullname='com.threerings.util:HashMap/get' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='Object' param_defaults='undefined' result_type='*'>
<description><![CDATA[ ]]></description>
</method>
<field name='DEFAULT_BUCKETS' fullname='com.threerings.util:HashMap/protected:DEFAULT_BUCKETS' type='int' isStatic='true' isConst='true' defaultValue='16' >
<description><![CDATA[ The default size for the bucketed hashmap. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_entries' fullname='com.threerings.util:HashMap/protected:_entries' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ If non-null, contains Hashable keys and their values. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_entriesSize' fullname='com.threerings.util:HashMap/protected:_entriesSize' type='int' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[ The current number of key/value pairs stored in the _entries. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_equalsFn' fullname='com.threerings.util:HashMap/protected:_equalsFn' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[ The equality function to use for non-Hashable complex keys. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_hashFn' fullname='com.threerings.util:HashMap/protected:_hashFn' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[ The hashing function to use for non-Hashable complex keys. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_loadFactor' fullname='com.threerings.util:HashMap/protected:_loadFactor' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ The load factor. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_simpleData' fullname='com.threerings.util:HashMap/protected:_simpleData' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[ If non-null, contains simple key/value pairs. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_simpleSize' fullname='com.threerings.util:HashMap/protected:_simpleSize' type='int' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[ The current number of key/value pairs stored in the Dictionary. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='ResultAdapter' fullname='com.threerings.util:ResultAdapter' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/ResultAdapter.as' namespace='com.threerings.util' access='public' baseclass='Object' interfaces='com.threerings.util:ResultListener' isFinal='false' isDynamic='false' >
</classRec>
<method name='ResultAdapter' fullname='com.threerings.util:ResultAdapter/ResultAdapter' isStatic='false' isFinal='false' isOverride='false'  param_names='completed;failed' param_types='Function;Function' param_defaults='undefined;undefined' result_type='*'>
</method>
<method name='requestCompleted' fullname='com.threerings.util:ResultAdapter/requestCompleted' isStatic='false' isFinal='false' isOverride='false'  param_names='obj' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='requestFailed' fullname='com.threerings.util:ResultAdapter/requestFailed' isStatic='false' isFinal='false' isOverride='false'  param_names='cause' param_types='Error' param_defaults='undefined' result_type='void'>
</method>
<field name='_completed' fullname='com.threerings.util:ResultAdapter/protected:_completed' type='Function' isStatic='false' isConst='false' >
</field>
<field name='_failed' fullname='com.threerings.util:ResultAdapter/protected:_failed' type='Function' isStatic='false' isConst='false' >
</field>
<classRec name='ArrayIterator' fullname='com.threerings.util:ArrayIterator' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/ArrayIterator.as' namespace='com.threerings.util' access='public' baseclass='Object' interfaces='com.threerings.util:Iterator' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides a generic iterator for an Array.
 No co-modification checking is done.
 ]]></description>
</classRec>
<method name='ArrayIterator' fullname='com.threerings.util:ArrayIterator/ArrayIterator' isStatic='false' isFinal='false' isOverride='false'  param_names='arr;allowRemove' param_types='Array;Boolean' param_defaults='undefined;true' result_type='*'>
<description><![CDATA[
     Create an ArrayIterator.
     ]]></description>
</method>
<method name='hasNext' fullname='com.threerings.util:ArrayIterator/hasNext' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='next' fullname='com.threerings.util:ArrayIterator/next' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
</method>
<method name='remove' fullname='com.threerings.util:ArrayIterator/remove' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<field name='_arr' fullname='com.threerings.util:ArrayIterator/protected:_arr' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ The array we're iterating over. ]]></description>
</field>
<field name='_index' fullname='com.threerings.util:ArrayIterator/protected:_index' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ The current index. ]]></description>
</field>
<field name='_lastIndex' fullname='com.threerings.util:ArrayIterator/protected:_lastIndex' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ The last-removed index.
     Or -1 for already removed, -2 for no removals allowed. ]]></description>
</field>
<classRec name='HashSet' fullname='com.threerings.util:HashSet' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/HashSet.as' namespace='com.threerings.util' access='public' baseclass='Object' interfaces='com.threerings.util:Set' isFinal='false' isDynamic='false' >
</classRec>
<method name='HashSet' fullname='com.threerings.util:HashSet/HashSet' isStatic='false' isFinal='false' isOverride='false'  param_names='loadFactor;equalsFn;hashFn' param_types='Number;Function;Function' param_defaults='1.75;null;null' result_type='*'>
<description><![CDATA[
     Construct a HashSet
          ]]></description>
<param><![CDATA[loadFactor - A measure of how full the hashtable is allowed to
                         get before it is automatically resized. The default
                         value of 1.75 should be fine.
     ]]></param>
<param><![CDATA[equalsFn   - (Optional) A function to use to compare object
                         equality for keys that are neither simple nor
                         implement Hashable. The signature should be
                         "function (o1, o2) :Boolean".
     ]]></param>
<param><![CDATA[hashFn     - (Optional) A function to use to generate a hash
                         code for keys that are neither simple nor
                         implement Hashable. The signature should be
                         "function (obj) :, where the return type is
                         numeric or String. Two objects that are equals
                         according to the specified equalsFn ust                         generate equal values when passed to the hashFn.
     ]]></param>
</method>
<method name='add' fullname='com.threerings.util:HashSet/add' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='clear' fullname='com.threerings.util:HashSet/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='contains' fullname='com.threerings.util:HashSet/contains' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='forEach' fullname='com.threerings.util:HashSet/forEach' isStatic='false' isFinal='false' isOverride='false'  param_names='fn' param_types='Function' param_defaults='undefined' result_type='void'>
</method>
<method name='isEmpty' fullname='com.threerings.util:HashSet/isEmpty' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='remove' fullname='com.threerings.util:HashSet/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='size' fullname='com.threerings.util:HashSet/size' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='toArray' fullname='com.threerings.util:HashSet/toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
</method>
<field name='_hashMap' fullname='com.threerings.util:HashSet/protected:_hashMap' type='com.threerings.util:HashMap' isStatic='false' isConst='false' >
</field>
<classRec name='Long' fullname='com.threerings.util:Long' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Long.as' namespace='com.threerings.util' access='public' baseclass='Object' interfaces='com.threerings.util:Equalable' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Equivalent to java.lang.Long.
 ]]></description>
</classRec>
<method name='Long' fullname='com.threerings.util:Long/Long' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='equals' fullname='com.threerings.util:Long/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='fromNumber' fullname='com.threerings.util:Long/fromNumber' isStatic='true' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='0' result_type='com.threerings.util:Long'>
<description><![CDATA[
     Creates a new Long from the provided variable. Only integers in the [-2^63, 2^63) range
     can be converted; non-integer values in this range will be rounded, and values outside
     of the range will trigger an ArgumentError. Additionally, since Number is a
     double-precision floating point value, values outside of the [-2^52, 2^52) range
     will suffer loss of precision.
     ]]></description>
</method>
<method name='toNumber' fullname='com.threerings.util:Long/toNumber' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Creates a new Number from this Long variable. Since Number is a double-precision
     floating point type, values outside the [-2^52, 2^52) range will lose precision.
     ]]></description>
</method>
<method name='toString' fullname='com.threerings.util:Long/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<field name='bytes' fullname='com.threerings.util:Long/bytes' type='flash.utils:ByteArray' isStatic='false' isConst='false' >
</field>
<classRec name='Integer' fullname='com.threerings.util:Integer' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Integer.as' namespace='com.threerings.util' access='public' baseclass='Object' interfaces='com.threerings.util:Equalable;com.threerings.util:Boxed' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Equivalent to java.lang.Integer.
 ]]></description>
</classRec>
<method name='Integer' fullname='com.threerings.util:Integer/Integer' isStatic='false' isFinal='false' isOverride='false'  param_names='intValue' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Constructor.
     ]]></description>
</method>
<method name='compare' fullname='com.threerings.util:Integer/compare' isStatic='true' isFinal='false' isOverride='false'  param_names='val1;val2' param_types='int;int' param_defaults='undefined;undefined' result_type='int'>
<description><![CDATA[
     Compares to int values in an overflow safe manner.
     ]]></description>
</method>
<method name='equals' fullname='com.threerings.util:Integer/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='toString' fullname='com.threerings.util:Integer/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='unbox' fullname='com.threerings.util:Integer/unbox' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
</method>
<method name='valueOf' fullname='com.threerings.util:Integer/valueOf' isStatic='true' isFinal='false' isOverride='false'  param_names='val' param_types='int' param_defaults='undefined' result_type='com.threerings.util:Integer'>
</method>
<method name='value' fullname='com.threerings.util:Integer/value/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Access the immutable value.
     ]]></description>
</method>
<field name='_value' fullname='com.threerings.util:Integer/protected:_value' type='int' isStatic='false' isConst='false' >
</field>
<classRec name='Short' fullname='com.threerings.util:Short' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Short.as' namespace='com.threerings.util' access='public' baseclass='Object' interfaces='com.threerings.util:Equalable;com.threerings.util:Boxed' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Equivalent to java.lang.Short.
 ]]></description>
</classRec>
<method name='Short' fullname='com.threerings.util:Short/Short' isStatic='false' isFinal='false' isOverride='false'  param_names='shortValue' param_types='int' param_defaults='undefined' result_type='*'>
</method>
<method name='equals' fullname='com.threerings.util:Short/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='unbox' fullname='com.threerings.util:Short/unbox' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
</method>
<method name='valueOf' fullname='com.threerings.util:Short/valueOf' isStatic='true' isFinal='false' isOverride='false'  param_names='val' param_types='int' param_defaults='undefined' result_type='com.threerings.util:Short'>
</method>
<method name='value' fullname='com.threerings.util:Short/value/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Access the immutable value.
     ]]></description>
</method>
<field name='MAX_VALUE' fullname='com.threerings.util:Short/MAX_VALUE' type='int' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[ The maximum possible short value. ]]></description>
</field>
<field name='MIN_VALUE' fullname='com.threerings.util:Short/MIN_VALUE' type='int' isStatic='true' isConst='true' defaultValue='unknown' >
<description><![CDATA[ The minimum possible short value. ]]></description>
</field>
<field name='_value' fullname='com.threerings.util:Short/protected:_value' type='int' isStatic='false' isConst='false' >
</field>
<classRec name='Float' fullname='com.threerings.util:Float' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Float.as' namespace='com.threerings.util' access='public' baseclass='Object' interfaces='com.threerings.util:Equalable;com.threerings.util:Boxed' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Equivalent to java.lang.Float.
 ]]></description>
</classRec>
<method name='Float' fullname='com.threerings.util:Float/Float' isStatic='false' isFinal='false' isOverride='false'  param_names='floatValue' param_types='Number' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Constructor.
     ]]></description>
</method>
<method name='equals' fullname='com.threerings.util:Float/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='unbox' fullname='com.threerings.util:Float/unbox' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
</method>
<method name='valueOf' fullname='com.threerings.util:Float/valueOf' isStatic='true' isFinal='false' isOverride='false'  param_names='val' param_types='Number' param_defaults='undefined' result_type='com.threerings.util:Float'>
</method>
<method name='value' fullname='com.threerings.util:Float/value/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Access the immutable value.
     ]]></description>
</method>
<field name='_value' fullname='com.threerings.util:Float/protected:_value' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='Byte' fullname='com.threerings.util:Byte' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Byte.as' namespace='com.threerings.util' access='public' baseclass='Object' interfaces='com.threerings.util:Equalable;com.threerings.util:Boxed' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Equivalent to java.lang.Byte.
 ]]></description>
</classRec>
<method name='Byte' fullname='com.threerings.util:Byte/Byte' isStatic='false' isFinal='false' isOverride='false'  param_names='byteValue' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Constructor.
     ]]></description>
</method>
<method name='equals' fullname='com.threerings.util:Byte/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='toString' fullname='com.threerings.util:Byte/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='unbox' fullname='com.threerings.util:Byte/unbox' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
</method>
<method name='valueOf' fullname='com.threerings.util:Byte/valueOf' isStatic='true' isFinal='false' isOverride='false'  param_names='val' param_types='int' param_defaults='undefined' result_type='com.threerings.util:Byte'>
</method>
<method name='value' fullname='com.threerings.util:Byte/value/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Access the immutable value.
     ]]></description>
</method>
<field name='_value' fullname='com.threerings.util:Byte/protected:_value' type='int' isStatic='false' isConst='false' >
</field>
<classRec name='LineSegment' fullname='com.threerings.util:LineSegment' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/LineSegment.as' namespace='com.threerings.util' access='public' baseclass='Object' interfaces='com.threerings.util:Equalable' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Merely a typed container for two Points.
 ]]></description>
</classRec>
<method name='LineSegment' fullname='com.threerings.util:LineSegment/LineSegment' isStatic='false' isFinal='false' isOverride='false'  param_names='start;stop' param_types='flash.geom:Point;flash.geom:Point' param_defaults='undefined;undefined' result_type='*'>
</method>
<method name='equals' fullname='com.threerings.util:LineSegment/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='getIntersection' fullname='com.threerings.util:LineSegment/protected:getIntersection' isStatic='false' isFinal='false' isOverride='false'  param_names='line;returnPoint' param_types='com.threerings.util:LineSegment;Boolean' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
     Internal method that calculates whether the other line intersects
     and returns either the intersected point or merely the intersection
     type.
     ]]></description>
</method>
<method name='getIntersectionPoint' fullname='com.threerings.util:LineSegment/getIntersectionPoint' isStatic='false' isFinal='false' isOverride='false'  param_names='line' param_types='com.threerings.util:LineSegment' param_defaults='undefined' result_type='flash.geom:Point'>
<description><![CDATA[
     Return the point at which the other line intersects us.
     ]]></description>
</method>
<method name='getIntersectionType' fullname='com.threerings.util:LineSegment/getIntersectionType' isStatic='false' isFinal='false' isOverride='false'  param_names='line' param_types='com.threerings.util:LineSegment' param_defaults='undefined' result_type='int'>
<description><![CDATA[
     Tests if the given line intersects this line. This method rotates both lines so that the 
     start point of this line is on the left, at (0, 0).  If the lines do intersect, it then 
     returns INTERSECTION_NORTH if the end point of <code>line</code> is north of this line, 
     INTERSECTION_SOUTH otherwise.
     
     Intersections are inclusive.  If one or both points lands on this line, interects will not
     return DOES_NOT_INTERSECT.
     ]]></description>
</method>
<method name='getLength' fullname='com.threerings.util:LineSegment/getLength' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Get the length of this line.
     ]]></description>
</method>
<method name='isIntersected' fullname='com.threerings.util:LineSegment/isIntersected' isStatic='false' isFinal='false' isOverride='false'  param_names='line' param_types='com.threerings.util:LineSegment' param_defaults='undefined' result_type='Boolean'>
</method>
<field name='DOES_NOT_INTERSECT' fullname='com.threerings.util:LineSegment/DOES_NOT_INTERSECT' type='int' isStatic='true' isConst='true' defaultValue='3' >
</field>
<field name='INTERSECTION_NORTH' fullname='com.threerings.util:LineSegment/INTERSECTION_NORTH' type='int' isStatic='true' isConst='true' defaultValue='1' >
</field>
<field name='INTERSECTION_SOUTH' fullname='com.threerings.util:LineSegment/INTERSECTION_SOUTH' type='int' isStatic='true' isConst='true' defaultValue='2' >
</field>
<field name='start' fullname='com.threerings.util:LineSegment/start' type='flash.geom:Point' isStatic='false' isConst='false' >
</field>
<field name='stop' fullname='com.threerings.util:LineSegment/stop' type='flash.geom:Point' isStatic='false' isConst='false' >
</field>
<interfaceRec name='Hashable' fullname='com.threerings.util:Hashable' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Hashable.as' namespace='com.threerings.util' access='public' baseClasses='com.threerings.util:Equalable' isFinal='false' isDynamic='false' >
</interfaceRec>
<method name='hashCode' fullname='com.threerings.util:Hashable/com.threerings.util:Hashable:hashCode' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get a hashcode for this Equalable object so that it may be placed
     in a HashMap.
     ]]></description>
</method>
<classRec name='langBoolean' fullname='com.threerings.util:langBoolean' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/langBoolean.as' namespace='com.threerings.util' access='public' baseclass='Object' interfaces='com.threerings.util:Equalable;com.threerings.io:Streamable;com.threerings.util:Boxed' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Equivalent to java.lang.Boolean.
 ]]></description>
</classRec>
<method name='equals' fullname='com.threerings.util:langBoolean/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='langBoolean' fullname='com.threerings.util:langBoolean/langBoolean' isStatic='false' isFinal='false' isOverride='false'  param_names='boolValue' param_types='Boolean' param_defaults='false' result_type='*'>
<description><![CDATA[
     Constructor.
     ]]></description>
</method>
<method name='readObject' fullname='com.threerings.util:langBoolean/readObject' isStatic='false' isFinal='false' isOverride='false'  param_names='ins' param_types='com.threerings.io:ObjectInputStream' param_defaults='undefined' result_type='void'>
</method>
<method name='toString' fullname='com.threerings.util:langBoolean/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='unbox' fullname='com.threerings.util:langBoolean/unbox' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
</method>
<method name='valueOf' fullname='com.threerings.util:langBoolean/valueOf' isStatic='true' isFinal='false' isOverride='false'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='com.threerings.util:langBoolean'>
</method>
<method name='writeObject' fullname='com.threerings.util:langBoolean/writeObject' isStatic='false' isFinal='false' isOverride='false'  param_names='out' param_types='com.threerings.io:ObjectOutputStream' param_defaults='undefined' result_type='void'>
</method>
<method name='value' fullname='com.threerings.util:langBoolean/value/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Access the immutable value.
     ]]></description>
</method>
<field name='_value' fullname='com.threerings.util:langBoolean/protected:_value' type='Boolean' isStatic='false' isConst='false' >
</field>
<classRec name='StreamableArrayList' fullname='com.threerings.util:StreamableArrayList' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/StreamableArrayList.as' namespace='com.threerings.util' access='public' baseclass='Object' interfaces='com.threerings.io:Streamable' isFinal='false' isDynamic='false' >
</classRec>
<method name='StreamableArrayList' fullname='com.threerings.util:StreamableArrayList/StreamableArrayList' isStatic='false' isFinal='false' isOverride='false'  param_names='values' param_types='Array' param_defaults='null' result_type='*'>
</method>
<method name='add' fullname='com.threerings.util:StreamableArrayList/add' isStatic='false' isFinal='false' isOverride='false'  param_names='item;index' param_types='Object;int' param_defaults='undefined;unknown' result_type='Boolean'>
</method>
<method name='addAll' fullname='com.threerings.util:StreamableArrayList/addAll' isStatic='false' isFinal='false' isOverride='false'  param_names='otherList;index' param_types=';int' param_defaults='undefined;unknown' result_type='Boolean'>
<description><![CDATA[
     Add all the elements in the other list.
          ]]></description>
<param><![CDATA[otherList may be another StreamableArrayList or an Array
     ]]></param>
</method>
<method name='asArray' fullname='com.threerings.util:StreamableArrayList/asArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Return the actual array storage.
     ]]></description>
</method>
<method name='clear' fullname='com.threerings.util:StreamableArrayList/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='contains' fullname='com.threerings.util:StreamableArrayList/contains' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='getArray' fullname='com.threerings.util:StreamableArrayList/protected:getArray' isStatic='false' isFinal='false' isOverride='false'  param_names='otherList' param_types='' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
     Return an array representing the argument.
     ]]></description>
</method>
<method name='indexOf' fullname='com.threerings.util:StreamableArrayList/indexOf' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='int'>
</method>
<method name='isEmpty' fullname='com.threerings.util:StreamableArrayList/isEmpty' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='iterator' fullname='com.threerings.util:StreamableArrayList/iterator' isStatic='false' isFinal='false' isOverride='false'  result_type='com.threerings.util:Iterator'>
</method>
<method name='readObject' fullname='com.threerings.util:StreamableArrayList/readObject' isStatic='false' isFinal='false' isOverride='false'  param_names='ins' param_types='com.threerings.io:ObjectInputStream' param_defaults='undefined' result_type='void'>
</method>
<method name='remove' fullname='com.threerings.util:StreamableArrayList/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='item' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='removeAll' fullname='com.threerings.util:StreamableArrayList/removeAll' isStatic='false' isFinal='false' isOverride='false'  param_names='otherList' param_types='' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='removeAt' fullname='com.threerings.util:StreamableArrayList/removeAt' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='Object'>
</method>
<method name='size' fullname='com.threerings.util:StreamableArrayList/size' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='toArray' fullname='com.threerings.util:StreamableArrayList/toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Return a copy of the internal storage array.
     ]]></description>
</method>
<method name='writeObject' fullname='com.threerings.util:StreamableArrayList/writeObject' isStatic='false' isFinal='false' isOverride='false'  param_names='out' param_types='com.threerings.io:ObjectOutputStream' param_defaults='undefined' result_type='void'>
</method>
<method name='get' fullname='com.threerings.util:StreamableArrayList/get' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
</method>
<method name='set' fullname='com.threerings.util:StreamableArrayList/set' isStatic='false' isFinal='false' isOverride='false'  param_names='index;item' param_types='int;Object' param_defaults='undefined;undefined' result_type='Object'>
</method>
<field name='_array' fullname='com.threerings.util:StreamableArrayList/protected:_array' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ Storage. ]]></description>
</field>
<classRec name='ValueEvent' fullname='com.threerings.util:ValueEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/ValueEvent.as' namespace='com.threerings.util' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A handy event for simply dispatching a value associated with the event type.
 ]]></description>
</classRec>
<method name='ValueEvent' fullname='com.threerings.util:ValueEvent/ValueEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;value;bubbles;cancelable' param_types='String;Object;Boolean;Boolean' param_defaults='undefined;undefined;false;false' result_type='*'>
<description><![CDATA[
     Construct the value event.
     ]]></description>
</method>
<method name='clone' fullname='com.threerings.util:ValueEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
</method>
<method name='value' fullname='com.threerings.util:ValueEvent/value/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Accessor: get the value.
     ]]></description>
</method>
<field name='_value' fullname='com.threerings.util:ValueEvent/protected:_value' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ The value. ]]></description>
</field>
<classRec name='CommandEvent' fullname='com.threerings.util:CommandEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/CommandEvent.as' namespace='com.threerings.util' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
</classRec>
<method name='CommandEvent' fullname='com.threerings.util:CommandEvent/CommandEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='command;arg' param_types='String;Object' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
     Command events may not be directly constructed, use the dispatch
     method to do your work.
     ]]></description>
</method>
<method name='clone' fullname='com.threerings.util:CommandEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
</method>
<method name='configureBridge' fullname='com.threerings.util:CommandEvent/configureBridge' isStatic='true' isFinal='false' isOverride='false'  param_names='source;target' param_types='flash.events:IEventDispatcher;flash.events:IEventDispatcher' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Configure a bridge from something like a pop-up window to an alternate target.
     ]]></description>
</method>
<method name='create' fullname='com.threerings.util:CommandEvent/protected:create' isStatic='true' isFinal='false' isOverride='false'  param_names='cmd;arg' param_types='String;Object' param_defaults='undefined;undefined' result_type='com.threerings.util:CommandEvent'>
<description><![CDATA[
     A factory method for privately creating command events.
     ]]></description>
</method>
<method name='dispatch' fullname='com.threerings.util:CommandEvent/dispatch' isStatic='true' isFinal='false' isOverride='false'  param_names='disp;cmdOrFn;arg' param_types='flash.events:IEventDispatcher;Object;Object' param_defaults='undefined;undefined;null' result_type='void'>
<description><![CDATA[
     Use this method to dispatch CommandEvents.
     ]]></description>
</method>
<method name='markAsHandled' fullname='com.threerings.util:CommandEvent/markAsHandled' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Mark this command as handled, stopping its propagation up the
     hierarchy.
     ]]></description>
</method>
<method name='toString' fullname='com.threerings.util:CommandEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<field name='COMMAND' fullname='com.threerings.util:CommandEvent/COMMAND' type='String' isStatic='true' isConst='true' defaultValue='commandEvt' >
<description><![CDATA[ The event type for all controller events. ]]></description>
</field>
<field name='_blockConstructor' fullname='com.threerings.util:CommandEvent/protected:_blockConstructor' type='Boolean' isStatic='true' isConst='false' defaultValue='true' >
<description><![CDATA[ Used to prevent unauthorized construction. ]]></description>
</field>
<field name='arg' fullname='com.threerings.util:CommandEvent/arg' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ An optional argument. ]]></description>
</field>
<field name='command' fullname='com.threerings.util:CommandEvent/command' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ The command. ]]></description>
</field>
<classRec name='ConfigValueSetEvent' fullname='com.threerings.util:ConfigValueSetEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/ConfigValueSetEvent.as' namespace='com.threerings.util' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Dispatched whenever a Config value is changed.
 ]]></description>
</classRec>
<method name='ConfigValueSetEvent' fullname='com.threerings.util:ConfigValueSetEvent/ConfigValueSetEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='name;value' param_types='String;Object' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
     ]]></description>
</method>
<method name='clone' fullname='com.threerings.util:ConfigValueSetEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
</method>
<field name='CONFIG_VALUE_SET' fullname='com.threerings.util:ConfigValueSetEvent/CONFIG_VALUE_SET' type='String' isStatic='true' isConst='true' defaultValue='ConfigValSet' >
<description><![CDATA[ The type of a ConfigValueSetEvent. ]]></description>
</field>
<field name='name' fullname='com.threerings.util:ConfigValueSetEvent/name' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ The name of the config value set. ]]></description>
</field>
<field name='value' fullname='com.threerings.util:ConfigValueSetEvent/value' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ The new value. ]]></description>
</field>
<classRec name='ImmutableProxyObject' fullname='com.threerings.util:ImmutableProxyObject' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/ImmutableProxyObject.as' namespace='com.threerings.util' access='public' baseclass='flash.utils:Proxy' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Acts like the passed-in Object, but prevents modifications.
 ]]></description>
</classRec>
<method name='ImmutableProxyObject' fullname='com.threerings.util:ImmutableProxyObject/ImmutableProxyObject' isStatic='false' isFinal='false' isOverride='false'  param_names='source;throwErrors' param_types='Object;Boolean' param_defaults='undefined;true' result_type='*'>
</method>
<method name='callProperty' fullname='com.threerings.util:ImmutableProxyObject/flash_proxy:callProperty' isStatic='false' isFinal='false' isOverride='true'  param_names='name;rest' param_types=';restParam' param_defaults='undefined;undefined' result_type='*'>
</method>
<method name='deleteProperty' fullname='com.threerings.util:ImmutableProxyObject/flash_proxy:deleteProperty' isStatic='false' isFinal='false' isOverride='true'  param_names='name' param_types='' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='getProperty' fullname='com.threerings.util:ImmutableProxyObject/flash_proxy:getProperty' isStatic='false' isFinal='false' isOverride='true'  param_names='key' param_types='' param_defaults='undefined' result_type='*'>
</method>
<method name='hasOwnProperty' fullname='com.threerings.util:ImmutableProxyObject/hasOwnProperty' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='hasProperty' fullname='com.threerings.util:ImmutableProxyObject/flash_proxy:hasProperty' isStatic='false' isFinal='false' isOverride='true'  param_names='key' param_types='' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='immutable' fullname='com.threerings.util:ImmutableProxyObject/protected:immutable' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='isPrototypeOf' fullname='com.threerings.util:ImmutableProxyObject/isPrototypeOf' isStatic='false' isFinal='false' isOverride='false'  param_names='theClass' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='nextName' fullname='com.threerings.util:ImmutableProxyObject/flash_proxy:nextName' isStatic='false' isFinal='false' isOverride='true'  param_names='index' param_types='int' param_defaults='undefined' result_type='String'>
</method>
<method name='nextNameIndex' fullname='com.threerings.util:ImmutableProxyObject/flash_proxy:nextNameIndex' isStatic='false' isFinal='false' isOverride='true'  param_names='index' param_types='int' param_defaults='undefined' result_type='int'>
</method>
<method name='nextValue' fullname='com.threerings.util:ImmutableProxyObject/flash_proxy:nextValue' isStatic='false' isFinal='false' isOverride='true'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
</method>
<method name='propertyIsEnumerable' fullname='com.threerings.util:ImmutableProxyObject/propertyIsEnumerable' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='setProperty' fullname='com.threerings.util:ImmutableProxyObject/flash_proxy:setProperty' isStatic='false' isFinal='false' isOverride='true'  param_names='name;value' param_types='' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='setPropertyIsEnumerable' fullname='com.threerings.util:ImmutableProxyObject/setPropertyIsEnumerable' isStatic='false' isFinal='false' isOverride='false'  param_names='name;isEnum' param_types='String;Boolean' param_defaults='undefined;true' result_type='void'>
</method>
<method name='toString' fullname='com.threerings.util:ImmutableProxyObject/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<field name='_itrKeys' fullname='com.threerings.util:ImmutableProxyObject/protected:_itrKeys' type='Array' isStatic='false' isConst='false' >
</field>
<field name='_source' fullname='com.threerings.util:ImmutableProxyObject/protected:_source' type='Object' isStatic='false' isConst='false' >
</field>
<field name='_throwErrors' fullname='com.threerings.util:ImmutableProxyObject/protected:_throwErrors' type='Boolean' isStatic='false' isConst='false' >
</field>
<classRec name='MapProxyObject' fullname='com.threerings.util:MapProxyObject' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/MapProxyObject.as' namespace='com.threerings.util' access='public' baseclass='flash.utils:Proxy' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Makes a Map behave like an object. Iterations are done in the order of the keys
 returned by the Map's keys() function.
 Warning: "for" loops convert all keys to Strings, due to limitations with Proxy.
 ]]></description>
</classRec>
<method name='MapProxyObject' fullname='com.threerings.util:MapProxyObject/MapProxyObject' isStatic='false' isFinal='false' isOverride='false'  param_names='source' param_types='com.threerings.util:Map' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Construct a MapProxyObject backed by the specified Map.
     ]]></description>
</method>
<method name='deleteProperty' fullname='com.threerings.util:MapProxyObject/flash_proxy:deleteProperty' isStatic='false' isFinal='false' isOverride='true'  param_names='key' param_types='' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Handle delete proxy[key].
     ]]></description>
</method>
<method name='getProperty' fullname='com.threerings.util:MapProxyObject/flash_proxy:getProperty' isStatic='false' isFinal='false' isOverride='true'  param_names='key' param_types='' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Handle value = proxy[key].
     ]]></description>
</method>
<method name='nextName' fullname='com.threerings.util:MapProxyObject/flash_proxy:nextName' isStatic='false' isFinal='false' isOverride='true'  param_names='index' param_types='int' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Used when iterating with a "for" loop. Note well that keys are turned into
     Strings. This is a major failing.
     ]]></description>
</method>
<method name='nextNameIndex' fullname='com.threerings.util:MapProxyObject/flash_proxy:nextNameIndex' isStatic='false' isFinal='false' isOverride='true'  param_names='index' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
     Iteration support.
     ]]></description>
</method>
<method name='nextValue' fullname='com.threerings.util:MapProxyObject/flash_proxy:nextValue' isStatic='false' isFinal='false' isOverride='true'  param_names='index' param_types='int' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Used when iterating with a "for each" loop.
     ]]></description>
</method>
<method name='setProperty' fullname='com.threerings.util:MapProxyObject/flash_proxy:setProperty' isStatic='false' isFinal='false' isOverride='true'  param_names='key;value' param_types='' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Handle proxy[key] = value.
     ]]></description>
</method>
<field name='_itrKeys' fullname='com.threerings.util:MapProxyObject/protected:_itrKeys' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ A temporary ordering for iteration. ]]></description>
</field>
<field name='_map' fullname='com.threerings.util:MapProxyObject/protected:_map' type='com.threerings.util:Map' isStatic='false' isConst='false' >
<description><![CDATA[ The map we use for storage. ]]></description>
</field>
<classRec name='StreamableHashMap' fullname='com.threerings.util:StreamableHashMap' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/StreamableHashMap.as' namespace='com.threerings.util' access='public' baseclass='com.threerings.util:HashMap' interfaces='com.threerings.io:Streamable' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A {]]></description>
<link><![CDATA[Streamable}.
 ]]></link>
</classRec>
<method name='readObject' fullname='com.threerings.util:StreamableHashMap/readObject' isStatic='false' isFinal='false' isOverride='false'  param_names='ins' param_types='com.threerings.io:ObjectInputStream' param_defaults='undefined' result_type='void'>
</method>
<method name='writeObject' fullname='com.threerings.util:StreamableHashMap/writeObject' isStatic='false' isFinal='false' isOverride='false'  param_names='out' param_types='com.threerings.io:ObjectOutputStream' param_defaults='undefined' result_type='void'>
</method>
<classRec name='SortedHashMap' fullname='com.threerings.util:SortedHashMap' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/SortedHashMap.as' namespace='com.threerings.util' access='public' baseclass='com.threerings.util:HashMap' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Guarantees a specific iteration order for keys(), values(), and forEach() with as little
 additional overhead as possible.
 ]]></description>
</classRec>
<method name='SortedHashMap' fullname='com.threerings.util:SortedHashMap/SortedHashMap' isStatic='false' isFinal='false' isOverride='false'  param_names='keyType;loadFactor;equalsFn;hashFn' param_types='int;Number;Function;Function' param_defaults='undefined;1.75;null;null' result_type='*'>
</method>
<method name='forEach' fullname='com.threerings.util:SortedHashMap/forEach' isStatic='false' isFinal='false' isOverride='true'  param_names='fn' param_types='Function' param_defaults='undefined' result_type='void'>
</method>
<method name='keys' fullname='com.threerings.util:SortedHashMap/keys' isStatic='false' isFinal='false' isOverride='true'  result_type='Array'>
</method>
<method name='put' fullname='com.threerings.util:SortedHashMap/put' isStatic='false' isFinal='false' isOverride='true'  param_names='key;value' param_types='Object;Object' param_defaults='undefined;undefined' result_type='*'>
</method>
<method name='validateKey' fullname='com.threerings.util:SortedHashMap/protected:validateKey' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='values' fullname='com.threerings.util:SortedHashMap/values' isStatic='false' isFinal='false' isOverride='true'  result_type='Array'>
</method>
<field name='COMPARABLE_KEYS' fullname='com.threerings.util:SortedHashMap/COMPARABLE_KEYS' type='int' isStatic='true' isConst='true' defaultValue='0' >
</field>
<field name='NUMERIC_KEYS' fullname='com.threerings.util:SortedHashMap/NUMERIC_KEYS' type='int' isStatic='true' isConst='true' defaultValue='2' >
</field>
<field name='STRING_KEYS' fullname='com.threerings.util:SortedHashMap/STRING_KEYS' type='int' isStatic='true' isConst='true' defaultValue='1' >
</field>
<field name='_keyType' fullname='com.threerings.util:SortedHashMap/protected:_keyType' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ The key type in use for this map. ]]></description>
</field>
<classRec name='Name' fullname='com.threerings.util:Name' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Name.as' namespace='com.threerings.util' access='public' baseclass='Object' interfaces='com.threerings.util:Comparable;com.threerings.util:Hashable;com.threerings.io:Streamable' isFinal='false' isDynamic='false' >
</classRec>
<method name='Name' fullname='com.threerings.util:Name/Name' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='' result_type='*'>
</method>
<method name='compareTo' fullname='com.threerings.util:Name/compareTo' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='Object' param_defaults='undefined' result_type='int'>
</method>
<method name='equals' fullname='com.threerings.util:Name/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='getNormal' fullname='com.threerings.util:Name/getNormal' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='hashCode' fullname='com.threerings.util:Name/hashCode' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='isBlank' fullname='com.threerings.util:Name/isBlank' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='isValid' fullname='com.threerings.util:Name/isValid' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='normalize' fullname='com.threerings.util:Name/protected:normalize' isStatic='false' isFinal='false' isOverride='false'  param_names='txt' param_types='String' param_defaults='undefined' result_type='String'>
</method>
<method name='readObject' fullname='com.threerings.util:Name/readObject' isStatic='false' isFinal='false' isOverride='false'  param_names='ins' param_types='com.threerings.io:ObjectInputStream' param_defaults='undefined' result_type='void'>
</method>
<method name='toString' fullname='com.threerings.util:Name/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='writeObject' fullname='com.threerings.util:Name/writeObject' isStatic='false' isFinal='false' isOverride='false'  param_names='out' param_types='com.threerings.io:ObjectOutputStream' param_defaults='undefined' result_type='void'>
</method>
<field name='_name' fullname='com.threerings.util:Name/protected:_name' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ The raw name text. ]]></description>
</field>
<field name='_normal' fullname='com.threerings.util:Name/protected:_normal' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ The normalized name text. ]]></description>
</field>
<classRec name='HashMap_KeyWrapper' fullname='com.threerings.util:HashMap_KeyWrapper' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/HashMap_KeyWrapper.as' namespace='com.threerings.util' access='public' baseclass='Object' interfaces='com.threerings.util:Hashable' isFinal='false' isDynamic='false' >
<description><![CDATA[ 
 A wrapped key object HashMap. This is really an internal class to HashMap, and when
 Flash CS4 is fixed, it will go nestle back into HashMap.as's luxurious folds.
 ]]></description>
</classRec>
<method name='HashMap_KeyWrapper' fullname='com.threerings.util:HashMap_KeyWrapper/HashMap_KeyWrapper' isStatic='false' isFinal='false' isOverride='false'  param_names='key;equalsFn;hashFn' param_types='Object;Function;Function' param_defaults='undefined;undefined;undefined' result_type='*'>
</method>
<method name='equals' fullname='com.threerings.util:HashMap_KeyWrapper/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='hashCode' fullname='com.threerings.util:HashMap_KeyWrapper/hashCode' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<field name='_equalsFn' fullname='com.threerings.util:HashMap_KeyWrapper/protected:_equalsFn' type='Function' isStatic='false' isConst='false' >
</field>
<field name='_hash' fullname='com.threerings.util:HashMap_KeyWrapper/protected:_hash' type='int' isStatic='false' isConst='false' >
</field>
<field name='_key' fullname='com.threerings.util:HashMap_KeyWrapper/protected:_key' type='Object' isStatic='false' isConst='false' >
</field>
<field name='key' fullname='com.threerings.util:HashMap_KeyWrapper/key' type='Object' isStatic='false' isConst='false' >
</field>
<classRec name='Enum' fullname='com.threerings.util:Enum' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Enum.as' namespace='com.threerings.util' access='public' baseclass='Object' interfaces='com.threerings.util:Hashable;com.threerings.util:Comparable' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Base enum class for actionscript. Works pretty much like enums in Java, only you've got
 to do one or two things.
  To use, you'll want to subclass and have something like the following:
  public final class Foo extends Enum
 {
     public static const ONE :Foo = new Foo("ONE");
     public static const TWO :Foo = new Foo("TWO");
     finishedEnumerating(Foo);
      // {at}private
     public function Foo (name :String)
     {
         super(name);
     }
      public static function valueOf (name :String) :Foo
     {
         return Enum.valueOf(Foo, name) as Foo;
     }
      public static function values () :Array
     {
         return Enum.values(Foo);
     }
 }
  Important notes:
  - make your class final
  - create a constructor that calls super(name)
  - declare your enum constants const, and with the same String as their name.
  - call finishedEnumerating() at the end of your constants.
  - your enum objects should be immutable
  - implement a static valueOf() and values() methods for extra points, as above.
 ]]></description>
</classRec>
<method name='Enum' fullname='com.threerings.util:Enum/Enum' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Call this constructor in your enum subclass constructor.
     ]]></description>
</method>
<method name='compareTo' fullname='com.threerings.util:Enum/compareTo' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='Object' param_defaults='undefined' result_type='int'>
</method>
<method name='equals' fullname='com.threerings.util:Enum/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='other' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='finishedEnumerating' fullname='com.threerings.util:Enum/protected:finishedEnumerating' isStatic='true' isFinal='false' isOverride='false'  param_names='clazz' param_types='Class' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     This should be called by your enum subclass after you've finished enumating the enum
     constants. See the example in the class header documentation.
     ]]></description>
</method>
<method name='hashCode' fullname='com.threerings.util:Enum/hashCode' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='name' fullname='com.threerings.util:Enum/name' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Get the name of this enum.
     ]]></description>
</method>
<method name='ordinal' fullname='com.threerings.util:Enum/ordinal' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get the ordinal of this enum.
     Note that you should not use the ordinal in normal cases, as it may change if a new
     enum is defined. Ordinals should only be used if you are writing a data structure
     that generically handles enums in an efficient manner, and you are never persisting
     anything where the ordinal can change.
     ]]></description>
</method>
<method name='toString' fullname='com.threerings.util:Enum/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Return the String representation of this enum.
     ]]></description>
</method>
<method name='valueOf' fullname='com.threerings.util:Enum/valueOf' isStatic='true' isFinal='false' isOverride='false'  param_names='clazz;name' param_types='Class;String' param_defaults='undefined;undefined' result_type='com.threerings.util:Enum'>
<description><![CDATA[
     Turn a String name into an Enum constant.
     ]]></description>
</method>
<method name='values' fullname='com.threerings.util:Enum/values' isStatic='true' isFinal='false' isOverride='false'  param_names='clazz' param_types='Class' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
     Get all the enums of the specified class, or null if it's not an enum.
     ]]></description>
</method>
<field name='_blocked' fullname='com.threerings.util:Enum/private:_blocked' type='flash.utils:Dictionary' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[ Is further instantiation of enum constants for a class allowed? ]]></description>
</field>
<field name='_enums' fullname='com.threerings.util:Enum/private:_enums' type='flash.utils:Dictionary' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[ An array of enums for each enum class. ]]></description>
</field>
<field name='_name' fullname='com.threerings.util:Enum/protected:_name' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ The String name of this enum value. ]]></description>
</field>
<classRec name='EmbeddedSwfLoader' fullname='com.threerings.util:EmbeddedSwfLoader' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/EmbeddedSwfLoader.as' namespace='com.threerings.util' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<metadata>
	<Deprecated owner='com.threerings.util:EmbeddedSwfLoader' >
	</Deprecated>
</metadata>
</classRec>
<method name='EmbeddedSwfLoader' fullname='com.threerings.util:EmbeddedSwfLoader/EmbeddedSwfLoader' isStatic='false' isFinal='false' isOverride='false'  param_names='useSubDomain' param_types='Boolean' param_defaults='false' result_type='*'>
<description><![CDATA[
     Create an EmbeddedSwfLoader, good for loading one SWF from a ByteArray.
          ]]></description>
<param><![CDATA[useSubDomain if true, load the SWF and all its classes and symbols into a
      child ApplicationDomain. This means that they would be not normally reachable by the rest
      of your code after they're loaded, you would only be able to access the contents using
      this EmbeddedSwfLoader. This also means that those classes or symbols won't interfere
      with others loaded with the same name, and the classes can be garbage collected when
      no longer in use.
     ]]></param>
</method>
<method name='checkLoaded' fullname='com.threerings.util:EmbeddedSwfLoader/protected:checkLoaded' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Validate that the load operation is complete.
     ]]></description>
</method>
<method name='getClass' fullname='com.threerings.util:EmbeddedSwfLoader/getClass' isStatic='false' isFinal='false' isOverride='false'  param_names='className' param_types='String' param_defaults='undefined' result_type='Class'>
<description><![CDATA[
     Retrieves a class definition from the loaded swf.
          ]]></description>
<throws><![CDATA[flash.errors.IllegalOperationError when the swf has not completed loading
     or the class does not exist.
     ]]></throws>
</method>
<method name='getContent' fullname='com.threerings.util:EmbeddedSwfLoader/getContent' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
<description><![CDATA[
     Get the top-level display object defined in the loaded SWF.
          ]]></description>
<throws><![CDATA[IllegalOperationError if the SWF is not yet completely loaded.
     ]]></throws>
</method>
<method name='getFunction' fullname='com.threerings.util:EmbeddedSwfLoader/getFunction' isStatic='false' isFinal='false' isOverride='false'  param_names='functionName' param_types='String' param_defaults='undefined' result_type='Function'>
<description><![CDATA[
     Retrieves a Function definition from the loaded swf.
          ]]></description>
<throws><![CDATA[flash.errors.IllegalOperationError when the swf has not completed loading
     or the function does not exist.
     ]]></throws>
</method>
<method name='getSymbol' fullname='com.threerings.util:EmbeddedSwfLoader/getSymbol' isStatic='false' isFinal='false' isOverride='false'  param_names='symbolName' param_types='String' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
     Retrieves a symbol definition from the loaded swf.
          ]]></description>
<throws><![CDATA[flash.errors.IllegalOperationError when the swf has not completed loading
     or the symbol does not exist.
     ]]></throws>
</method>
<method name='isSymbol' fullname='com.threerings.util:EmbeddedSwfLoader/isSymbol' isStatic='false' isFinal='false' isOverride='false'  param_names='className' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Checks if a symbol exists in the library.
          ]]></description>
<throws><![CDATA[flash.errors.IllegalOperationError when the swf has not completed loading.
     ]]></throws>
</method>
<method name='load' fullname='com.threerings.util:EmbeddedSwfLoader/load' isStatic='false' isFinal='false' isOverride='false'  param_names='byteArrayOrClass' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Load the SWF from a ByteArray. A COMPLETE event will be dispatched on successful 
     completion of the load. If any errors occur, a IO_ERROR event will be dispatched.
          ]]></description>
<param><![CDATA[byteArrayOrClass a flash.utils.ByteArray or a Class object that becomes one.
     ]]></param>
<throws><![CDATA[TypeError The parameter must be a ByteArray, or a Class that becomes one. If AS
     had overloading, this wouldn't be necessary, we could catch these problems at compile time.
          ]]></throws>
</method>
<field name='_loader' fullname='com.threerings.util:EmbeddedSwfLoader/protected:_loader' type='flash.display:Loader' isStatic='false' isConst='false' >
</field>
<field name='_useSubDomain' fullname='com.threerings.util:EmbeddedSwfLoader/protected:_useSubDomain' type='Boolean' isStatic='false' isConst='false' >
</field>
<classRec name='ExpiringSet' fullname='com.threerings.util:ExpiringSet' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/ExpiringSet.as' namespace='com.threerings.util' access='public' baseclass='flash.events:EventDispatcher' interfaces='com.threerings.util:Set' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Data structure that keeps its elements for a short time, and then removes them automatically.
  All operations are O(n), including add().
 ]]></description>
<metadata>
	<Event owner='com.threerings.util:ExpiringSet' name='ElementExpired' type='com.threerings.util.ValueEvent' >
<description><![CDATA[
 Dispatched when a set element expires.
  ]]></description>
<eventType><![CDATA[com.threerings.util.ExpiringSet.ELEMENT_EXPIRED
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='ExpiringSet' fullname='com.threerings.util:ExpiringSet/ExpiringSet' isStatic='false' isFinal='false' isOverride='false'  param_names='ttl' param_types='Number' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Initializes the expiring set.
          ]]></description>
<param><![CDATA[ttl Time to live value for set elements, in seconds.
     ]]></param>
</method>
<method name='add' fullname='com.threerings.util:ExpiringSet/add' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Note that if you add an object that the list already contains, this method will return 
     false, but it will also update the expire time on that object to be this sets ttl from now, 
     as if the item really were being added to the list now.
     ]]></description>
</method>
<method name='checkTimer' fullname='com.threerings.util:ExpiringSet/protected:checkTimer' isStatic='false' isFinal='false' isOverride='false'  param_names='ignored' param_types='restParam' param_defaults='undefined' result_type='void'>
</method>
<method name='clear' fullname='com.threerings.util:ExpiringSet/clear' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Calling this function will not expire the elements, it simply removes them. No 
     ValueEvent will be dispatched.
     ]]></description>
</method>
<method name='contains' fullname='com.threerings.util:ExpiringSet/contains' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='forEach' fullname='com.threerings.util:ExpiringSet/forEach' isStatic='false' isFinal='false' isOverride='false'  param_names='fn' param_types='Function' param_defaults='undefined' result_type='void'>
</method>
<method name='headIsExpired' fullname='com.threerings.util:ExpiringSet/protected:headIsExpired' isStatic='false' isFinal='false' isOverride='false'  param_names='now' param_types='int' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='isEmpty' fullname='com.threerings.util:ExpiringSet/isEmpty' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='remove' fullname='com.threerings.util:ExpiringSet/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='Boolean'>
</method>
<method name='size' fullname='com.threerings.util:ExpiringSet/size' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='toArray' fullname='com.threerings.util:ExpiringSet/toArray' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     This implementation of Set returns a fresh array that it will never reference again.  
     Modification of this array will not change the ExpiringSet's structure.
     ]]></description>
</method>
<method name='ttl' fullname='com.threerings.util:ExpiringSet/ttl/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Returns the time to live value for this ExpiringSet.  This value cannot be changed after
     set creation.
     ]]></description>
</method>
<field name='ELEMENT_EXPIRED' fullname='com.threerings.util:ExpiringSet/ELEMENT_EXPIRED' type='String' isStatic='true' isConst='true' defaultValue='ElementExpired' >
<description><![CDATA[ The even that is dispatched when a member of this set expires. ]]></description>
</field>
<field name='_data' fullname='com.threerings.util:ExpiringSet/protected:_data' type='Array' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[ Array of ExpiringElement instances, sorted by expiration time. ]]></description>
</field>
<field name='_timer' fullname='com.threerings.util:ExpiringSet/protected:_timer' type='flash.utils:Timer' isStatic='false' isConst='false' >
</field>
<field name='_ttl' fullname='com.threerings.util:ExpiringSet/protected:_ttl' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ The time to live for this set, not to be changed after construction. ]]></description>
</field>
<field name='log' fullname='com.threerings.util:ExpiringSet/protected:log' type='com.threerings.util:Log' isStatic='true' isConst='true' defaultValue='' >
</field>
<classRec name='Config' fullname='com.threerings.util:Config' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/util/Config.as' namespace='com.threerings.util' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<metadata>
	<Event owner='com.threerings.util:Config' name='ConfigValSet' type='com.threerings.util.ConfigValueSetEvent' >
<description><![CDATA[
 Dispatched when this Config object has a value set on it.
  ]]></description>
<eventType><![CDATA[com.threerings.util.ConfigValueSetEvent.CONFIG_VALUE_SET
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='Config' fullname='com.threerings.util:Config/Config' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Constructs a new config object which will obtain configuration
     information from the specified path.
     ]]></description>
</method>
<method name='ensureCapacity' fullname='com.threerings.util:Config/ensureCapacity' isStatic='false' isFinal='false' isOverride='false'  param_names='kilobytes;rl' param_types='int;com.threerings.util:ResultListener' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Ensure that we can store preferences up to the specified size.
     Note that calling this method may pop up a dialog to the user, asking
     them if it's ok to increase the capacity. The result listener may
     never be called if the user doesn't answer the pop-up.
          ]]></description>
<param><![CDATA[rl an optional listener that will be informed as to whether
     the request succeeded.
     ]]></param>
</method>
<method name='getValue' fullname='com.threerings.util:Config/getValue' isStatic='false' isFinal='false' isOverride='false'  param_names='name;defValue' param_types='String;Object' param_defaults='undefined;undefined' result_type='Object'>
<description><![CDATA[
     Fetches and returns the value for the specified configuration property.
     ]]></description>
</method>
<method name='isPersisting' fullname='com.threerings.util:Config/isPersisting' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Are we persisting settings?
     ]]></description>
</method>
<method name='remove' fullname='com.threerings.util:Config/remove' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Remove any set value for the specified preference.
     This does not dispatch an event because this would only be done to remove an
     obsolete preference.
     ]]></description>
</method>
<method name='setPath' fullname='com.threerings.util:Config/setPath' isStatic='false' isFinal='false' isOverride='false'  param_names='path' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Set the path, if null then we aren't persisting settings.
     ]]></description>
</method>
<method name='setValue' fullname='com.threerings.util:Config/setValue' isStatic='false' isFinal='false' isOverride='false'  param_names='name;value;flush' param_types='String;Object;Boolean' param_defaults='undefined;undefined;true' result_type='void'>
<description><![CDATA[
     Returns the value specified.
     ]]></description>
</method>
<field name='_data' fullname='com.threerings.util:Config/protected:_data' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ The object in which we store things, usually _so.data. ]]></description>
</field>
<field name='_so' fullname='com.threerings.util:Config/protected:_so' type='flash.net:SharedObject' isStatic='false' isConst='false' >
<description><![CDATA[ The shared object that contains our preferences. ]]></description>
</field>
<classRec name='Siner' fullname='com.threerings.flash:Siner' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/Siner.as' namespace='com.threerings.flash' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Tracks multiple sine waves with different periods and amplitudes, and
 returns an instantaneous additive amplitude.
 ]]></description>
</classRec>
<method name='Siner' fullname='com.threerings.flash:Siner/Siner' isStatic='false' isFinal='false' isOverride='false'  param_names='args' param_types='restParam' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     ]]></description>
<param><![CDATA[args: amplitude1, period1, amplitude2, period2...
     Periods are specified in seconds.
          If constructed with more than one amplitude, the amplitudes are
     additive.
     
     The Siner will start in the reset() state.
     ]]></param>
</method>
<method name='randomize' fullname='com.threerings.flash:Siner/randomize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Randomize the value.
     ]]></description>
</method>
<method name='reset' fullname='com.threerings.flash:Siner/reset' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Reset to 0, with the amplitude about to increase.
     ]]></description>
</method>
<method name='value' fullname='com.threerings.flash:Siner/value/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Access the instantaneous value, which can range from
     [ -totalAmplitude, totalAmplitude ].
          Note: timestamps are only kept relative to the last access of the value,
     and floating point math is used, so things could get a little "off" after
     a while, and the frequency with which you sample the value will impact
     the error. You cope.
     ]]></description>
</method>
<field name='TWO_PI' fullname='com.threerings.flash:Siner/protected:TWO_PI' type='Number' isStatic='true' isConst='true' defaultValue='unknown' >
</field>
<field name='_amps' fullname='com.threerings.flash:Siner/protected:_amps' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_incs' fullname='com.threerings.flash:Siner/protected:_incs' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_stamp' fullname='com.threerings.flash:Siner/protected:_stamp' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_values' fullname='com.threerings.flash:Siner/protected:_values' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<classRec name='GraphicsUtil' fullname='com.threerings.flash:GraphicsUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/GraphicsUtil.as' namespace='com.threerings.flash' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<method name='dashRect' fullname='com.threerings.flash:GraphicsUtil/dashRect' isStatic='true' isFinal='false' isOverride='false'  param_names='g;x;y;width;height;dashLength;spaceLength' param_types='flash.display:Graphics;Number;Number;Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined;undefined;5;5' result_type='void'>
<description><![CDATA[
     Draws a dashed rectangle using the currently-set lineStyle.
     ]]></description>
</method>
<method name='dashTo' fullname='com.threerings.flash:GraphicsUtil/dashTo' isStatic='true' isFinal='false' isOverride='false'  param_names='g;x1;y1;x2;y2;dashLength;spaceLength' param_types='flash.display:Graphics;Number;Number;Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined;undefined;5;5' result_type='void'>
<description><![CDATA[
     Draws a dashed line using the currently set lineStyle.
     ]]></description>
</method>
<classRec name='AnimationManager' fullname='com.threerings.flash:AnimationManager' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/AnimationManager.as' namespace='com.threerings.flash' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Manages animations.
 ]]></description>
</classRec>
<method name='AnimationManager' fullname='com.threerings.flash:AnimationManager/AnimationManager' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='addDisplayAnimation' fullname='com.threerings.flash:AnimationManager/addDisplayAnimation' isStatic='true' isFinal='false' isOverride='false'  param_names='disp' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Track a DisplayObject that is also an Animation- it will
     automatically be started when added to the stage and 
     stopped when removed.
     ]]></description>
</method>
<method name='frameHandler' fullname='com.threerings.flash:AnimationManager/protected:frameHandler' isStatic='true' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Handle the ENTER_FRAME event.
     ]]></description>
</method>
<method name='isPlaying' fullname='com.threerings.flash:AnimationManager/isPlaying' isStatic='true' isFinal='false' isOverride='false'  param_names='anim' param_types='com.threerings.flash:Animation' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Test to see if the specified animation has been started and not stopped.
     ]]></description>
</method>
<method name='removeDisplayAnimation' fullname='com.threerings.flash:AnimationManager/removeDisplayAnimation' isStatic='true' isFinal='false' isOverride='false'  param_names='disp' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Stop tracking the specified DisplayObject animation.
     ]]></description>
</method>
<method name='start' fullname='com.threerings.flash:AnimationManager/start' isStatic='true' isFinal='false' isOverride='false'  param_names='anim' param_types='com.threerings.flash:Animation' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Start (or restart) the specified animation.
     ]]></description>
</method>
<method name='startDisplayAnim' fullname='com.threerings.flash:AnimationManager/protected:startDisplayAnim' isStatic='true' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='stop' fullname='com.threerings.flash:AnimationManager/stop' isStatic='true' isFinal='false' isOverride='false'  param_names='anim' param_types='com.threerings.flash:Animation' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Stop the specified animation.
     ]]></description>
</method>
<method name='stopDisplayAnim' fullname='com.threerings.flash:AnimationManager/protected:stopDisplayAnim' isStatic='true' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<field name='_anims' fullname='com.threerings.flash:AnimationManager/protected:_anims' type='Array' isStatic='true' isConst='false' defaultValue='unknown' >
<description><![CDATA[ All the currently running animations. ]]></description>
</field>
<field name='_framer' fullname='com.threerings.flash:AnimationManager/protected:_framer' type='flash.display:Sprite' isStatic='true' isConst='false' >
</field>
<field name='_now' fullname='com.threerings.flash:AnimationManager/protected:_now' type='Number' isStatic='true' isConst='false' >
<description><![CDATA[ The current timestamp, accessable to all animations. ]]></description>
</field>
<classRec name='Vector3' fullname='com.threerings.flash:Vector3' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/Vector3.as' namespace='com.threerings.flash' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Basic 3D vector implementation.
 ]]></description>
</classRec>
<method name='Vector3' fullname='com.threerings.flash:Vector3/Vector3' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y;z' param_types='Number;Number;Number' param_defaults='0;0;0' result_type='*'>
<description><![CDATA[ Creates a new vector. All three X, Y, Z parameters are optional. ]]></description>
</method>
<method name='add' fullname='com.threerings.flash:Vector3/add' isStatic='false' isFinal='false' isOverride='false'  param_names='v' param_types='com.threerings.flash:Vector3' param_defaults='undefined' result_type='com.threerings.flash:Vector3'>
<description><![CDATA[ Returns a new vector that is the summation of this vector with vector v. ]]></description>
</method>
<method name='addLocal' fullname='com.threerings.flash:Vector3/addLocal' isStatic='false' isFinal='false' isOverride='false'  param_names='v' param_types='com.threerings.flash:Vector3' param_defaults='undefined' result_type='com.threerings.flash:Vector3'>
<description><![CDATA[
     Sets this vector to the result of summation with v, such that <code>this = this + v</code>.
     Returns a reference to the modified self.
     ]]></description>
</method>
<method name='clampToUnitBox' fullname='com.threerings.flash:Vector3/clampToUnitBox' isStatic='false' isFinal='false' isOverride='false'  result_type='com.threerings.flash:Vector3'>
<description><![CDATA[
     Returns a new vector that is a copy of this vector, with each coordinate clamped
     to within [0, 1]. Please note that this obviously does not preserve the
     vector's original direction in space.
     ]]></description>
</method>
<method name='clone' fullname='com.threerings.flash:Vector3/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='com.threerings.flash:Vector3'>
<description><![CDATA[ Duplicates a vector. ]]></description>
</method>
<method name='cross' fullname='com.threerings.flash:Vector3/cross' isStatic='false' isFinal='false' isOverride='false'  param_names='v' param_types='com.threerings.flash:Vector3' param_defaults='undefined' result_type='com.threerings.flash:Vector3'>
<description><![CDATA[
     Returns a new vector that is the cross product of this vector with vector v,
     such that <code>result = this &#8855; v</code>.
     ]]></description>
</method>
<method name='crossLocal' fullname='com.threerings.flash:Vector3/crossLocal' isStatic='false' isFinal='false' isOverride='false'  param_names='v' param_types='com.threerings.flash:Vector3' param_defaults='undefined' result_type='com.threerings.flash:Vector3'>
<description><![CDATA[
     Sets this vector to the result of a cross product with vector v, such that
     <code>this = this &#8855; v</code>. Returns a reference to the modified self.
     ]]></description>
</method>
<method name='dot' fullname='com.threerings.flash:Vector3/dot' isStatic='false' isFinal='false' isOverride='false'  param_names='v' param_types='com.threerings.flash:Vector3' param_defaults='undefined' result_type='Number'>
<description><![CDATA[ Returns the dot product of this vector with vector v. ]]></description>
</method>
<method name='interpolate' fullname='com.threerings.flash:Vector3/interpolate' isStatic='true' isFinal='false' isOverride='false'  param_names='a;b;p' param_types='com.threerings.flash:Vector3;com.threerings.flash:Vector3;Number' param_defaults='undefined;undefined;undefined' result_type='com.threerings.flash:Vector3'>
<description><![CDATA[
     Returns a new vector that is the linear interpolation of vectors a and b
     at proportion p, where p is in [0, 1], p = 0 means the result is equal to a,
     and p = 1 means the result is equal to b.
     ]]></description>
</method>
<method name='intersection' fullname='com.threerings.flash:Vector3/intersection' isStatic='false' isFinal='false' isOverride='false'  param_names='s;p;n' param_types='com.threerings.flash:Vector3;com.threerings.flash:Vector3;com.threerings.flash:Vector3' param_defaults='undefined;undefined;undefined' result_type='com.threerings.flash:Vector3'>
<description><![CDATA[
     Finds the intersection of a ray emitted from s along this vector,
     with a plane passing through point p with normal n. Returns the point
     of intersection, potentially infinite if the ray and plane are parallel.
     ]]></description>
</method>
<method name='normalize' fullname='com.threerings.flash:Vector3/normalize' isStatic='false' isFinal='false' isOverride='false'  result_type='com.threerings.flash:Vector3'>
<description><![CDATA[ Returns a new vector that is a normalized version of this vector. ]]></description>
</method>
<method name='normalizeLocal' fullname='com.threerings.flash:Vector3/normalizeLocal' isStatic='false' isFinal='false' isOverride='false'  result_type='com.threerings.flash:Vector3'>
<description><![CDATA[ Destructively normalizes this vector. Returns a reference to the modified self. ]]></description>
</method>
<method name='scale' fullname='com.threerings.flash:Vector3/scale' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='com.threerings.flash:Vector3'>
<description><![CDATA[
     Returns a new vector that is the result of multiplying the current vector
     by the specified scalar.
     ]]></description>
</method>
<method name='scaleLocal' fullname='com.threerings.flash:Vector3/scaleLocal' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='com.threerings.flash:Vector3'>
<description><![CDATA[
     Destructively multiplies this vector by the specified scalar.
     Returns a reference to the modified self.
     ]]></description>
</method>
<method name='subtract' fullname='com.threerings.flash:Vector3/subtract' isStatic='false' isFinal='false' isOverride='false'  param_names='v' param_types='com.threerings.flash:Vector3' param_defaults='undefined' result_type='com.threerings.flash:Vector3'>
<description><![CDATA[ Returns a new vector that is the subtraction of vector v from this vector.]]></description>
</method>
<method name='subtractLocal' fullname='com.threerings.flash:Vector3/subtractLocal' isStatic='false' isFinal='false' isOverride='false'  param_names='v' param_types='com.threerings.flash:Vector3' param_defaults='undefined' result_type='com.threerings.flash:Vector3'>
<description><![CDATA[
     Sets the vector to the result of subtraction of v, such that <code>this = this - v</code>.
     Returns a reference to the modified self.
     ]]></description>
</method>
<method name='toString' fullname='com.threerings.flash:Vector3/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='length' fullname='com.threerings.flash:Vector3/length/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[ Returns this vector's length. ]]></description>
</method>
<method name='set' fullname='com.threerings.flash:Vector3/set' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y;z' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[ Assigns values to the three parameters of this vector. ]]></description>
</method>
<field name='INFINITE' fullname='com.threerings.flash:Vector3/INFINITE' type='com.threerings.flash:Vector3' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[
     Infinite vector - often the result of normalizing a zero vector, or intersecting
     a vector with a parallel plane.
     ]]></description>
</field>
<field name='x' fullname='com.threerings.flash:Vector3/x' type='Number' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[ Vector components. ]]></description>
</field>
<field name='y' fullname='com.threerings.flash:Vector3/y' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='z' fullname='com.threerings.flash:Vector3/z' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<classRec name='DisplayUtil' fullname='com.threerings.flash:DisplayUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/DisplayUtil.as' namespace='com.threerings.flash' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<method name='addChildAbove' fullname='com.threerings.flash:DisplayUtil/addChildAbove' isStatic='true' isFinal='false' isOverride='false'  param_names='container;newChild;above' param_types='flash.display:DisplayObjectContainer;flash.display:DisplayObject;flash.display:DisplayObject' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Adds newChild to container, directly above another child of the container.
     ]]></description>
</method>
<method name='addChildBelow' fullname='com.threerings.flash:DisplayUtil/addChildBelow' isStatic='true' isFinal='false' isOverride='false'  param_names='container;newChild;below' param_types='flash.display:DisplayObjectContainer;flash.display:DisplayObject;flash.display:DisplayObject' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Adds newChild to container, directly below another child of the container.
     ]]></description>
</method>
<method name='applyToHierarchy' fullname='com.threerings.flash:DisplayUtil/applyToHierarchy' isStatic='true' isFinal='false' isOverride='false'  param_names='disp;callbackFunction' param_types='flash.display:DisplayObject;Function' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Call the specified function for the display object and all descendants.
          This is nearly exactly like mx.utils.DisplayUtil.walkDisplayObjects,
     except this method copes with security errors when examining a child.
     ]]></description>
</method>
<method name='centerRectInRect' fullname='com.threerings.flash:DisplayUtil/centerRectInRect' isStatic='true' isFinal='false' isOverride='false'  param_names='rect;bounds' param_types='flash.geom:Rectangle;flash.geom:Rectangle' param_defaults='undefined;undefined' result_type='flash.geom:Point'>
<description><![CDATA[
     Center the specified rectangle within the specified bounds. If the bounds are too
     small then the rectangle will be pinned to the upper-left.
     ]]></description>
</method>
<method name='createPointSorter' fullname='com.threerings.flash:DisplayUtil/createPointSorter' isStatic='true' isFinal='false' isOverride='false'  param_names='origin' param_types='flash.geom:Point' param_defaults='undefined' result_type='Function'>
<description><![CDATA[
     Create a sort Function that can be used to compare Points in an
     Array according to their distance from the specified Point.
          Note: The function will always sort according to distance from the
     passed-in point, even if that point's coordinates change after
     the function is created.
     ]]></description>
</method>
<method name='dumpHierarchy' fullname='com.threerings.flash:DisplayUtil/dumpHierarchy' isStatic='true' isFinal='false' isOverride='false'  param_names='top' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Dump the display hierarchy to a String, each component on a newline, children indented
     two spaces:
     "instance0"  flash.display.Sprite
       "instance1"  flash.display.Sprite
       "entry_box"  flash.text.TextField
          Note: This method will not dump rawChildren of flex componenets.
     ]]></description>
</method>
<method name='dumpHierarchy0' fullname='com.threerings.flash:DisplayUtil/private:dumpHierarchy0' isStatic='true' isFinal='false' isOverride='false'  param_names='obj;spaces;inStr' param_types='flash.display:DisplayObject;String;String' param_defaults='undefined;;' result_type='String'>
<description><![CDATA[
     Internal worker method for dumpHierarchy.
     ]]></description>
</method>
<method name='findInHierarchy' fullname='com.threerings.flash:DisplayUtil/findInHierarchy' isStatic='true' isFinal='false' isOverride='false'  param_names='top;name;findShallow;maxDepth' param_types='flash.display:DisplayObject;String;Boolean;int' param_defaults='undefined;undefined;true;unknown' result_type='flash.display:DisplayObject'>
<description><![CDATA[
     Find a component with the specified name in the specified display hierarchy.
     Whether finding deeply or shallowly, if two components have the target name and are
     at the same depth, the first one found will be returned.
          Note: This method will not find rawChildren of flex componenets.
     ]]></description>
</method>
<method name='findInHierarchy0' fullname='com.threerings.flash:DisplayUtil/private:findInHierarchy0' isStatic='true' isFinal='false' isOverride='false'  param_names='obj;name;shallow;maxDepth;curDepth' param_types='flash.display:DisplayObject;String;Boolean;int;int' param_defaults='undefined;undefined;undefined;undefined;0' result_type='Array'>
<description><![CDATA[
     Internal worker method for findInHierarchy.
     ]]></description>
</method>
<method name='fitRectInRect' fullname='com.threerings.flash:DisplayUtil/fitRectInRect' isStatic='true' isFinal='false' isOverride='false'  param_names='rect;bounds' param_types='flash.geom:Rectangle;flash.geom:Rectangle' param_defaults='undefined;undefined' result_type='flash.geom:Point'>
<description><![CDATA[
     Returns the most reasonable position for the specified rectangle to
     be placed at so as to maximize its containment by the specified
     bounding rectangle while still placing it as near its original
     coordinates as possible.
          ]]></description>
<param><![CDATA[rect the rectangle to be positioned.
     ]]></param>
<param><![CDATA[bounds the containing rectangle.
     ]]></param>
</method>
<method name='positionBounds' fullname='com.threerings.flash:DisplayUtil/positionBounds' isStatic='true' isFinal='false' isOverride='false'  param_names='disp;x;y' param_types='flash.display:DisplayObject;Number;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Sets the top-left pixel of a DisplayObject to the given location, taking the
     object's bounds into account.
     ]]></description>
</method>
<method name='positionBoundsRelative' fullname='com.threerings.flash:DisplayUtil/positionBoundsRelative' isStatic='true' isFinal='false' isOverride='false'  param_names='disp;relativeTo;x;y' param_types='flash.display:DisplayObject;flash.display:DisplayObject;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Sets the top-left pixel of a DisplayObject to the given location, relative to another
     DisplayObject's coordinate space.
     ]]></description>
</method>
<method name='positionRect' fullname='com.threerings.flash:DisplayUtil/positionRect' isStatic='true' isFinal='false' isOverride='false'  param_names='r;bounds;avoid' param_types='flash.geom:Rectangle;flash.geom:Rectangle;Array' param_defaults='undefined;undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Position the specified rectangle within the bounds, avoiding
     any of the Rectangles in the avoid array, which may be destructively
     modified.
          ]]></description>
<return><![CDATA[true if the rectangle was successfully placed, given the
     constraints, or false if the positioning failed (the rectangle will
     be left at its original location.
     ]]></return>
</method>
<method name='sortDisplayChildren' fullname='com.threerings.flash:DisplayUtil/sortDisplayChildren' isStatic='true' isFinal='false' isOverride='false'  param_names='container;comp' param_types='flash.display:DisplayObjectContainer;Function' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Sorts a container's children, using ArrayUtil.stableSort.
          comp is a function that takes two DisplayObjects, and returns int -1 if the first
     object should appear before the second in the container, 1 if it should appear after,
     and 0 if the order does not matter. If omitted, Comparators.COMPARABLE
     will be used- all the children should implement Comparable.
     ]]></description>
</method>
<method name='transformPoint' fullname='com.threerings.flash:DisplayUtil/transformPoint' isStatic='true' isFinal='false' isOverride='false'  param_names='p;fromDisp;toDisp' param_types='flash.geom:Point;flash.display:DisplayObject;flash.display:DisplayObject' param_defaults='undefined;undefined;undefined' result_type='flash.geom:Point'>
<description><![CDATA[
     Transforms a point from one DisplayObject's coordinate space to another's.
     ]]></description>
</method>
<classRec name='FilterUtil' fullname='com.threerings.flash:FilterUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/FilterUtil.as' namespace='com.threerings.flash' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Useful utility methods that wouldn't be needed if the flash API were not so retarded.
 ]]></description>
</classRec>
<method name='addFilter' fullname='com.threerings.flash:FilterUtil/addFilter' isStatic='true' isFinal='false' isOverride='false'  param_names='disp;filter' param_types='flash.display:DisplayObject;flash.filters:BitmapFilter' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Add the specified filter to the DisplayObject.
     ]]></description>
</method>
<method name='checkArgs' fullname='com.threerings.flash:FilterUtil/protected:checkArgs' isStatic='true' isFinal='false' isOverride='false'  param_names='disp;filter' param_types='flash.display:DisplayObject;flash.filters:BitmapFilter' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='createHueShift' fullname='com.threerings.flash:FilterUtil/createHueShift' isStatic='true' isFinal='false' isOverride='false'  param_names='hue' param_types='int' param_defaults='undefined' result_type='flash.filters:ColorMatrixFilter'>
<description><![CDATA[
     Create a filter that, if applied to a DisplayObject, will shift the hue of that object
     by the given value.
          ]]></description>
<param><![CDATA[hueShift a value, in degrees, between -180 and 180.
     ]]></param>
</method>
<method name='equals' fullname='com.threerings.flash:FilterUtil/equals' isStatic='true' isFinal='false' isOverride='false'  param_names='f1;f2' param_types='flash.filters:BitmapFilter;flash.filters:BitmapFilter' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Are the two filters equals?
     ]]></description>
</method>
<method name='removeFilter' fullname='com.threerings.flash:FilterUtil/removeFilter' isStatic='true' isFinal='false' isOverride='false'  param_names='disp;filter' param_types='flash.display:DisplayObject;flash.filters:BitmapFilter' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Remove the specified filter from the DisplayObject.
     Note that the filter set in the DisplayObject is a clone, so the values
     of the specified filter are used to find a match.
     ]]></description>
</method>
<method name='shiftHueBy' fullname='com.threerings.flash:FilterUtil/shiftHueBy' isStatic='true' isFinal='false' isOverride='false'  param_names='original;hueShift' param_types='flash.filters:ColorMatrixFilter;int' param_defaults='undefined;undefined' result_type='flash.filters:ColorMatrixFilter'>
<description><![CDATA[
    Shift the color matrix filter by the given amount.  This is adapted from the code found at
    http://www.kirupa.com/forum/showthread.php?t=230706
          ]]></description>
<param><![CDATA[hueShift a value, in degrees, between -180 and 180.
    ]]></param>
</method>
<interfaceRec name='Animation' fullname='com.threerings.flash:Animation' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/Animation.as' namespace='com.threerings.flash' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
</interfaceRec>
<method name='updateAnimation' fullname='com.threerings.flash:Animation/com.threerings.flash:Animation:updateAnimation' isStatic='false' isFinal='false' isOverride='false'  param_names='elapsed' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     The primary working method for your animation. The argument indicates how
     many milliseconds have passed since the animation was started.
     ]]></description>
</method>
<classRec name='MathUtil' fullname='com.threerings.flash:MathUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/MathUtil.as' namespace='com.threerings.flash' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Collection of math utility functions.
 ]]></description>
</classRec>
<method name='clamp' fullname='com.threerings.flash:MathUtil/clamp' isStatic='true' isFinal='false' isOverride='false'  param_names='n;min;max' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='Number'>
<description><![CDATA[
     Returns the value of n clamped to be within the range [min, max].
     ]]></description>
</method>
<method name='distance' fullname='com.threerings.flash:MathUtil/distance' isStatic='true' isFinal='false' isOverride='false'  param_names='x1;y1;x2;y2;p' param_types='Number;Number;Number;Number;int' param_defaults='undefined;undefined;undefined;undefined;2' result_type='Number'>
<description><![CDATA[
     Returns distance from point (x1, y1) to (x2, y2) in 2D.
          <p>Supports various distance metrics: the common Euclidean distance, taxicab distance,
     arbitrary Minkowski distances, and Chebyshev distance.
          <p>See the <a href="http://www.nist.gov/dads/HTML/lmdistance.html">NIST web page on 
     distance definitions</a>.<p>
          ]]></description>
<param><![CDATA[x1 x value of the first point
     ]]></param>
<param><![CDATA[y1 y value of the first point
     ]]></param>
<param><![CDATA[x2 x value of the second point
     ]]></param>
<param><![CDATA[y2 y value of the second point    
     ]]></param>
<param><![CDATA[p Optional: p value of the norm function. Common cases:
              <ul><li>p = 2 (default): standard Euclidean distance on a plane
                  <li>p = 1: taxicab distance (aka Manhattan distance)
                  <li>p = Infinity: Chebyshev distance
              </ul>
              <b>Note</b>: p < 1 or p = NaN are treated as equivalent to p = Infinity
     ]]></param>
</method>
<method name='normalizeDegrees' fullname='com.threerings.flash:MathUtil/normalizeDegrees' isStatic='true' isFinal='false' isOverride='false'  param_names='degrees' param_types='Number' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
     Normalizes an angle in degrees to occupy the [0, 360) range.
     ]]></description>
</method>
<method name='normalizeRadians' fullname='com.threerings.flash:MathUtil/normalizeRadians' isStatic='true' isFinal='false' isOverride='false'  param_names='radians' param_types='Number' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
     Normalizes an angle in radians to occupy the [0, 2pi) range.
     ]]></description>
</method>
<method name='toDegrees' fullname='com.threerings.flash:MathUtil/toDegrees' isStatic='true' isFinal='false' isOverride='false'  param_names='radians' param_types='Number' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
     Converts radians to degrees.
     ]]></description>
</method>
<method name='toRadians' fullname='com.threerings.flash:MathUtil/toRadians' isStatic='true' isFinal='false' isOverride='false'  param_names='degrees' param_types='Number' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
     Converts degrees to radians.
     ]]></description>
</method>
<packageRec name='com.threerings.flash.null' fullname='com.threerings.flash.null'>
<description><![CDATA[
  Forked from code from com.adobe.images.JPGEncoder in as3corelib under the license contained
  in that file to produce a derivative work.
   see:
  http://code.google.com/p/as3corelib/source/browse/trunk/src/com/adobe/images/JPGEncoder.as?r=25
]]></description>
</packageRec>
<classRec name='JPGEncoder' fullname='com.threerings.flash:JPGEncoder' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/JPGEncoder.as' namespace='com.threerings.flash' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Class for compressing bitmaps into jpegs.  Each instance may only be used for a single image.
 When the encoder is constructed, the headers are generated, but no pixel encoding is done.
 Subsequent calls to 'process' will encode pixels for a specified length of time.  Once the
 encoding is done (determined by process returning true, or a call to isComplete), the jpeg data
 can be accessed via getJpeg.
 ]]></description>
</classRec>
<method name='JPGEncoder' fullname='com.threerings.flash:JPGEncoder/JPGEncoder' isStatic='false' isFinal='false' isOverride='false'  param_names='image;quality;pixelGranularity' param_types='flash.display:BitmapData;Number;int' param_defaults='undefined;50;100' result_type='*'>
<description><![CDATA[
  Construct a new JPGEncoder object.
  
  ]]></description>
<param><![CDATA[image The image to encode
  ]]></param>
<param><![CDATA[quality Quality level between 1 and 100 determining the level of compression.s
  ]]></param>
<param><![CDATA[pixelGranularity The minumum number of pixels to process at a time.
  ]]></param>
</method>
<method name='RGB2YUV' fullname='com.threerings.flash:JPGEncoder/private:RGB2YUV' isStatic='false' isFinal='false' isOverride='false'  param_names='img;xpos;ypos' param_types='flash.display:BitmapData;int;int' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<method name='completeEncoding' fullname='com.threerings.flash:JPGEncoder/protected:completeEncoding' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
  Add the EOI marker to the end of the buffer, and make the result available to the consumer
  of this class.
  ]]></description>
</method>
<method name='computeHuffmanTbl' fullname='com.threerings.flash:JPGEncoder/private:computeHuffmanTbl' isStatic='false' isFinal='false' isOverride='false'  param_names='nrcodes;std_table' param_types='Array;Array' param_defaults='undefined;undefined' result_type='Array'>
</method>
<method name='encodePixels' fullname='com.threerings.flash:JPGEncoder/protected:encodePixels' isStatic='false' isFinal='false' isOverride='false'  param_names='unitSize' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
  Encode a specified number of pixels.  Fewer pixels will be encoded if the end of the image
  is reached first.
  ]]></description>
</method>
<method name='fDCTQuant' fullname='com.threerings.flash:JPGEncoder/private:fDCTQuant' isStatic='false' isFinal='false' isOverride='false'  param_names='data;fdtbl' param_types='Array;Array' param_defaults='undefined;undefined' result_type='Array'>
</method>
<method name='getJpeg' fullname='com.threerings.flash:JPGEncoder/getJpeg' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.utils:ByteArray'>
<description><![CDATA[
  Return a byte array containing the encoded jpeg.
  ]]></description>
</method>
<method name='initCategoryNumber' fullname='com.threerings.flash:JPGEncoder/private:initCategoryNumber' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='initHuffmanTbl' fullname='com.threerings.flash:JPGEncoder/private:initHuffmanTbl' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='initQuantTables' fullname='com.threerings.flash:JPGEncoder/private:initQuantTables' isStatic='false' isFinal='false' isOverride='false'  param_names='sf' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='initializeEncoding' fullname='com.threerings.flash:JPGEncoder/protected:initializeEncoding' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='isComplete' fullname='com.threerings.flash:JPGEncoder/isComplete' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
  Return true if the encoding is complete.
  ]]></description>
</method>
<method name='process' fullname='com.threerings.flash:JPGEncoder/process' isStatic='false' isFinal='false' isOverride='false'  param_names='timeSlice' param_types='int' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
  Work on encoding the image for a specified number of milliseconds.  Return true if there
  is no more processing to do.
  ]]></description>
</method>
<method name='processDU' fullname='com.threerings.flash:JPGEncoder/private:processDU' isStatic='false' isFinal='false' isOverride='false'  param_names='CDU;fdtbl;DC;HTDC;HTAC' param_types='Array;Array;Number;Array;Array' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='Number'>
</method>
<method name='writeAPP0' fullname='com.threerings.flash:JPGEncoder/private:writeAPP0' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='writeBits' fullname='com.threerings.flash:JPGEncoder/private:writeBits' isStatic='false' isFinal='false' isOverride='false'  param_names='bs' param_types='JPGEncoder.as$30:BitString' param_defaults='undefined' result_type='void'>
</method>
<method name='writeByte' fullname='com.threerings.flash:JPGEncoder/private:writeByte' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<method name='writeDHT' fullname='com.threerings.flash:JPGEncoder/private:writeDHT' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='writeDQT' fullname='com.threerings.flash:JPGEncoder/private:writeDQT' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='writeHeader' fullname='com.threerings.flash:JPGEncoder/protected:writeHeader' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
  Write the jpeg header into the byte array for output.
  ]]></description>
</method>
<method name='writeSOF0' fullname='com.threerings.flash:JPGEncoder/private:writeSOF0' isStatic='false' isFinal='false' isOverride='false'  param_names='width;height' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
</method>
<method name='writeSOS' fullname='com.threerings.flash:JPGEncoder/private:writeSOS' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='writeWord' fullname='com.threerings.flash:JPGEncoder/private:writeWord' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<field name='DU' fullname='com.threerings.flash:JPGEncoder/private:DU' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='UDU' fullname='com.threerings.flash:JPGEncoder/private:UDU' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='UVAC_HT' fullname='com.threerings.flash:JPGEncoder/private:UVAC_HT' type='Array' isStatic='false' isConst='false' >
</field>
<field name='UVDC_HT' fullname='com.threerings.flash:JPGEncoder/private:UVDC_HT' type='Array' isStatic='false' isConst='false' >
</field>
<field name='UVTable' fullname='com.threerings.flash:JPGEncoder/private:UVTable' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='VDU' fullname='com.threerings.flash:JPGEncoder/private:VDU' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='YAC_HT' fullname='com.threerings.flash:JPGEncoder/private:YAC_HT' type='Array' isStatic='false' isConst='false' >
</field>
<field name='YDC_HT' fullname='com.threerings.flash:JPGEncoder/private:YDC_HT' type='Array' isStatic='false' isConst='false' >
</field>
<field name='YDU' fullname='com.threerings.flash:JPGEncoder/private:YDU' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='YTable' fullname='com.threerings.flash:JPGEncoder/private:YTable' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='ZigZag' fullname='com.threerings.flash:JPGEncoder/private:ZigZag' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='_DCU' fullname='com.threerings.flash:JPGEncoder/protected:_DCU' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='_DCV' fullname='com.threerings.flash:JPGEncoder/protected:_DCV' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='_DCY' fullname='com.threerings.flash:JPGEncoder/protected:_DCY' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='_bytenew' fullname='com.threerings.flash:JPGEncoder/protected:_bytenew' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='_byteout' fullname='com.threerings.flash:JPGEncoder/protected:_byteout' type='flash.utils:ByteArray' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[ Byte array to contain the jpg while encoding is in progress. ]]></description>
</field>
<field name='_bytepos' fullname='com.threerings.flash:JPGEncoder/protected:_bytepos' type='int' isStatic='false' isConst='false' defaultValue='7' >
</field>
<field name='_encodedJpeg' fullname='com.threerings.flash:JPGEncoder/protected:_encodedJpeg' type='flash.utils:ByteArray' isStatic='false' isConst='false' >
<description><![CDATA[ Byte array to contain the resuling jpg ]]></description>
</field>
<field name='_image' fullname='com.threerings.flash:JPGEncoder/protected:_image' type='flash.display:BitmapData' isStatic='false' isConst='false' >
<description><![CDATA[ The image to encode ]]></description>
</field>
<field name='_pixelGranularity' fullname='com.threerings.flash:JPGEncoder/protected:_pixelGranularity' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ The minumum number of pixels that will be processed at a time. ]]></description>
</field>
<field name='_xpos' fullname='com.threerings.flash:JPGEncoder/protected:_xpos' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='_ypos' fullname='com.threerings.flash:JPGEncoder/protected:_ypos' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='bitcode' fullname='com.threerings.flash:JPGEncoder/private:bitcode' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='category' fullname='com.threerings.flash:JPGEncoder/private:category' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='fdtbl_UV' fullname='com.threerings.flash:JPGEncoder/private:fdtbl_UV' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='fdtbl_Y' fullname='com.threerings.flash:JPGEncoder/private:fdtbl_Y' type='Array' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='pixelsDone' fullname='com.threerings.flash:JPGEncoder/protected:pixelsDone' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
</field>
<field name='std_ac_chrominance_nrcodes' fullname='com.threerings.flash:JPGEncoder/private:std_ac_chrominance_nrcodes' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='std_ac_chrominance_values' fullname='com.threerings.flash:JPGEncoder/private:std_ac_chrominance_values' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='std_ac_luminance_nrcodes' fullname='com.threerings.flash:JPGEncoder/private:std_ac_luminance_nrcodes' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='std_ac_luminance_values' fullname='com.threerings.flash:JPGEncoder/private:std_ac_luminance_values' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='std_dc_chrominance_nrcodes' fullname='com.threerings.flash:JPGEncoder/private:std_dc_chrominance_nrcodes' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='std_dc_chrominance_values' fullname='com.threerings.flash:JPGEncoder/private:std_dc_chrominance_values' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='std_dc_luminance_nrcodes' fullname='com.threerings.flash:JPGEncoder/private:std_dc_luminance_nrcodes' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<field name='std_dc_luminance_values' fullname='com.threerings.flash:JPGEncoder/private:std_dc_luminance_values' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<classRec name='Vector2' fullname='com.threerings.flash:Vector2' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/Vector2.as' namespace='com.threerings.flash' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Basic 2D vector implementation.
 ]]></description>
</classRec>
<method name='Vector2' fullname='com.threerings.flash:Vector2/Vector2' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y' param_types='Number;Number' param_defaults='0;0' result_type='*'>
<description><![CDATA[
     Constructs a Vector2 from the given values.
     ]]></description>
</method>
<method name='add' fullname='com.threerings.flash:Vector2/add' isStatic='false' isFinal='false' isOverride='false'  param_names='v' param_types='com.threerings.flash:Vector2' param_defaults='undefined' result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Returns a copy of this vector added to 'v'.
     ]]></description>
</method>
<method name='addLocal' fullname='com.threerings.flash:Vector2/addLocal' isStatic='false' isFinal='false' isOverride='false'  param_names='v' param_types='com.threerings.flash:Vector2' param_defaults='undefined' result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Adds another Vector2 to this, in place.
     Returns a reference to 'this', for chaining.
     ]]></description>
</method>
<method name='clone' fullname='com.threerings.flash:Vector2/clone' isStatic='false' isFinal='false' isOverride='false'  result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Returns a copy of this Vector2.
     ]]></description>
</method>
<method name='dot' fullname='com.threerings.flash:Vector2/dot' isStatic='false' isFinal='false' isOverride='false'  param_names='v' param_types='com.threerings.flash:Vector2' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
     Returns the dot product of this vector with vector v.
     ]]></description>
</method>
<method name='equals' fullname='com.threerings.flash:Vector2/equals' isStatic='false' isFinal='false' isOverride='false'  param_names='v' param_types='com.threerings.flash:Vector2' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Returns true if this vector is equal to v.
     ]]></description>
</method>
<method name='fromAngle' fullname='com.threerings.flash:Vector2/fromAngle' isStatic='true' isFinal='false' isOverride='false'  param_names='radians;len' param_types='Number;Number' param_defaults='undefined;1' result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Creates a Vector2 of magnitude 'len' that has been rotated about the origin by 'radians'.
     ]]></description>
</method>
<method name='fromPoint' fullname='com.threerings.flash:Vector2/fromPoint' isStatic='true' isFinal='false' isOverride='false'  param_names='p' param_types='flash.geom:Point' param_defaults='undefined' result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Converts Point p to a Vector2.
     ]]></description>
</method>
<method name='fromPoints' fullname='com.threerings.flash:Vector2/fromPoints' isStatic='true' isFinal='false' isOverride='false'  param_names='s;t' param_types='flash.geom:Point;flash.geom:Point' param_defaults='undefined;undefined' result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Creates a new Vector2 pointing from s to t.
     ]]></description>
</method>
<method name='getPerp' fullname='com.threerings.flash:Vector2/getPerp' isStatic='false' isFinal='false' isOverride='false'  param_names='ccw' param_types='Boolean' param_defaults='true' result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Returns a vector that is perpendicular to this one.
     If ccw = true, the perpendicular vector is rotated 90 degrees counter-clockwise from this
     vector, otherwise it's rotated 90 degrees clockwise.
     ]]></description>
</method>
<method name='interpolate' fullname='com.threerings.flash:Vector2/interpolate' isStatic='true' isFinal='false' isOverride='false'  param_names='a;b;p' param_types='com.threerings.flash:Vector2;com.threerings.flash:Vector2;Number' param_defaults='undefined;undefined;undefined' result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Returns a new vector that is the linear interpolation of vectors a and b
     at proportion p, where p is in [0, 1], p = 0 means the result is equal to a,
     and p = 1 means the result is equal to b.
     ]]></description>
</method>
<method name='invert' fullname='com.threerings.flash:Vector2/invert' isStatic='false' isFinal='false' isOverride='false'  result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Returns a copy of the vector, inverted.
     ]]></description>
</method>
<method name='invertLocal' fullname='com.threerings.flash:Vector2/invertLocal' isStatic='false' isFinal='false' isOverride='false'  result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Inverts the vector.
     ]]></description>
</method>
<method name='normalize' fullname='com.threerings.flash:Vector2/normalize' isStatic='false' isFinal='false' isOverride='false'  result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Returns a normalized copy of the vector.
     ]]></description>
</method>
<method name='normalizeLocal' fullname='com.threerings.flash:Vector2/normalizeLocal' isStatic='false' isFinal='false' isOverride='false'  result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Normalizes this vector in place.
     Returns a reference to 'this', for chaining.
     ]]></description>
</method>
<method name='normalizeLocalAndGetLength' fullname='com.threerings.flash:Vector2/normalizeLocalAndGetLength' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Normalizes the vector in place and returns its original length.
     ]]></description>
</method>
<method name='rotate' fullname='com.threerings.flash:Vector2/rotate' isStatic='false' isFinal='false' isOverride='false'  param_names='radians' param_types='Number' param_defaults='undefined' result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Returns a rotated copy of this vector.
     ]]></description>
</method>
<method name='rotateLocal' fullname='com.threerings.flash:Vector2/rotateLocal' isStatic='false' isFinal='false' isOverride='false'  param_names='radians' param_types='Number' param_defaults='undefined' result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Rotates the vector in place by 'radians'.
     Returns a reference to 'this', for chaining.
     ]]></description>
</method>
<method name='scale' fullname='com.threerings.flash:Vector2/scale' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='com.threerings.flash:Vector2'>
<description><![CDATA[ Returns (this value). ]]></description>
</method>
<method name='scaleLocal' fullname='com.threerings.flash:Vector2/scaleLocal' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Number' param_defaults='undefined' result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Scales this vector by value.
     ]]></description>
</method>
<method name='similar' fullname='com.threerings.flash:Vector2/similar' isStatic='false' isFinal='false' isOverride='false'  param_names='v;epsilon' param_types='com.threerings.flash:Vector2;Number' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Returns true if the components of v are equal to the components of this Vector2,
     within the given epsilon.
     ]]></description>
</method>
<method name='smallerAngleBetween' fullname='com.threerings.flash:Vector2/smallerAngleBetween' isStatic='true' isFinal='false' isOverride='false'  param_names='v1;v2' param_types='com.threerings.flash:Vector2;com.threerings.flash:Vector2' param_defaults='undefined;undefined' result_type='Number'>
<description><![CDATA[
     Returns the smaller of the two angles between v1 and v2, in radians.
     Result will be in range [0, pi].
     ]]></description>
</method>
<method name='subtract' fullname='com.threerings.flash:Vector2/subtract' isStatic='false' isFinal='false' isOverride='false'  param_names='v' param_types='com.threerings.flash:Vector2' param_defaults='undefined' result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Returns (this - v).
     ]]></description>
</method>
<method name='subtractLocal' fullname='com.threerings.flash:Vector2/subtractLocal' isStatic='false' isFinal='false' isOverride='false'  param_names='v' param_types='com.threerings.flash:Vector2' param_defaults='undefined' result_type='com.threerings.flash:Vector2'>
<description><![CDATA[
     Subtracts another vector from this one, in place.
     Returns a reference to 'this', for chaining.
     ]]></description>
</method>
<method name='toPoint' fullname='com.threerings.flash:Vector2/toPoint' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Point'>
<description><![CDATA[
     Converts the Vector2 to a Point.
     ]]></description>
</method>
<method name='toString' fullname='com.threerings.flash:Vector2/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[ Returns a string representation of the Vector2. ]]></description>
</method>
<method name='angle' fullname='com.threerings.flash:Vector2/angle/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Returns the angle represented by this Vector2, in radians.
     ]]></description>
</method>
<method name='length' fullname='com.threerings.flash:Vector2/length/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Returns this vector's length.
     ]]></description>
</method>
<method name='lengthSquared' fullname='com.threerings.flash:Vector2/lengthSquared/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Returns the square of this vector's length.
     ]]></description>
</method>
<method name='length' fullname='com.threerings.flash:Vector2/length/set' isStatic='false' isFinal='false' isOverride='false'  param_names='newLen' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Sets this vector's length.
     ]]></description>
</method>
<method name='set' fullname='com.threerings.flash:Vector2/set' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Sets the vector's components to the given values.
     ]]></description>
</method>
<field name='INFINITE' fullname='com.threerings.flash:Vector2/INFINITE' type='com.threerings.flash:Vector2' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[
     Infinite vector - often the result of normalizing a zero vector.
     ]]></description>
</field>
<field name='x' fullname='com.threerings.flash:Vector2/x' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='y' fullname='com.threerings.flash:Vector2/y' type='Number' isStatic='false' isConst='false' defaultValue='0' >
</field>
<classRec name='TextFieldUtil' fullname='com.threerings.flash:TextFieldUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/TextFieldUtil.as' namespace='com.threerings.flash' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<method name='createField' fullname='com.threerings.flash:TextFieldUtil/createField' isStatic='true' isFinal='false' isOverride='false'  param_names='text;initProps;formatProps;clazz' param_types='String;Object;Object;Class' param_defaults='undefined;null;null;null' result_type='flash.text:TextField'>
<description><![CDATA[
     Create a TextField.
     The field will have setFocusable() called on it.
     Note that if the autoSize property is not none, then the field will be resized
     to the size of the text, overwriting any width/height properties specified.
          ]]></description>
<param><![CDATA[initProps contains properties with which to initialize the TextField.
     Additionally it may contain the following properties:
        outlineColor: uint
     ]]></param>
<param><![CDATA[formatProps contains properties with which to initialize the defaultTextFormat.
     ]]></param>
</method>
<method name='createFormat' fullname='com.threerings.flash:TextFieldUtil/createFormat' isStatic='true' isFinal='false' isOverride='false'  param_names='initProps' param_types='Object' param_defaults='undefined' result_type='flash.text:TextFormat'>
<description><![CDATA[
     Create a TextFormat using initProps.
     If unspecified, the following properties have default values:
      size: 18
      font: _sans
     ]]></description>
</method>
<method name='handleFieldFocus' fullname='com.threerings.flash:TextFieldUtil/protected:handleFieldFocus' isStatic='true' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Handle focusing the text field.
     ]]></description>
</method>
<method name='handleLastSelectedRemoved' fullname='com.threerings.flash:TextFieldUtil/protected:handleLastSelectedRemoved' isStatic='true' isFinal='false' isOverride='false'  param_names='ignored' param_types='restParam' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Internal method related to tracking a single selectable TextField.
     ]]></description>
</method>
<method name='handleTrackMouseable' fullname='com.threerings.flash:TextFieldUtil/protected:handleTrackMouseable' isStatic='true' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Checks every damn frame to see if we should make a TextField mouse-enabled.
     ]]></description>
</method>
<method name='handleTrackedSelection' fullname='com.threerings.flash:TextFieldUtil/protected:handleTrackedSelection' isStatic='true' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Internal method related to tracking a single selectable TextField.
     ]]></description>
</method>
<method name='setFocusable' fullname='com.threerings.flash:TextFieldUtil/setFocusable' isStatic='true' isFinal='false' isOverride='false'  param_names='field' param_types='flash.text:TextField' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Add a special MouseEvent.CLICK listener so that the specified field is focusable
     even inside a security boundary.
     ]]></description>
</method>
<method name='setMaximumTextWidth' fullname='com.threerings.flash:TextFieldUtil/setMaximumTextWidth' isStatic='true' isFinal='false' isOverride='false'  param_names='tf;width;truncationString' param_types='flash.text:TextField;Number;String' param_defaults='undefined;undefined;...' result_type='Boolean'>
<description><![CDATA[
     Ensures that a single-line TextField is not wider than the specified width, and
     truncates it with the truncation string if is. If the TextField is truncated,
     it will be resized to its new textWidth.
          ]]></description>
<param><![CDATA[width the maximum pixel width of the TextField. If tf.width > width,
     the text inside the TextField will be truncated, and will have the truncation string
     appended.
     ]]></param>
<param><![CDATA[truncationString the string to append to the end of the TextField if it exceeds
     the specified width.
     ]]></param>
<return><![CDATA[true if truncation took place
     ]]></return>
</method>
<method name='trackOnlyLinksMouseable' fullname='com.threerings.flash:TextFieldUtil/trackOnlyLinksMouseable' isStatic='true' isFinal='false' isOverride='false'  param_names='textField;on' param_types='flash.text:TextField;Boolean' param_defaults='undefined;true' result_type='void'>
<description><![CDATA[
     Install listeners on the specified TextField such that the mouseEnabled property
     is only true when the mouse is over a link.
     ]]></description>
</method>
<method name='trackSingleSelectable' fullname='com.threerings.flash:TextFieldUtil/trackSingleSelectable' isStatic='true' isFinal='false' isOverride='false'  param_names='textField' param_types='flash.text:TextField' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Include the specified TextField in a set of TextFields in which only
     one may have a selection at a time.
     ]]></description>
</method>
<method name='updateFormat' fullname='com.threerings.flash:TextFieldUtil/updateFormat' isStatic='true' isFinal='false' isOverride='false'  param_names='field;props' param_types='flash.text:TextField;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Update the defaultTextFormat for the specified field, as well as all text therein.
     ]]></description>
</method>
<method name='updateSelection' fullname='com.threerings.flash:TextFieldUtil/protected:updateSelection' isStatic='true' isFinal='false' isOverride='false'  param_names='field' param_types='flash.text:TextField' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Process the selection.
     ]]></description>
</method>
<method name='updateText' fullname='com.threerings.flash:TextFieldUtil/updateText' isStatic='true' isFinal='false' isOverride='false'  param_names='field;text' param_types='flash.text:TextField;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Update the text in the field, automatically resizing it if appropriate.
     ]]></description>
</method>
<field name='DEFAULT_FORMAT_PROPS' fullname='com.threerings.flash:TextFieldUtil/protected:DEFAULT_FORMAT_PROPS' type='Object' isStatic='true' isConst='true' defaultValue='unknown' >
</field>
<field name='HEIGHT_PAD' fullname='com.threerings.flash:TextFieldUtil/HEIGHT_PAD' type='int' isStatic='true' isConst='true' defaultValue='4' >
<description><![CDATA[ A fudge factor that must be added to a TextField's textHeight when setting the height. ]]></description>
</field>
<field name='MASK_FIELD_PROPS' fullname='com.threerings.flash:TextFieldUtil/protected:MASK_FIELD_PROPS' type='Object' isStatic='true' isConst='true' defaultValue='unknown' >
</field>
<field name='WIDTH_PAD' fullname='com.threerings.flash:TextFieldUtil/WIDTH_PAD' type='int' isStatic='true' isConst='true' defaultValue='5' >
<description><![CDATA[ A fudge factor that must be added to a TextField's textWidth when setting the width. ]]></description>
</field>
<field name='_frameDispatcher' fullname='com.threerings.flash:TextFieldUtil/protected:_frameDispatcher' type='flash.display:Sprite' isStatic='true' isConst='true' defaultValue='' >
</field>
<field name='_lastSelected' fullname='com.threerings.flash:TextFieldUtil/protected:_lastSelected' type='flash.text:TextField' isStatic='true' isConst='false' >
<description><![CDATA[ The last tracked TextField to be selected. ]]></description>
</field>
<field name='_mouseables' fullname='com.threerings.flash:TextFieldUtil/protected:_mouseables' type='flash.utils:Dictionary' isStatic='true' isConst='false' defaultValue='' >
</field>
<classRec name='ImageUtil' fullname='com.threerings.flash:ImageUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/ImageUtil.as' namespace='com.threerings.flash' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Image and Bitmap related utility functions.
 ]]></description>
</classRec>
<method name='createErrorBitmap' fullname='com.threerings.flash:ImageUtil/createErrorBitmap' isStatic='true' isFinal='false' isOverride='false'  result_type='flash.display:BitmapData'>
<description><![CDATA[
     Create a minimally-sized "error" BitmapData.
     ]]></description>
</method>
<method name='createErrorImage' fullname='com.threerings.flash:ImageUtil/createErrorImage' isStatic='true' isFinal='false' isOverride='false'  param_names='width;height' param_types='int;int' param_defaults='undefined;undefined' result_type='flash.display:DisplayObject'>
<description><![CDATA[
     Create a DisplayObject that will display an error message
     of the specified dimensions.
     ]]></description>
</method>
<method name='toBitmapData' fullname='com.threerings.flash:ImageUtil/toBitmapData' isStatic='true' isFinal='false' isOverride='false'  param_names='spec' param_types='' param_defaults='undefined' result_type='flash.display:BitmapData'>
<description><![CDATA[
     Takes a BitmapData, Bitmap, or Class that will turn into either, and returns
     a reference to the BitmapData, or returns null.
     ]]></description>
</method>
<field name='ERROR_PADDING' fullname='com.threerings.flash:ImageUtil/private:ERROR_PADDING' type='int' isStatic='true' isConst='true' defaultValue='5' >
<description><![CDATA[ The amount to pad error messages by. ]]></description>
</field>
<classRec name='ColorUtil' fullname='com.threerings.flash:ColorUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/ColorUtil.as' namespace='com.threerings.flash' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Color utility methods.
  See also mx.utils.ColorUtil.
 ]]></description>
</classRec>
<method name='blend' fullname='com.threerings.flash:ColorUtil/blend' isStatic='true' isFinal='false' isOverride='false'  param_names='first;second;firstPerc' param_types='uint;uint;Number' param_defaults='undefined;undefined;0.5' result_type='uint'>
<description><![CDATA[
     Blend the two colors, either 50-50 or according to the ratio specified.
     ]]></description>
</method>
<classRec name='Easing' fullname='com.threerings.flash:Easing' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/Easing.as' namespace='com.threerings.flash' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Some easing functions.
 ]]></description>
</classRec>
<method name='cubicHermiteSpline' fullname='com.threerings.flash:Easing/cubicHermiteSpline' isStatic='true' isFinal='false' isOverride='false'  param_names='t;b;c;d;p_params' param_types='Number;Number;Number;Number;Object' param_defaults='undefined;undefined;undefined;undefined;null' result_type='Number'>
<description><![CDATA[
     Interpolates cubically between two values, with beginning and end derivates set
     to zero. See http://en.wikipedia.org/wiki/Cubic_Hermite_spline for details.
     ]]></description>
</method>
<classRec name='MenuUtil' fullname='com.threerings.flash:MenuUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/MenuUtil.as' namespace='com.threerings.flash' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 ]]></description>
</classRec>
<method name='createControllerMenuItem' fullname='com.threerings.flash:MenuUtil/createControllerMenuItem' isStatic='true' isFinal='false' isOverride='false'  param_names='caption;cmdOrFn;arg;separatorBefore;enabled;visible' param_types='String;Object;Object;Boolean;Boolean;Boolean' param_defaults='undefined;undefined;null;false;true;true' result_type='flash.ui:ContextMenuItem'>
<description><![CDATA[
     Create a menu item that will submit a controller command when selected.
     ]]></description>
</method>
<classRec name='LoaderUtil' fullname='com.threerings.flash:LoaderUtil' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/LoaderUtil.as' namespace='com.threerings.flash' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Contains a utility method for safely unloading a Loader.
 ]]></description>
</classRec>
<method name='unload' fullname='com.threerings.flash:LoaderUtil/unload' isStatic='true' isFinal='false' isOverride='false'  param_names='loader' param_types='flash.display:Loader' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Safely unload the specified loader.
     ]]></description>
</method>
<classRec name='AnimationImpl' fullname='com.threerings.flash:AnimationImpl' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/AnimationImpl.as' namespace='com.threerings.flash' access='public' baseclass='Object' interfaces='com.threerings.flash:Animation' isFinal='false' isDynamic='false' >
</classRec>
<method name='isPlaying' fullname='com.threerings.flash:AnimationImpl/isPlaying' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='startAnimation' fullname='com.threerings.flash:AnimationImpl/startAnimation' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='stopAnimation' fullname='com.threerings.flash:AnimationImpl/stopAnimation' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='updateAnimation' fullname='com.threerings.flash:AnimationImpl/updateAnimation' isStatic='false' isFinal='false' isOverride='false'  param_names='elapsed' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<classRec name='AlphaFade' fullname='com.threerings.flash:AlphaFade' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/AlphaFade.as' namespace='com.threerings.flash' access='public' baseclass='com.threerings.flash:AnimationImpl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 An Animation that linearly transitions the alpha attribute of a given display object from
 one value to another and optionally executes a callback function when the transition is
 complete.
 ]]></description>
</classRec>
<method name='AlphaFade' fullname='com.threerings.flash:AlphaFade/AlphaFade' isStatic='false' isFinal='false' isOverride='false'  param_names='disp;from;to;duration;done' param_types='flash.display:DisplayObject;Number;Number;Number;Function' param_defaults='undefined;0;1;1;null' result_type='*'>
<description><![CDATA[
     Constructs a new AlphaFade instance. The alpha values should lie in [0, 1] and the
     duration is measured in milliseconds.
     ]]></description>
</method>
<method name='updateAnimation' fullname='com.threerings.flash:AlphaFade/updateAnimation' isStatic='false' isFinal='false' isOverride='true'  param_names='elapsed' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<field name='_disp' fullname='com.threerings.flash:AlphaFade/protected:_disp' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
</field>
<field name='_done' fullname='com.threerings.flash:AlphaFade/protected:_done' type='Function' isStatic='false' isConst='false' >
</field>
<field name='_duration' fullname='com.threerings.flash:AlphaFade/protected:_duration' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_from' fullname='com.threerings.flash:AlphaFade/protected:_from' type='Number' isStatic='false' isConst='false' >
</field>
<field name='_to' fullname='com.threerings.flash:AlphaFade/protected:_to' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='KeyRepeatLimiter' fullname='com.threerings.flash:KeyRepeatLimiter' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/KeyRepeatLimiter.as' namespace='com.threerings.flash' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A very simple class that adapts the KeyboardEvents generated by some source and altering
 (or blocking) the key repeat rate.
 ]]></description>
</classRec>
<method name='KeyRepeatLimiter' fullname='com.threerings.flash:KeyRepeatLimiter/KeyRepeatLimiter' isStatic='false' isFinal='false' isOverride='false'  param_names='source;limitRate' param_types='flash.events:IEventDispatcher;int' param_defaults='undefined;0' result_type='*'>
<description><![CDATA[
     Create a KeyRepeatLimiter that will be limiting key repeat events from
     the specified source.
          ]]></description>
<param><![CDATA[limitRate 0 to block all key repeats, or a millisecond value specifying how often
     to dispatch KEY_DOWN events while the key is being held down. The rate will be limted
     by the frame rate of the enclosing SWF.
     ]]></param>
</method>
<method name='handleKeyDown' fullname='com.threerings.flash:KeyRepeatLimiter/protected:handleKeyDown' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:KeyboardEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='handleKeyUp' fullname='com.threerings.flash:KeyRepeatLimiter/protected:handleKeyUp' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:KeyboardEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='handleTimerEvent' fullname='com.threerings.flash:KeyRepeatLimiter/protected:handleTimerEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:TimerEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='shutdown' fullname='com.threerings.flash:KeyRepeatLimiter/shutdown' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Dispose of this KeyRepeatBlocker.
     ]]></description>
</method>
<field name='_down' fullname='com.threerings.flash:KeyRepeatLimiter/protected:_down' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[ Tracks whether a key is currently being held down. ]]></description>
</field>
<field name='_limitRate' fullname='com.threerings.flash:KeyRepeatLimiter/protected:_limitRate' type='int' isStatic='false' isConst='false' >
</field>
<field name='_source' fullname='com.threerings.flash:KeyRepeatLimiter/protected:_source' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
<description><![CDATA[ Our source. ]]></description>
</field>
<classRec name='BackgroundJPGEncoder' fullname='com.threerings.flash:BackgroundJPGEncoder' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/BackgroundJPGEncoder.as' namespace='com.threerings.flash' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Class that will encode a jpeg in the background and fire an event when it's done.
 ]]></description>
<metadata>
	<Event owner='com.threerings.flash:BackgroundJPGEncoder' name='complete' type='com.threerings.util.ValueEvent' >
<description><![CDATA[
 Dispatched when the jpeg is complete.
 The 'value' property will contain the received data.
  ]]></description>
<eventType><![CDATA[flash.events.Event.COMPLETE
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='BackgroundJPGEncoder' fullname='com.threerings.flash:BackgroundJPGEncoder/BackgroundJPGEncoder' isStatic='false' isFinal='false' isOverride='false'  param_names='image;quality;timeSlice' param_types='flash.display:BitmapData;Number;int' param_defaults='undefined;50;100' result_type='*'>
<description><![CDATA[
     Construct a jpeg encoder.  Once started, the encoder will encode a jpeg over the course
     of multiple frames, generating an event to deliver the finished jpeg when it is done.
          ]]></description>
<param><![CDATA[image The bitmap to encode.
     ]]></param>
<param><![CDATA[quality The jpeg quality from 1 to 100 which determines the compression level.
     ]]></param>
<param><![CDATA[timeSlice The number of milliseconds of processing to do per frame.  
     ]]></param>
</method>
<method name='cancel' fullname='com.threerings.flash:BackgroundJPGEncoder/cancel' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Cancel encoding and discard any intermediate results.
     ]]></description>
</method>
<method name='start' fullname='com.threerings.flash:BackgroundJPGEncoder/start' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Start encoding
     ]]></description>
</method>
<method name='timerHandler' fullname='com.threerings.flash:BackgroundJPGEncoder/protected:timerHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:TimerEvent' param_defaults='undefined' result_type='void'>
</method>
<field name='PIXEL_GRANULARITY' fullname='com.threerings.flash:BackgroundJPGEncoder/protected:PIXEL_GRANULARITY' type='int' isStatic='false' isConst='true' defaultValue='100' >
</field>
<field name='_encoder' fullname='com.threerings.flash:BackgroundJPGEncoder/protected:_encoder' type='com.threerings.flash:JPGEncoder' isStatic='false' isConst='false' >
</field>
<field name='_timeSlice' fullname='com.threerings.flash:BackgroundJPGEncoder/protected:_timeSlice' type='int' isStatic='false' isConst='false' >
</field>
<field name='_timer' fullname='com.threerings.flash:BackgroundJPGEncoder/protected:_timer' type='flash.utils:Timer' isStatic='false' isConst='false' >
</field>
<classRec name='FPSDisplay' fullname='com.threerings.flash:FPSDisplay' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/FPSDisplay.as' namespace='com.threerings.flash' access='public' baseclass='flash.text:TextField' isFinal='false' isDynamic='false' >
</classRec>
<method name='FPSDisplay' fullname='com.threerings.flash:FPSDisplay/FPSDisplay' isStatic='false' isFinal='false' isOverride='false'  param_names='framesToTrack' param_types='int' param_defaults='150' result_type='*'>
</method>
<method name='handleEnterFrame' fullname='com.threerings.flash:FPSDisplay/protected:handleEnterFrame' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<field name='_frameStamps' fullname='com.threerings.flash:FPSDisplay/protected:_frameStamps' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[ Timestamps of past ENTER_FRAME events. ]]></description>
</field>
<field name='_framesToTrack' fullname='com.threerings.flash:FPSDisplay/protected:_framesToTrack' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ The number of running frames we track. ]]></description>
</field>
<classRec name='ClearingTextField' fullname='com.threerings.flash:ClearingTextField' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/ClearingTextField.as' namespace='com.threerings.flash' access='public' baseclass='flash.text:TextField' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A simple TextField with a method for setting text that will auto-clear.
 ]]></description>
</classRec>
<method name='ClearingTextField' fullname='com.threerings.flash:ClearingTextField/ClearingTextField' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
</method>
<method name='handleTimer' fullname='com.threerings.flash:ClearingTextField/protected:handleTimer' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:TimerEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='setText' fullname='com.threerings.flash:ClearingTextField/setText' isStatic='false' isFinal='false' isOverride='false'  param_names='str;secondsToClear' param_types='String;Number' param_defaults='undefined;5' result_type='void'>
<description><![CDATA[
     Set the specified text on this TextField, and clear the text 
     after the specified delay. If more text is set prior to the
     delay elapsing, the clear is pushed back to that text's delay, if any.
     ]]></description>
</method>
<method name='text' fullname='com.threerings.flash:ClearingTextField/text/set' isStatic='false' isFinal='false' isOverride='true'  param_names='str' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Set text that will not auto-clear.
     ]]></description>
</method>
<field name='_timer' fullname='com.threerings.flash:ClearingTextField/protected:_timer' type='flash.utils:Timer' isStatic='false' isConst='false' >
</field>
<classRec name='SimpleSkinButton' fullname='com.threerings.flash:SimpleSkinButton' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/SimpleSkinButton.as' namespace='com.threerings.flash' access='public' baseclass='flash.display:SimpleButton' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A simple skin that shifts the text in the down state.
 ]]></description>
</classRec>
<method name='SimpleSkinButton' fullname='com.threerings.flash:SimpleSkinButton/SimpleSkinButton' isStatic='false' isFinal='false' isOverride='false'  param_names='skin;text;textFieldProps;textFormatProps;padding;height;xshift;yshift;outline' param_types=';String;Object;Object;int;Number;int;int;Object' param_defaults='undefined;undefined;null;null;10;unknown;0;1;null' result_type='*'>
<description><![CDATA[
     Create a SimpleSkinButton.
     ]]></description>
<param><![CDATA[skin a BitmapData, Bitmap, or class that will turn into either.
     ]]></param>
<param><![CDATA[text the text to place on the button
     ]]></param>
<param><![CDATA[textFieldProps initProps for the TextField
     ]]></param>
<param><![CDATA[textFormatProps initProps for the TextFormat
     ]]></param>
<param><![CDATA[outline if a uint, the color of the outline to put over the skin.
     ]]></param>
</method>
<method name='createState' fullname='com.threerings.flash:SimpleSkinButton/protected:createState' isStatic='false' isFinal='false' isOverride='false'  param_names='bmp;text;textFieldProps;textFormatProps;padding;height;xshift;yshift;outline' param_types='flash.display:BitmapData;String;Object;Object;int;Number;int;int;Object' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined;undefined' result_type='flash.display:Sprite'>
</method>
<classRec name='DisablingButton' fullname='com.threerings.flash:DisablingButton' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/DisablingButton.as' namespace='com.threerings.flash' access='public' baseclass='flash.display:SimpleButton' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A SimpleButton subclass that includes a disabledState.
 DisablingButtons don't dispatch mouse events when disabled.
 ]]></description>
</classRec>
<method name='DisablingButton' fullname='com.threerings.flash:DisablingButton/DisablingButton' isStatic='false' isFinal='false' isOverride='false'  param_names='upState;overState;downState;hitTestState;disabledState' param_types='flash.display:DisplayObject;flash.display:DisplayObject;flash.display:DisplayObject;flash.display:DisplayObject;flash.display:DisplayObject' param_defaults='null;null;null;null;null' result_type='*'>
</method>
<method name='updateState' fullname='com.threerings.flash:DisablingButton/protected:updateState' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='disabledState' fullname='com.threerings.flash:DisablingButton/disabledState/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
<description><![CDATA[
     Returns the DisplayObject that will be displayed when the button is disabled.
     ]]></description>
</method>
<method name='mouseEnabled' fullname='com.threerings.flash:DisablingButton/mouseEnabled/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
</method>
<method name='upState' fullname='com.threerings.flash:DisablingButton/upState/get' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.display:DisplayObject'>
</method>
<method name='disabledState' fullname='com.threerings.flash:DisablingButton/disabledState/set' isStatic='false' isFinal='false' isOverride='false'  param_names='newState' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Sets the DisplayObject that will be displayed when the button is disabled.
     ]]></description>
</method>
<method name='enabled' fullname='com.threerings.flash:DisablingButton/enabled/set' isStatic='false' isFinal='false' isOverride='true'  param_names='val' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='mouseEnabled' fullname='com.threerings.flash:DisablingButton/mouseEnabled/set' isStatic='false' isFinal='false' isOverride='true'  param_names='enabled' param_types='Boolean' param_defaults='undefined' result_type='void'>
</method>
<method name='upState' fullname='com.threerings.flash:DisablingButton/upState/set' isStatic='false' isFinal='false' isOverride='true'  param_names='newState' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
</method>
<field name='_disabledState' fullname='com.threerings.flash:DisablingButton/protected:_disabledState' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
</field>
<field name='_mouseEnabled' fullname='com.threerings.flash:DisablingButton/protected:_mouseEnabled' type='Boolean' isStatic='false' isConst='false' defaultValue='true' >
</field>
<field name='_upState' fullname='com.threerings.flash:DisablingButton/protected:_upState' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
</field>
<classRec name='SimpleIconButton' fullname='com.threerings.flash:SimpleIconButton' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/SimpleIconButton.as' namespace='com.threerings.flash' access='public' baseclass='flash.display:SimpleButton' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Takes a BitmapData and makes a button that brightens on hover and depresses when pushed.
 ]]></description>
</classRec>
<method name='SimpleIconButton' fullname='com.threerings.flash:SimpleIconButton/SimpleIconButton' isStatic='false' isFinal='false' isOverride='false'  param_names='icon' param_types='' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Constructor. ]]></description>
<see><![CDATA[#setIcon()
     ]]></see>
</method>
<method name='setIcon' fullname='com.threerings.flash:SimpleIconButton/setIcon' isStatic='false' isFinal='false' isOverride='false'  param_names='icon' param_types='' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Update the icon for this button.
          ]]></description>
<param><![CDATA[icon a BitmapData, or Bitmap (from which the BitmapData will be extracted), or
                 a Class that instantiates into either a BitmapData or Bitmap.
     ]]></param>
</method>
<classRec name='SimpleTextButton' fullname='com.threerings.flash:SimpleTextButton' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/SimpleTextButton.as' namespace='com.threerings.flash' access='public' baseclass='flash.display:SimpleButton' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Displays a simple button with a rounded rectangle or rectangle for a face.
 ]]></description>
</classRec>
<method name='SimpleTextButton' fullname='com.threerings.flash:SimpleTextButton/SimpleTextButton' isStatic='false' isFinal='false' isOverride='false'  param_names='text;rounded;foreground;background;highlight;padding;textFormat' param_types='String;Boolean;uint;uint;uint;int;flash.text:TextFormat' param_defaults='undefined;true;0x003366;0x6699CC;0x0066FF;5;null' result_type='*'>
</method>
<method name='makeFace' fullname='com.threerings.flash:SimpleTextButton/protected:makeFace' isStatic='false' isFinal='false' isOverride='false'  param_names='text;rounded;foreground;background;padding;textFormat' param_types='String;Boolean;uint;uint;int;flash.text:TextFormat' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined' result_type='flash.display:Sprite'>
</method>
<classRec name='TextCharAnimation' fullname='com.threerings.flash:TextCharAnimation' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/TextCharAnimation.as' namespace='com.threerings.flash' access='public' baseclass='flash.display:Sprite' interfaces='com.threerings.flash:Animation' isFinal='false' isDynamic='false' >
</classRec>
<method name='TextCharAnimation' fullname='com.threerings.flash:TextCharAnimation/TextCharAnimation' isStatic='false' isFinal='false' isOverride='false'  param_names='text;fn;textArgs' param_types='String;Function;Object' param_defaults='undefined;undefined;undefined' result_type='*'>
</method>
<method name='updateAnimation' fullname='com.threerings.flash:TextCharAnimation/updateAnimation' isStatic='false' isFinal='false' isOverride='false'  param_names='elapsed' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<field name='_fn' fullname='com.threerings.flash:TextCharAnimation/protected:_fn' type='Function' isStatic='false' isConst='false' >
</field>
<field name='_texts' fullname='com.threerings.flash:TextCharAnimation/protected:_texts' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
</field>
<classRec name='FloatingTextAnimation' fullname='com.threerings.flash:FloatingTextAnimation' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/FloatingTextAnimation.as' namespace='com.threerings.flash' access='public' baseclass='flash.display:Sprite' interfaces='com.threerings.flash:Animation' isFinal='false' isDynamic='false' >
</classRec>
<method name='FloatingTextAnimation' fullname='com.threerings.flash:FloatingTextAnimation/FloatingTextAnimation' isStatic='false' isFinal='false' isOverride='false'  param_names='text;textArgs;duration;dy' param_types='String;Object;Number;int' param_defaults='undefined;null;1000;-10' result_type='*'>
</method>
<method name='updateAnimation' fullname='com.threerings.flash:FloatingTextAnimation/updateAnimation' isStatic='false' isFinal='false' isOverride='false'  param_names='elapsed' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='y' fullname='com.threerings.flash:FloatingTextAnimation/y/set' isStatic='false' isFinal='false' isOverride='true'  param_names='val' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<field name='_startY' fullname='com.threerings.flash:FloatingTextAnimation/protected:_startY' type='Number' isStatic='false' isConst='false' >
</field>
<field name='duration' fullname='com.threerings.flash:FloatingTextAnimation/duration' type='Number' isStatic='false' isConst='false' >
</field>
<field name='dy' fullname='com.threerings.flash:FloatingTextAnimation/dy' type='Number' isStatic='false' isConst='false' >
</field>
<classRec name='MediaContainer' fullname='com.threerings.flash:MediaContainer' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/MediaContainer.as' namespace='com.threerings.flash' access='public' baseclass='flash.display:Sprite' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A wrapper class for all media that will be placed on the screen.
 Subject to change.
 ]]></description>
<metadata>
	<Event owner='com.threerings.flash:MediaContainer' name='unload' type='flash.events.Event' >
<description><![CDATA[
 Dispatched when we've unloaded our content... always. The LoaderInfo's UNLOAD event
 is only dispatched if the INIT event has already been dispatched and not if you cancel a
 load before it INIT.
 ]]></description>
	</Event>
</metadata>
<metadata>
	<Event owner='com.threerings.flash:MediaContainer' name='complete' type='flash.events.Event' >
<description><![CDATA[
 Dispatched when we've shown new media.
  ]]></description>
<eventType><![CDATA[flash.events.Event.COMPLETE
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.threerings.flash:MediaContainer' name='init' type='flash.events.Event' >
<description><![CDATA[
 Dispatched when we've initialized our content. This is merely a redispatch
 of the INIT event we get from the loader.
  ]]></description>
<eventType><![CDATA[flash.events.Event.INIT
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.threerings.flash:MediaContainer' name='mediaSizeKnown' type='com.threerings.util.ValueEvent' >
<description><![CDATA[
 Dispatched when the size of the media being loaded is known.
  ]]></description>
<eventType><![CDATA[com.threerings.flash.MediaContainer.SIZE_KNOWN
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='MediaContainer' fullname='com.threerings.flash:MediaContainer/MediaContainer' isStatic='false' isFinal='false' isOverride='false'  param_names='url' param_types='String' param_defaults='null' result_type='*'>
<description><![CDATA[
     Constructor.
     ]]></description>
</method>
<method name='addListeners' fullname='com.threerings.flash:MediaContainer/protected:addListeners' isStatic='false' isFinal='false' isOverride='false'  param_names='info' param_types='flash.display:LoaderInfo' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Add our listeners to the LoaderInfo object.
     ]]></description>
</method>
<method name='configureMask' fullname='com.threerings.flash:MediaContainer/protected:configureMask' isStatic='false' isFinal='false' isOverride='false'  param_names='rect' param_types='flash.geom:Rectangle' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Configure the mask for this object.
     ]]></description>
</method>
<method name='containerDimensionsUpdated' fullname='com.threerings.flash:MediaContainer/containerDimensionsUpdated' isStatic='false' isFinal='false' isOverride='false'  param_names='newWidth;newHeight' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Called by MediaWrapper as notification that its size has changed.
     ]]></description>
</method>
<method name='contentDimensionsUpdated' fullname='com.threerings.flash:MediaContainer/protected:contentDimensionsUpdated' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Called when we know the true size of the content. Subclasses may override and use this
     opportunity to do their thing, too.
     ]]></description>
</method>
<method name='createVideoUI' fullname='com.threerings.flash:MediaContainer/protected:createVideoUI' isStatic='false' isFinal='false' isOverride='false'  param_names='player' param_types='com.threerings.flash.media:VideoPlayer' param_defaults='undefined' result_type='flash.display:DisplayObject'>
<description><![CDATA[
     Create the actual display for the VideoPlayer.
     ]]></description>
</method>
<method name='didShowNewMedia' fullname='com.threerings.flash:MediaContainer/protected:didShowNewMedia' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     A place where subclasses can configure things after we've setup new media.
     ]]></description>
</method>
<method name='getContentHeight' fullname='com.threerings.flash:MediaContainer/getContentHeight' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get the height of the content, bounded by the maximum.
     ]]></description>
</method>
<method name='getContentWidth' fullname='com.threerings.flash:MediaContainer/getContentWidth' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get the width of the content, bounded by the maximum.
     ]]></description>
</method>
<method name='getContext' fullname='com.threerings.flash:MediaContainer/protected:getContext' isStatic='false' isFinal='false' isOverride='false'  param_names='url' param_types='String' param_defaults='undefined' result_type='flash.system:LoaderContext'>
<description><![CDATA[
     Return the LoaderContext that should be used to load the media
     at the specified url.
     ]]></description>
</method>
<method name='getMaskRectangle' fullname='com.threerings.flash:MediaContainer/protected:getMaskRectangle' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Rectangle'>
<description><![CDATA[
     Get the mask area, or null if no mask is needed.
     ]]></description>
</method>
<method name='getMaxContentHeight' fullname='com.threerings.flash:MediaContainer/getMaxContentHeight' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get the maximum allowable height for our content.
     ]]></description>
</method>
<method name='getMaxContentWidth' fullname='com.threerings.flash:MediaContainer/getMaxContentWidth' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get the maximum allowable width for our content.
     ]]></description>
</method>
<method name='getMedia' fullname='com.threerings.flash:MediaContainer/getMedia' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
<description><![CDATA[
     Get the media. If the media was loaded using a URL, this will
     likely be the Loader object holding the real media.
     ]]></description>
</method>
<method name='getMediaScaleX' fullname='com.threerings.flash:MediaContainer/getMediaScaleX' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Get the X scaling factor to use on the actual media.
     ]]></description>
</method>
<method name='getMediaScaleY' fullname='com.threerings.flash:MediaContainer/getMediaScaleY' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Get the Y scaling factor to use on the actual media.
     ]]></description>
</method>
<method name='getSecurityDomain' fullname='com.threerings.flash:MediaContainer/protected:getSecurityDomain' isStatic='false' isFinal='false' isOverride='false'  param_names='imageURL' param_types='String' param_defaults='undefined' result_type='flash.system:SecurityDomain'>
<description><![CDATA[
     Return the security domain to use for the specified image url.
     ]]></description>
</method>
<method name='handleComplete' fullname='com.threerings.flash:MediaContainer/protected:handleComplete' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Callback function to receive COMPLETE events for swfs or images.
     ]]></description>
</method>
<method name='handleError' fullname='com.threerings.flash:MediaContainer/protected:handleError' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:ErrorEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     A callback to receive IO_ERROR and SECURITY_ERROR events.
     ]]></description>
</method>
<method name='handleInit' fullname='com.threerings.flash:MediaContainer/protected:handleInit' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Handles the INIT event for content loaded with a Loader.
     ]]></description>
</method>
<method name='handleProgress' fullname='com.threerings.flash:MediaContainer/protected:handleProgress' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:ProgressEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     A callback to receive PROGRESS events.
     ]]></description>
</method>
<method name='handleShutdownOnRemove' fullname='com.threerings.flash:MediaContainer/protected:handleShutdownOnRemove' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Handle shutting us down when we're removed. Only called if
     setShutdownOnRemove() was enabled.
     ]]></description>
</method>
<method name='hitTestPoint' fullname='com.threerings.flash:MediaContainer/hitTestPoint' isStatic='false' isFinal='false' isOverride='true'  param_names='x;y;shapeFlag' param_types='Number;Number;Boolean' param_defaults='undefined;undefined;false' result_type='Boolean'>
<description><![CDATA[
     Note: This method is NOT used in normal mouseOver calculations.
     Normal mouseOver stuff seems to be completely broken for transparent
     images: the transparent portion is a 'hit'. I've (Ray) tried
     just about everything to fix this, more than once.
          But if someone oescall this method (we do, in whirled), then
     attempt to do the right thing.
     ]]></description>
</method>
<method name='initLoader' fullname='com.threerings.flash:MediaContainer/protected:initLoader' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:Loader'>
<description><![CDATA[
     Initialize a Loader as our _media, and configure it however needed to prepare
     loading user content.
     ]]></description>
</method>
<method name='isContentInitialized' fullname='com.threerings.flash:MediaContainer/isContentInitialized' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Return true if the content has been initialized.
     For most content, this is true if the media is non-null, but
     for anything loaded with a Loader, it is only true after the INIT event is dispatched.
     ]]></description>
</method>
<method name='isImage' fullname='com.threerings.flash:MediaContainer/protected:isImage' isStatic='false' isFinal='false' isOverride='false'  param_names='url' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Does the specified url represent an image?
     ]]></description>
</method>
<method name='removeListeners' fullname='com.threerings.flash:MediaContainer/protected:removeListeners' isStatic='false' isFinal='false' isOverride='false'  param_names='info' param_types='flash.display:LoaderInfo' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Remove our listeners from the LoaderInfo object.
     ]]></description>
</method>
<method name='setMedia' fullname='com.threerings.flash:MediaContainer/setMedia' isStatic='false' isFinal='false' isOverride='false'  param_names='url' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Configure the media to display.
     ]]></description>
</method>
<method name='setMediaBytes' fullname='com.threerings.flash:MediaContainer/setMediaBytes' isStatic='false' isFinal='false' isOverride='false'  param_names='bytes' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Set the media to display as a ByteArray.
     ]]></description>
</method>
<method name='setMediaClass' fullname='com.threerings.flash:MediaContainer/setMediaClass' isStatic='false' isFinal='false' isOverride='false'  param_names='clazz' param_types='Class' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Configure our media as an instance of the specified class.
     ]]></description>
</method>
<method name='setMediaObject' fullname='com.threerings.flash:MediaContainer/setMediaObject' isStatic='false' isFinal='false' isOverride='false'  param_names='disp' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Configure an already-instantiated DisplayObject as our media.
     ]]></description>
</method>
<method name='setShutdownOnRemove' fullname='com.threerings.flash:MediaContainer/setShutdownOnRemove' isStatic='false' isFinal='false' isOverride='false'  param_names='enable' param_types='Boolean' param_defaults='true' result_type='void'>
<description><![CDATA[
     Sets whether this MediaContainer automatically shuts down when removed
     from the stage. By default this is not enabled.
     ]]></description>
</method>
<method name='setupBrokenImage' fullname='com.threerings.flash:MediaContainer/protected:setupBrokenImage' isStatic='false' isFinal='false' isOverride='false'  param_names='w;h' param_types='int;int' param_defaults='-1;-1' result_type='void'>
<description><![CDATA[
     Display a 'broken image' to indicate there were troubles with
     loading the media.
     ]]></description>
</method>
<method name='setupSwfOrImage' fullname='com.threerings.flash:MediaContainer/protected:setupSwfOrImage' isStatic='false' isFinal='false' isOverride='false'  param_names='url' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Configure this sprite to show an image or flash movie.
     ]]></description>
</method>
<method name='setupVideo' fullname='com.threerings.flash:MediaContainer/protected:setupVideo' isStatic='false' isFinal='false' isOverride='false'  param_names='url' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Configure this sprite to show a video.
     ]]></description>
</method>
<method name='showNewMedia' fullname='com.threerings.flash:MediaContainer/protected:showNewMedia' isStatic='false' isFinal='false' isOverride='false'  param_names='url' param_types='String' param_defaults='undefined' result_type='void'>
</method>
<method name='shutdown' fullname='com.threerings.flash:MediaContainer/shutdown' isStatic='false' isFinal='false' isOverride='false'  param_names='completely' param_types='Boolean' param_defaults='true' result_type='void'>
<description><![CDATA[
     Unload the media we're displaying, clean up any resources.
          ]]></description>
<param><![CDATA[completely if true, we're going away and should stop
     everything. Otherwise, we're just loading up new media.
     ]]></param>
</method>
<method name='shutdownMedia' fullname='com.threerings.flash:MediaContainer/protected:shutdownMedia' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Do whatever is necessary to shut down the media.
     ]]></description>
</method>
<method name='startedLoading' fullname='com.threerings.flash:MediaContainer/protected:startedLoading' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Called when we've started loading new media. Will not be called
     for new media that does not require loading.
     ]]></description>
</method>
<method name='stoppedLoading' fullname='com.threerings.flash:MediaContainer/protected:stoppedLoading' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Called when we've stopped loading, which may be as a result of
     completion, an error while loading, or early termination.
     ]]></description>
</method>
<method name='toString' fullname='com.threerings.flash:MediaContainer/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='updateContentDimensions' fullname='com.threerings.flash:MediaContainer/protected:updateContentDimensions' isStatic='false' isFinal='false' isOverride='false'  param_names='ww;hh' param_types='int;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Called during loading as we figure out how big the content we're
     loading is.
     ]]></description>
</method>
<method name='updateLoadingProgress' fullname='com.threerings.flash:MediaContainer/protected:updateLoadingProgress' isStatic='false' isFinal='false' isOverride='false'  param_names='soFar;total' param_types='Number;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Update the graphics to indicate how much is loaded.
     ]]></description>
</method>
<method name='willShowNewMedia' fullname='com.threerings.flash:MediaContainer/protected:willShowNewMedia' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     A place where subclasses can initialize things prior to showing new media.
     ]]></description>
</method>
<field name='SIZE_KNOWN' fullname='com.threerings.flash:MediaContainer/SIZE_KNOWN' type='String' isStatic='true' isConst='true' defaultValue='mediaSizeKnown' >
<description><![CDATA[ A ValueEvent we dispatch when our size is known.
     Value: [ width, height ].
          ]]></description>
<eventType><![CDATA[mediaSizeKnown
     ]]></eventType>
</field>
<field name='_h' fullname='com.threerings.flash:MediaContainer/protected:_h' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ The unscaled height of our content. ]]></description>
</field>
<field name='_initialized' fullname='com.threerings.flash:MediaContainer/protected:_initialized' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ If we're using a Loader, true once the INIT event has been dispatched. ]]></description>
</field>
<field name='_isImage' fullname='com.threerings.flash:MediaContainer/protected:_isImage' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ Are we displaying an image? ]]></description>
</field>
<field name='_media' fullname='com.threerings.flash:MediaContainer/protected:_media' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
<description><![CDATA[ Either a Loader or a VideoDisplay. ]]></description>
</field>
<field name='_url' fullname='com.threerings.flash:MediaContainer/protected:_url' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ The unaltered URL of the content we're displaying. ]]></description>
</field>
<field name='_w' fullname='com.threerings.flash:MediaContainer/protected:_w' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ The unscaled width of our content. ]]></description>
</field>
<field name='log' fullname='com.threerings.flash:MediaContainer/protected:log' type='com.threerings.util:Log' isStatic='true' isConst='true' defaultValue='' >
<description><![CDATA[ A log instance that can be shared by sprites. ]]></description>
</field>
<classRec name='FrameSprite' fullname='com.threerings.flash:FrameSprite' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/FrameSprite.as' namespace='com.threerings.flash' access='public' baseclass='flash.display:Sprite' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Convenience superclass to use for sprites that need to update every frame.
 (One must be very careful to remove all ENTER_FRAME listeners when not needed, as they
 will prevent an object from being garbage collected!)
 ]]></description>
</classRec>
<method name='FrameSprite' fullname='com.threerings.flash:FrameSprite/FrameSprite' isStatic='false' isFinal='false' isOverride='false'  param_names='renderFrameUponAdding' param_types='Boolean' param_defaults='true' result_type='*'>
<description><![CDATA[
     ]]></description>
<param><![CDATA[renderFrameUponAdding if true, the handleFrame() method
            is called whenever an ADDED_TO_STAGE event is received.
     ]]></param>
</method>
<method name='handleAdded' fullname='com.threerings.flash:FrameSprite/protected:handleAdded' isStatic='false' isFinal='false' isOverride='false'  param_names='ignored' param_types='restParam' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Called when we're added to the stage.
     ]]></description>
</method>
<method name='handleFrame' fullname='com.threerings.flash:FrameSprite/protected:handleFrame' isStatic='false' isFinal='false' isOverride='false'  param_names='ignored' param_types='restParam' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Called to update our visual appearance prior to each frame.
     ]]></description>
</method>
<method name='handleRemoved' fullname='com.threerings.flash:FrameSprite/protected:handleRemoved' isStatic='false' isFinal='false' isOverride='false'  param_names='ignored' param_types='restParam' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Called when we're added to the stage.
     ]]></description>
</method>
<field name='_renderOnAdd' fullname='com.threerings.flash:FrameSprite/protected:_renderOnAdd' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ Should we call handleFrame() when we get ADDED_TO_STAGE? ]]></description>
</field>
<classRec name='CameraSnapshotter' fullname='com.threerings.flash:CameraSnapshotter' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/CameraSnapshotter.as' namespace='com.threerings.flash' access='public' baseclass='flash.display:Sprite' isFinal='false' isDynamic='false' >
</classRec>
<method name='CameraSnapshotter' fullname='com.threerings.flash:CameraSnapshotter/CameraSnapshotter' isStatic='false' isFinal='false' isOverride='false'  param_names='cameraName' param_types='String' param_defaults='null' result_type='*'>
<description><![CDATA[
     ]]></description>
<see><![CDATA[setCamera
     ]]></see>
</method>
<method name='attachVideo' fullname='com.threerings.flash:CameraSnapshotter/protected:attachVideo' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='clearSnapshot' fullname='com.threerings.flash:CameraSnapshotter/clearSnapshot' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='detachVideo' fullname='com.threerings.flash:CameraSnapshotter/protected:detachVideo' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='getCameraName' fullname='com.threerings.flash:CameraSnapshotter/getCameraName' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
</method>
<method name='getSnapshot' fullname='com.threerings.flash:CameraSnapshotter/getSnapshot' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:BitmapData'>
</method>
<method name='handleCameraStatus' fullname='com.threerings.flash:CameraSnapshotter/protected:handleCameraStatus' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:StatusEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='hasCamera' fullname='com.threerings.flash:CameraSnapshotter/hasCamera' isStatic='true' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Static method to determine if the user even has a camera.
     ]]></description>
</method>
<method name='setCamera' fullname='com.threerings.flash:CameraSnapshotter/setCamera' isStatic='false' isFinal='false' isOverride='false'  param_names='camera' param_types='flash.media:Camera' param_defaults='undefined' result_type='void'>
</method>
<method name='setCameraName' fullname='com.threerings.flash:CameraSnapshotter/setCameraName' isStatic='false' isFinal='false' isOverride='false'  param_names='cameraName' param_types='String' param_defaults='null' result_type='void'>
<description><![CDATA[
     ]]></description>
<param><![CDATA[cameraName the actual name of the camera, not the index (as used to get it from
     the Camera class).
     ]]></param>
</method>
<method name='setCorrection' fullname='com.threerings.flash:CameraSnapshotter/protected:setCorrection' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     There appears to be a bug with the camera that "locks" it to the size it was at when
     it was unmuted.
     ]]></description>
</method>
<method name='setMode' fullname='com.threerings.flash:CameraSnapshotter/setMode' isStatic='false' isFinal='false' isOverride='false'  param_names='width;height;fps;favorArea' param_types='int;int;Number;Boolean' param_defaults='undefined;undefined;undefined;true' result_type='void'>
<description><![CDATA[
     Just like Camera's setMode().
     ]]></description>
<see><![CDATA[flash.media.Camera#setMode()
     ]]></see>
</method>
<method name='takeSnapshot' fullname='com.threerings.flash:CameraSnapshotter/takeSnapshot' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='height' fullname='com.threerings.flash:CameraSnapshotter/height/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Number'>
</method>
<method name='width' fullname='com.threerings.flash:CameraSnapshotter/width/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Number'>
</method>
<field name='_bitmap' fullname='com.threerings.flash:CameraSnapshotter/protected:_bitmap' type='flash.display:Bitmap' isStatic='false' isConst='false' >
</field>
<field name='_camera' fullname='com.threerings.flash:CameraSnapshotter/protected:_camera' type='flash.media:Camera' isStatic='false' isConst='false' >
</field>
<field name='_correctionHeight' fullname='com.threerings.flash:CameraSnapshotter/protected:_correctionHeight' type='int' isStatic='false' isConst='false' >
</field>
<field name='_correctionWidth' fullname='com.threerings.flash:CameraSnapshotter/protected:_correctionWidth' type='int' isStatic='false' isConst='false' >
</field>
<field name='_video' fullname='com.threerings.flash:CameraSnapshotter/protected:_video' type='flash.media:Video' isStatic='false' isConst='false' >
</field>
<classRec name='SiningTextAnimation' fullname='com.threerings.flash:SiningTextAnimation' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/SiningTextAnimation.as' namespace='com.threerings.flash' access='public' baseclass='com.threerings.flash:TextCharAnimation' isFinal='false' isDynamic='false' >
</classRec>
<method name='SiningTextAnimation' fullname='com.threerings.flash:SiningTextAnimation/SiningTextAnimation' isStatic='false' isFinal='false' isOverride='false'  param_names='text;textArgs' param_types='String;Object' param_defaults='undefined;undefined' result_type='*'>
</method>
<method name='movementFn' fullname='com.threerings.flash:SiningTextAnimation/protected:movementFn' isStatic='false' isFinal='false' isOverride='false'  param_names='elapsed;index' param_types='Number;Number' param_defaults='undefined;undefined' result_type='Number'>
</method>
<interfaceRec name='MessageSubControl' fullname='com.whirled.net:MessageSubControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/net/MessageSubControl.as' namespace='com.whirled.net' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides message passing functionality to a set of listener(s), e.g. other clients
 and/or the server agent, if one is employed.
 ]]></description>
</interfaceRec>
<method name='sendMessage' fullname='com.whirled.net:MessageSubControl/com.whirled.net:MessageSubControl:sendMessage' isStatic='false' isFinal='false' isOverride='false'  param_names='name;value' param_types='String;Object' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Send a "message" to the listener(s) associated with this control. If the recipient is
     listening for messages, they can react to it. This is similar to setting a property,
     except the value is not automatically saved -- it will just be sent along with the
     message.
          ]]></description>
<param><![CDATA[messageName The message to send.
     ]]></param>
<param><![CDATA[value The value to attach to the message.
     ]]></param>
</method>
<classRec name='NetConstants' fullname='com.whirled.net:NetConstants' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/net/NetConstants.as' namespace='com.whirled.net' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<method name='makePersistent' fullname='com.whirled.net:NetConstants/makePersistent' isStatic='true' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Transform a name to a persistent name. Has no effect for names that
     are already persistent.
     ]]></description>
</method>
<method name='makeTransient' fullname='com.whirled.net:NetConstants/makeTransient' isStatic='true' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Transforms a persistent name back to a transient one. Has no effect for names
     that aren't already persistent.
     ]]></description>
</method>
<field name='PERSISTENT' fullname='com.whirled.net:NetConstants/PERSISTENT' type='String' isStatic='true' isConst='true' defaultValue='@' >
<description><![CDATA[ Properties beginning with this string will be restored on the next session. ]]></description>
</field>
<interfaceRec name='PropertyGetSubControl' fullname='com.whirled.net:PropertyGetSubControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/net/PropertyGetSubControl.as' namespace='com.whirled.net' access='public' baseClasses='flash.events:IEventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides the ability to read game state in the form of named properties which are
 automatically shared between players and, potentially, the server agent.
 ]]></description>
<metadata>
	<Event owner='com.whirled.net:PropertyGetSubControl' name='ElemChanged' type='com.whirled.net.ElementChangedEvent' >
<description><![CDATA[
 Dispatched when an element inside a property has changed in the shared game state.
 This event is a result of calling setIn() or setAt().
  ]]></description>
<eventType><![CDATA[com.whirled.game.ElementChangedEvent.ELEMENT_CHANGED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.net:PropertyGetSubControl' name='PropChanged' type='com.whirled.net.PropertyChangedEvent' >
<description><![CDATA[
 Dispatched when a property has changed in the shared game state. This event is a result
 of calling set() or testAndSet().
  ]]></description>
<eventType><![CDATA[com.whirled.game.PropertyChangedEvent.PROPERTY_CHANGED
 ]]></eventType>
	</Event>
</metadata>
</interfaceRec>
<method name='get' fullname='com.whirled.net:PropertyGetSubControl/com.whirled.net:PropertyGetSubControl:get' isStatic='false' isFinal='false' isOverride='false'  param_names='propName' param_types='String' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
     Get a property value. Calling this method results in no network traffic, it just
     examines values that have already arrived over the network to this client.
          ]]></description>
<param><![CDATA[propName the name of the property to retrieve.
     ]]></param>
<return><![CDATA[the property value, or null if there is no property with that name.
     ]]></return>
</method>
<method name='getPropertyNames' fullname='com.whirled.net:PropertyGetSubControl/com.whirled.net:PropertyGetSubControl:getPropertyNames' isStatic='false' isFinal='false' isOverride='false'  param_names='prefix' param_types='String' param_defaults='' result_type='Array'>
<description><![CDATA[
     Get the names of all currently-set properties that begin with the specified prefix.
     Calling this method results in no network traffic.
     ]]></description>
</method>
<method name='getTargetId' fullname='com.whirled.net:PropertyGetSubControl/com.whirled.net:PropertyGetSubControl:getTargetId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get the targetId on which this control operates.
     ]]></description>
</method>
<classRec name='MessageReceivedEvent' fullname='com.whirled.net:MessageReceivedEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/net/MessageReceivedEvent.as' namespace='com.whirled.net' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Dispatched on the 'net' subcontrol when a message is sent by any client.
 ]]></description>
</classRec>
<method name='MessageReceivedEvent' fullname='com.whirled.net:MessageReceivedEvent/MessageReceivedEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='messageName;value;senderId' param_types='String;Object;int' param_defaults='undefined;undefined;undefined' result_type='*'>
</method>
<method name='clone' fullname='com.whirled.net:MessageReceivedEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
</method>
<method name='isFromServer' fullname='com.whirled.net:MessageReceivedEvent/isFromServer' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Returns true if the message was sent by the whirled game server or by the game's server 
     agent.
     ]]></description>
</method>
<method name='toString' fullname='com.whirled.net:MessageReceivedEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='name' fullname='com.whirled.net:MessageReceivedEvent/name/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Access the message name.
     ]]></description>
</method>
<method name='senderId' fullname='com.whirled.net:MessageReceivedEvent/senderId/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Access the id of the occupant that sent the message. The value may not correspond to a real 
     occupant id if <code>isFromServer</code> returns true.
     ]]></description>
<see><![CDATA[#isFromServer()
     ]]></see>
</method>
<method name='value' fullname='com.whirled.net:MessageReceivedEvent/value/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Access the message value.
     ]]></description>
</method>
<field name='MESSAGE_RECEIVED' fullname='com.whirled.net:MessageReceivedEvent/MESSAGE_RECEIVED' type='String' isStatic='true' isConst='true' defaultValue='MsgReceived' >
<description><![CDATA[
     The type of all MessageReceivedEvents.
          ]]></description>
<eventType><![CDATA[MsgReceived
     ]]></eventType>
</field>
<field name='SERVER_AGENT_ID' fullname='com.whirled.net:MessageReceivedEvent/protected:SERVER_AGENT_ID' type='int' isStatic='true' isConst='true' defaultValue='-2.147483648E9' >
<description><![CDATA[ 
     Sender id indicating that the message is from the game's server agent. 
     TODO: does this need to be public?
     ]]></description>
</field>
<field name='SERVER_ID' fullname='com.whirled.net:MessageReceivedEvent/protected:SERVER_ID' type='int' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[ 
     Sender id indicating that the message is from the whirled game server.
     TODO: does this need to be public?
     ]]></description>
</field>
<field name='_name' fullname='com.whirled.net:MessageReceivedEvent/protected:_name' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_senderId' fullname='com.whirled.net:MessageReceivedEvent/protected:_senderId' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_value' fullname='com.whirled.net:MessageReceivedEvent/protected:_value' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='PropertyChangedEvent' fullname='com.whirled.net:PropertyChangedEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/net/PropertyChangedEvent.as' namespace='com.whirled.net' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Property change events are dispatched after the property change was
 validated on the server.
 ]]></description>
</classRec>
<method name='PropertyChangedEvent' fullname='com.whirled.net:PropertyChangedEvent/PropertyChangedEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;propName;newValue;oldValue' param_types='String;String;Object;Object' param_defaults='undefined;undefined;undefined;undefined' result_type='*'>
<description><![CDATA[
     Constructor.
     ]]></description>
</method>
<method name='clone' fullname='com.whirled.net:PropertyChangedEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
</method>
<method name='toString' fullname='com.whirled.net:PropertyChangedEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='name' fullname='com.whirled.net:PropertyChangedEvent/name/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Get the name of the property that changed.
     ]]></description>
</method>
<method name='newValue' fullname='com.whirled.net:PropertyChangedEvent/newValue/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Get the property's new value.
     Note: if index is not -1 then this value is merely one element in an array that
     may be fully accessed using the 'net' subcontrol.
     ]]></description>
</method>
<method name='oldValue' fullname='com.whirled.net:PropertyChangedEvent/oldValue/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Get the property's previous value (handy!).
     ]]></description>
</method>
<field name='PROPERTY_CHANGED' fullname='com.whirled.net:PropertyChangedEvent/PROPERTY_CHANGED' type='String' isStatic='true' isConst='true' defaultValue='PropChanged' >
<description><![CDATA[
     The type of a property change event.
          ]]></description>
<eventType><![CDATA[PropChanged
     ]]></eventType>
</field>
<field name='_name' fullname='com.whirled.net:PropertyChangedEvent/protected:_name' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_newValue' fullname='com.whirled.net:PropertyChangedEvent/protected:_newValue' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_oldValue' fullname='com.whirled.net:PropertyChangedEvent/protected:_oldValue' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<interfaceRec name='PropertySubControl' fullname='com.whirled.net:PropertySubControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/net/PropertySubControl.as' namespace='com.whirled.net' access='public' baseClasses='com.whirled.net:PropertyGetSubControl' isFinal='false' isDynamic='false' >
</interfaceRec>
<method name='set' fullname='com.whirled.net:PropertySubControl/com.whirled.net:PropertySubControl:set' isStatic='false' isFinal='false' isOverride='false'  param_names='propName;value;immediate' param_types='String;Object;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
     Set a property value to be distributed to the other clients in this game.
     Property values can be any of the primitive types: int, uint, Number, Boolean, String,
     ByteArray; or you may set Arrays, Dictionarys, or plain old Objects, as long as
     the values within them are primitive types or other Arrays, Dictionarys and Objects.
          <p>You may not set your own classes as properties. However, you can serialize your data
     into a ByteArray and set that.</p>
     
     <p><b>Note</b>: top-level Dictionarys must have int keys, the intention is to use
     occupantIds as keys.</p>
          <p>Note that if you set the value as an Array or Dictionary, the value is serialized
     slightly differently in order to enable updating individual elements efficiently.
     The individual elements will be serialized separately. You may update the elements
     individually by using either setAt (for Arrays) or setIn (for Dictionarys). The
     effect of serializing elements individually is that references to the same object will
     not be reconstructed off the network as references to the same object. See the example
     below.</p>
          ]]></description>
<example><![CDATA[     <listing version="3.0">
     // demonstrates expert-level difference between setting values in an array and an object.
     var o :Object = { blue: true };
     var objTest :Object = { 0: o, 1: o};
     var arrayTest :Array = [ o, o ];
     _ctrl.net.set("object", objTest);
     _ctrl.net.set("array", arrayTest);
     
     // Later, when reading those values back out:
     var obj :Object = _ctrl.net.get("object");
     var array :Array = _ctrl.net.get("array") as Array;
     trace("array: " + (array[0] == array[1])); // traces false
     trace("object: " + (obj[0] == obj[1])); // traces true
     </listing>
          ]]></example>
<param><![CDATA[propName the name of the property to set.
     ]]></param>
<param><![CDATA[value the value to set. Passing null clears the property.
     ]]></param>
<param><![CDATA[immediate if true, the value is updated immediately in the local object. Otherwise
     any old value will remain in effect until the PropertyChangedEvent arrives after
     a round-trip to the server.
     
     ]]></param>
<see><![CDATA[Array
     ]]></see>
<see><![CDATA[flash.utils.Dictionary
     ]]></see>
<see><![CDATA[#setAt()
     ]]></see>
<see><![CDATA[#setIn()
     ]]></see>
</method>
<method name='setAt' fullname='com.whirled.net:PropertySubControl/com.whirled.net:PropertySubControl:setAt' isStatic='false' isFinal='false' isOverride='false'  param_names='propName;index;value;immediate' param_types='String;int;Object;Boolean' param_defaults='undefined;undefined;undefined;false' result_type='void'>
<description><![CDATA[
     Update one element of an Array.<br/>
     <b>Note</b>: Unlike setIn(), this update will fail silently if the index is out of
     bounds or if there is no array currently set at the specified property name.
     Furthermore, if you set the element with immediate=true, there are two updates:
     one locally that happens right away and the update on the server that will be
     dispatched back to all the clients. Either or both can fail, so be sure to set the Array up
     first using set().
          ]]></description>
<param><![CDATA[propName the name of the property to modify.
     ]]></param>
<param><![CDATA[index the array index of the element to update.
     ]]></param>
<param><![CDATA[value the value to set.
     ]]></param>
<param><![CDATA[immediate if true, the value is updated immediately in the local object. Otherwise
     any old value will remain in effect until the ElementChangedEvent arrives after
     a round-trip to the server.
          ]]></param>
<see><![CDATA[#set()
     ]]></see>
</method>
<method name='setIn' fullname='com.whirled.net:PropertySubControl/com.whirled.net:PropertySubControl:setIn' isStatic='false' isFinal='false' isOverride='false'  param_names='propName;key;value;immediate' param_types='String;int;Object;Boolean' param_defaults='undefined;undefined;undefined;false' result_type='void'>
<description><![CDATA[
     Update one element of a Dictionary.<br/>
     <b>Note</b>: Unlike setAt(), this will usually work. No key is out of range, obviously,
     and if you set a value in a property that was previously null, a new Dictionary will
     be created to hold your value. If a non-Dictionary property is already stored with the
     specified name then this will fail silently on the server. But: don't do that!
     It would be pretty bad style to store two different types of property under the same name.
          ]]></description>
<param><![CDATA[propName the name of the property to modify.
     ]]></param>
<param><![CDATA[key the key of the element to update.
     ]]></param>
<param><![CDATA[value the value to set. Passing null removes the specified key from the Dictionary.
     ]]></param>
<param><![CDATA[immediate if true, the value is updated immediately in the local object. Otherwise
     any old value will remain in effect until the ElementChangedEvent arrives after
     a round-trip to the server.
     ]]></param>
</method>
<classRec name='ElementChangedEvent' fullname='com.whirled.net:ElementChangedEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/net/ElementChangedEvent.as' namespace='com.whirled.net' access='public' baseclass='com.whirled.net:PropertyChangedEvent' isFinal='false' isDynamic='false' >
<description><![CDATA[
 An event dispatched when a single element is updated in an Array or Dictionary
 property as a result of calling setAt() or setIn().
 ]]></description>
</classRec>
<method name='ElementChangedEvent' fullname='com.whirled.net:ElementChangedEvent/ElementChangedEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;propName;newValue;oldValue;key' param_types='String;String;Object;Object;int' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='*'>
<description><![CDATA[
     Constructor.
     ]]></description>
</method>
<method name='clone' fullname='com.whirled.net:ElementChangedEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
</method>
<method name='toString' fullname='com.whirled.net:ElementChangedEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='index' fullname='com.whirled.net:ElementChangedEvent/index/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get the index (key) of the change.
     ]]></description>
</method>
<method name='key' fullname='com.whirled.net:ElementChangedEvent/key/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get the key (index) of the change.
     ]]></description>
</method>
<field name='ELEMENT_CHANGED' fullname='com.whirled.net:ElementChangedEvent/ELEMENT_CHANGED' type='String' isStatic='true' isConst='true' defaultValue='ElemChanged' >
<description><![CDATA[
     The type of an ElementChangedEvent.
          ]]></description>
<eventType><![CDATA[ElemChanged
     ]]></eventType>
</field>
<field name='_key' fullname='com.whirled.net:ElementChangedEvent/protected:_key' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='MediaPlayerCodes' fullname='com.threerings.flash.media:MediaPlayerCodes' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/media/MediaPlayerCodes.as' namespace='com.threerings.flash.media' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
</classRec>
<field name='DURATION' fullname='com.threerings.flash.media:MediaPlayerCodes/DURATION' type='String' isStatic='true' isConst='true' defaultValue='duration' >
</field>
<field name='ERROR' fullname='com.threerings.flash.media:MediaPlayerCodes/ERROR' type='String' isStatic='true' isConst='true' defaultValue='error' >
</field>
<field name='METADATA' fullname='com.threerings.flash.media:MediaPlayerCodes/METADATA' type='String' isStatic='true' isConst='true' defaultValue='metadata' >
</field>
<field name='POSITION' fullname='com.threerings.flash.media:MediaPlayerCodes/POSITION' type='String' isStatic='true' isConst='true' defaultValue='position' >
</field>
<field name='SIZE' fullname='com.threerings.flash.media:MediaPlayerCodes/SIZE' type='String' isStatic='true' isConst='true' defaultValue='size' >
<description><![CDATA[ Only applicable for VideoPlayer. ]]></description>
</field>
<field name='STATE' fullname='com.threerings.flash.media:MediaPlayerCodes/STATE' type='String' isStatic='true' isConst='true' defaultValue='state' >
</field>
<field name='STATE_PAUSED' fullname='com.threerings.flash.media:MediaPlayerCodes/STATE_PAUSED' type='int' isStatic='true' isConst='true' defaultValue='3' >
</field>
<field name='STATE_PLAYING' fullname='com.threerings.flash.media:MediaPlayerCodes/STATE_PLAYING' type='int' isStatic='true' isConst='true' defaultValue='2' >
</field>
<field name='STATE_READY' fullname='com.threerings.flash.media:MediaPlayerCodes/STATE_READY' type='int' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[ Indicates we're ready to play. ]]></description>
</field>
<field name='STATE_STOPPED' fullname='com.threerings.flash.media:MediaPlayerCodes/STATE_STOPPED' type='int' isStatic='true' isConst='true' defaultValue='4' >
<description><![CDATA[ Indicates that the playhead reached the end and the media has stopped. ]]></description>
</field>
<field name='STATE_UNREADY' fullname='com.threerings.flash.media:MediaPlayerCodes/STATE_UNREADY' type='int' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[ Indicates we're still loading or initializing. ]]></description>
</field>
<interfaceRec name='MediaPlayer' fullname='com.threerings.flash.media:MediaPlayer' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/media/MediaPlayer.as' namespace='com.threerings.flash.media' access='public' baseClasses='flash.events:IEventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Implemented by media-playing backends.
 ]]></description>
<metadata>
	<Event owner='com.threerings.flash.media:MediaPlayer' name='error' type='com.threerings.util.ValueEvent' >
<description><![CDATA[
 Dispatched when there's a problem.
 <b>value</b>: a String error code/message.
  ]]></description>
<eventType><![CDATA[com.threerings.flash.media.MediaPlayerCodes.ERROR
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.threerings.flash.media:MediaPlayer' name='metadata' type='com.threerings.util.ValueEvent' >
<description><![CDATA[
 Dispatched when media metadata is available, if ever.
 <b>value</b>: metadata object. ]]></description>
<eventType><![CDATA[com.threerings.flash.media.MediaPlayerCodes.METADATA
 ]]></eventType>
<see><![CDATA[getMetadata() for more info.
  ]]></see>
	</Event>
</metadata>
<metadata>
	<Event owner='com.threerings.flash.media:MediaPlayer' name='position' type='com.threerings.util.ValueEvent' >
<description><![CDATA[
 Dispatched periodically as the position is updated, during playback.
 <b>value</b>: a Number expressing the position in seconds.
  ]]></description>
<eventType><![CDATA[com.threerings.flash.media.MediaPlayerCodes.POSITION
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.threerings.flash.media:MediaPlayer' name='duration' type='com.threerings.util.ValueEvent' >
<description><![CDATA[
 Dispatched when the total duration of the media is known.
 <b>value</b>: a Number expressing the duration in seconds.
  ]]></description>
<eventType><![CDATA[com.threerings.flash.media.MediaPlayerCodes.DURATION
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.threerings.flash.media:MediaPlayer' name='state' type='com.threerings.util.ValueEvent' >
<description><![CDATA[
 Dispatched when the state of the mediaplayer changes, usually in response to commands
 such as play/pause, etc.
 <b>value</b>: an int state. ]]></description>
<eventType><![CDATA[com.threerings.flash.media.MediaPlayerCodes.STATE
 ]]></eventType>
<see><![CDATA[MediaPlayerCodes
  ]]></see>
	</Event>
</metadata>
</interfaceRec>
<method name='getDuration' fullname='com.threerings.flash.media:MediaPlayer/com.threerings.flash.media:MediaPlayer:getDuration' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Get the duration of the media, in seconds, or NaN if not yet known.
     ]]></description>
</method>
<method name='getMetadata' fullname='com.threerings.flash.media:MediaPlayer/com.threerings.flash.media:MediaPlayer:getMetadata' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Get metadata, or null if none or not yet available. The exact format of this data
     object varies by MediaPlayer implementation, see the documentation for each.
     ]]></description>
</method>
<method name='getPosition' fullname='com.threerings.flash.media:MediaPlayer/com.threerings.flash.media:MediaPlayer:getPosition' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Get the position of the media, in seconds, or NaN if not yet ready.
     ]]></description>
</method>
<method name='getState' fullname='com.threerings.flash.media:MediaPlayer/com.threerings.flash.media:MediaPlayer:getState' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     ]]></description>
<return><![CDATA[a MediaPlayerCodes state constant.
     ]]></return>
</method>
<method name='getVolume' fullname='com.threerings.flash.media:MediaPlayer/com.threerings.flash.media:MediaPlayer:getVolume' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Get the volume, from 0 to 1.
     ]]></description>
</method>
<method name='pause' fullname='com.threerings.flash.media:MediaPlayer/com.threerings.flash.media:MediaPlayer:pause' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Pause the media, if not already.
     ]]></description>
</method>
<method name='play' fullname='com.threerings.flash.media:MediaPlayer/com.threerings.flash.media:MediaPlayer:play' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Play the media, if not already.
     ]]></description>
</method>
<method name='seek' fullname='com.threerings.flash.media:MediaPlayer/com.threerings.flash.media:MediaPlayer:seek' isStatic='false' isFinal='false' isOverride='false'  param_names='position' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Seek to the specified position.
     ]]></description>
</method>
<method name='setVolume' fullname='com.threerings.flash.media:MediaPlayer/com.threerings.flash.media:MediaPlayer:setVolume' isStatic='false' isFinal='false' isOverride='false'  param_names='volume' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Set the volume, between 0-1.
     ]]></description>
</method>
<method name='unload' fullname='com.threerings.flash.media:MediaPlayer/com.threerings.flash.media:MediaPlayer:unload' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Unload the media.
     ]]></description>
</method>
<interfaceRec name='AudioPlayer' fullname='com.threerings.flash.media:AudioPlayer' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/media/AudioPlayer.as' namespace='com.threerings.flash.media' access='public' baseClasses='com.threerings.flash.media:MediaPlayer' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Implemented by audio-playing backends.
 ]]></description>
</interfaceRec>
<interfaceRec name='VideoPlayer' fullname='com.threerings.flash.media:VideoPlayer' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/media/VideoPlayer.as' namespace='com.threerings.flash.media' access='public' baseClasses='com.threerings.flash.media:MediaPlayer' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Implemented by video-playing backends.
 ]]></description>
<metadata>
	<Event owner='com.threerings.flash.media:VideoPlayer' name='size' type='com.threerings.util.ValueEvent' >
<description><![CDATA[
 Disptached when the size of the video is known.
 <b>value</b>: a Point expressing the width/height.
  ]]></description>
<eventType><![CDATA[com.threerings.flash.media.MediaPlayerCodes.SIZE
 ]]></eventType>
	</Event>
</metadata>
</interfaceRec>
<method name='getDisplay' fullname='com.threerings.flash.media:VideoPlayer/com.threerings.flash.media:VideoPlayer:getDisplay' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
<description><![CDATA[
     Get the actual visualization of the video.
     ]]></description>
</method>
<method name='getSize' fullname='com.threerings.flash.media:VideoPlayer/com.threerings.flash.media:VideoPlayer:getSize' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Point'>
<description><![CDATA[
     Get the size of the video, or null if not yet known.
     ]]></description>
</method>
<classRec name='Mp3AudioPlayer' fullname='com.threerings.flash.media:Mp3AudioPlayer' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/media/Mp3AudioPlayer.as' namespace='com.threerings.flash.media' access='public' baseclass='flash.events:EventDispatcher' interfaces='com.threerings.flash.media:AudioPlayer' isFinal='false' isDynamic='false' >
</classRec>
<method name='Mp3AudioPlayer' fullname='com.threerings.flash.media:Mp3AudioPlayer/Mp3AudioPlayer' isStatic='false' isFinal='false' isOverride='false'  param_names='loop' param_types='Boolean' param_defaults='false' result_type='*'>
</method>
<method name='addEventListener' fullname='com.threerings.flash.media:Mp3AudioPlayer/addEventListener' isStatic='false' isFinal='false' isOverride='true'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
</method>
<method name='checkNeedTimer' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:checkNeedTimer' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='getClientData' fullname='com.threerings.flash.media:Mp3AudioPlayer/getClientData' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Get any client data associated with the media currently playing.
     ]]></description>
</method>
<method name='getDuration' fullname='com.threerings.flash.media:Mp3AudioPlayer/getDuration' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='getMetadata' fullname='com.threerings.flash.media:Mp3AudioPlayer/getMetadata' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
</method>
<method name='getPosition' fullname='com.threerings.flash.media:Mp3AudioPlayer/getPosition' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='getState' fullname='com.threerings.flash.media:Mp3AudioPlayer/getState' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='getVolume' fullname='com.threerings.flash.media:Mp3AudioPlayer/getVolume' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='handleError' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:handleError' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:IOErrorEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='handleId3' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:handleId3' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='handleLoadingComplete' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:handleLoadingComplete' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
</method>
<method name='handlePlaybackComplete' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:handlePlaybackComplete' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
</method>
<method name='handlePositionCheck' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:handlePositionCheck' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:TimerEvent' param_defaults='null' result_type='void'>
</method>
<method name='load' fullname='com.threerings.flash.media:Mp3AudioPlayer/load' isStatic='false' isFinal='false' isOverride='false'  param_names='url;clientData' param_types='String;Object' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Load and immediately start playing some audio!
     ]]></description>
</method>
<method name='pause' fullname='com.threerings.flash.media:Mp3AudioPlayer/pause' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='pause0' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:pause0' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Pause without saving the position or updating the state.
     ]]></description>
</method>
<method name='play' fullname='com.threerings.flash.media:Mp3AudioPlayer/play' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='play0' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:play0' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Play without updating the current state.
     ]]></description>
</method>
<method name='removeEventListener' fullname='com.threerings.flash.media:Mp3AudioPlayer/removeEventListener' isStatic='false' isFinal='false' isOverride='true'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
</method>
<method name='seek' fullname='com.threerings.flash.media:Mp3AudioPlayer/seek' isStatic='false' isFinal='false' isOverride='false'  param_names='position' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='setVolume' fullname='com.threerings.flash.media:Mp3AudioPlayer/setVolume' isStatic='false' isFinal='false' isOverride='false'  param_names='volume' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='unload' fullname='com.threerings.flash.media:Mp3AudioPlayer/unload' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='updateState' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:updateState' isStatic='false' isFinal='false' isOverride='false'  param_names='newState' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<field name='_chan' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:_chan' type='flash.media:SoundChannel' isStatic='false' isConst='false' >
</field>
<field name='_cliData' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:_cliData' type='Object' isStatic='false' isConst='false' >
</field>
<field name='_isComplete' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:_isComplete' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_lastPosition' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:_lastPosition' type='Number' isStatic='false' isConst='false' defaultValue='NaN' >
</field>
<field name='_loop' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:_loop' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_positionChecker' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:_positionChecker' type='flash.utils:Timer' isStatic='false' isConst='false' >
</field>
<field name='_sound' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:_sound' type='flash.media:Sound' isStatic='false' isConst='false' >
</field>
<field name='_state' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:_state' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='_volume' fullname='com.threerings.flash.media:Mp3AudioPlayer/protected:_volume' type='Number' isStatic='false' isConst='false' defaultValue='1' >
</field>
<classRec name='FlvVideoPlayer' fullname='com.threerings.flash.media:FlvVideoPlayer' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/media/FlvVideoPlayer.as' namespace='com.threerings.flash.media' access='public' baseclass='flash.events:EventDispatcher' interfaces='com.threerings.flash.media:VideoPlayer' isFinal='false' isDynamic='false' >
</classRec>
<method name='FlvVideoPlayer' fullname='com.threerings.flash.media:FlvVideoPlayer/FlvVideoPlayer' isStatic='false' isFinal='false' isOverride='false'  param_names='autoPlay' param_types='Boolean' param_defaults='true' result_type='*'>
</method>
<method name='getDisplay' fullname='com.threerings.flash.media:FlvVideoPlayer/getDisplay' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
</method>
<method name='getDuration' fullname='com.threerings.flash.media:FlvVideoPlayer/getDuration' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='getMetadata' fullname='com.threerings.flash.media:FlvVideoPlayer/getMetadata' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
</method>
<method name='getPosition' fullname='com.threerings.flash.media:FlvVideoPlayer/getPosition' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='getSize' fullname='com.threerings.flash.media:FlvVideoPlayer/getSize' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Point'>
</method>
<method name='getState' fullname='com.threerings.flash.media:FlvVideoPlayer/getState' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
</method>
<method name='getVolume' fullname='com.threerings.flash.media:FlvVideoPlayer/getVolume' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
</method>
<method name='handleAsyncError' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:handleAsyncError' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:AsyncErrorEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='handleIOError' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:handleIOError' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:IOErrorEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='handleMetaData' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:handleMetaData' isStatic='false' isFinal='false' isOverride='false'  param_names='info' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Called when metadata (if any) is found in the video stream.
     ]]></description>
</method>
<method name='handleNetStatus' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:handleNetStatus' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:NetStatusEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='handlePositionCheck' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:handlePositionCheck' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:TimerEvent' param_defaults='null' result_type='void'>
</method>
<method name='handleSecurityError' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:handleSecurityError' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:SecurityErrorEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='handleSizeCheck' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:handleSizeCheck' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:TimerEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Check to see if we now know the dimensions of the video.
     ]]></description>
</method>
<method name='handleStreamNetStatus' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:handleStreamNetStatus' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:NetStatusEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='load' fullname='com.threerings.flash.media:FlvVideoPlayer/load' isStatic='false' isFinal='false' isOverride='false'  param_names='url' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Start playing a video!
     ]]></description>
</method>
<method name='pause' fullname='com.threerings.flash.media:FlvVideoPlayer/pause' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='play' fullname='com.threerings.flash.media:FlvVideoPlayer/play' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='redispatchError' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:redispatchError' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:ErrorEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Redispatch some error we received to our listeners.
     ]]></description>
</method>
<method name='seek' fullname='com.threerings.flash.media:FlvVideoPlayer/seek' isStatic='false' isFinal='false' isOverride='false'  param_names='position' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='setVolume' fullname='com.threerings.flash.media:FlvVideoPlayer/setVolume' isStatic='false' isFinal='false' isOverride='false'  param_names='volume' param_types='Number' param_defaults='undefined' result_type='void'>
</method>
<method name='unload' fullname='com.threerings.flash.media:FlvVideoPlayer/unload' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='updateState' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:updateState' isStatic='false' isFinal='false' isOverride='false'  param_names='newState' param_types='int' param_defaults='undefined' result_type='void'>
</method>
<field name='_autoPlay' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:_autoPlay' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_duration' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:_duration' type='Number' isStatic='false' isConst='false' defaultValue='NaN' >
</field>
<field name='_gotDurationFromMetadata' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:_gotDurationFromMetadata' type='Boolean' isStatic='false' isConst='false' >
</field>
<field name='_metadata' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:_metadata' type='Object' isStatic='false' isConst='false' >
</field>
<field name='_netCon' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:_netCon' type='flash.net:NetConnection' isStatic='false' isConst='false' >
</field>
<field name='_netStream' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:_netStream' type='flash.net:NetStream' isStatic='false' isConst='false' >
</field>
<field name='_positionChecker' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:_positionChecker' type='flash.utils:Timer' isStatic='false' isConst='false' >
</field>
<field name='_size' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:_size' type='flash.geom:Point' isStatic='false' isConst='false' >
<description><![CDATA[ Our size, null until known. ]]></description>
</field>
<field name='_sizeChecker' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:_sizeChecker' type='flash.utils:Timer' isStatic='false' isConst='false' >
<description><![CDATA[ Checks the video every 100ms to see if the dimensions are now know.
     Yes, this is how to do it. We could trigger on ENTER_FRAME, but then
     we may not know the dimensions unless we're added on the display list,
     and we want this to work in the general case. ]]></description>
</field>
<field name='_state' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:_state' type='int' isStatic='false' isConst='false' defaultValue='0' >
</field>
<field name='_vid' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:_vid' type='flash.media:Video' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_volume' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:_volume' type='Number' isStatic='false' isConst='false' defaultValue='1' >
</field>
<field name='log' fullname='com.threerings.flash.media:FlvVideoPlayer/protected:log' type='com.threerings.util:Log' isStatic='false' isConst='true' defaultValue='' >
</field>
<classRec name='SimpleVideoDisplay' fullname='com.threerings.flash.media:SimpleVideoDisplay' sourcefile='/export/whirled/dist/tmp/pubas/com/threerings/flash/media/SimpleVideoDisplay.as' namespace='com.threerings.flash.media' access='public' baseclass='flash.display:Sprite' isFinal='false' isDynamic='false' >
<description><![CDATA[
 An extremely simple video display. Click to pause/play.
 ]]></description>
</classRec>
<method name='SimpleVideoDisplay' fullname='com.threerings.flash.media:SimpleVideoDisplay/SimpleVideoDisplay' isStatic='false' isFinal='false' isOverride='false'  param_names='player' param_types='com.threerings.flash.media:VideoPlayer' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Create a video displayer.
     ]]></description>
</method>
<method name='handleClick' fullname='com.threerings.flash.media:SimpleVideoDisplay/protected:handleClick' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='handlePlayerSize' fullname='com.threerings.flash.media:SimpleVideoDisplay/protected:handlePlayerSize' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='com.threerings.util:ValueEvent' param_defaults='undefined' result_type='void'>
</method>
<method name='unload' fullname='com.threerings.flash.media:SimpleVideoDisplay/unload' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Stop playing our video.
     ]]></description>
</method>
<method name='height' fullname='com.threerings.flash.media:SimpleVideoDisplay/height/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Number'>
</method>
<method name='width' fullname='com.threerings.flash.media:SimpleVideoDisplay/width/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Number'>
</method>
<field name='NATIVE_HEIGHT' fullname='com.threerings.flash.media:SimpleVideoDisplay/NATIVE_HEIGHT' type='int' isStatic='true' isConst='true' defaultValue='240' >
</field>
<field name='NATIVE_WIDTH' fullname='com.threerings.flash.media:SimpleVideoDisplay/NATIVE_WIDTH' type='int' isStatic='true' isConst='true' defaultValue='320' >
</field>
<field name='_player' fullname='com.threerings.flash.media:SimpleVideoDisplay/protected:_player' type='com.threerings.flash.media:VideoPlayer' isStatic='false' isConst='false' >
</field>
<classRec name='AVRGameAvatar' fullname='com.whirled.avrg:AVRGameAvatar' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/AVRGameAvatar.as' namespace='com.whirled.avrg' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Describes the current state of a player's avatar for an AVRG client or server agent.
 ]]></description>
<see><![CDATA[RoomSubControlBase#getAvatarInfo()
 ]]></see>
</classRec>
<field name='bounds' fullname='com.whirled.avrg:AVRGameAvatar/bounds' type='flash.geom:Rectangle' isStatic='false' isConst='false' >
<description><![CDATA[ The bounding rectangle of the avatar, in pixels. This is in the same coodinates as the
     paintable area returned by the <code>LocalSubControl</code>. For example an avatar on the
     left side of a normal room will have a <code>bounds.left</code> near zero.
     ]]></description>
<see><![CDATA[LocalSubControl#getPaintableArea()
     ]]></see>
</field>
<field name='entityId' fullname='com.whirled.avrg:AVRGameAvatar/entityId' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ The entity id of the player's avatar.
     ]]></description>
<see><![CDATA[RoomSubControlClient#getEntityProperty ]]></see>
</field>
<field name='isIdle' fullname='com.whirled.avrg:AVRGameAvatar/isIdle' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ Whether the avatar is currently idle. Player avatars automatically go into this state after
     not moving the mouse over the browser or flash player window for a few minutes.]]></description>
</field>
<field name='isMoving' fullname='com.whirled.avrg:AVRGameAvatar/isMoving' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ Whether the avatar is currently moving.
          <p>NOTE: this value is always false for server agents. Avatars are considered to arrive
     immediately at their destinations.</p> ]]></description>
</field>
<field name='moveSpeed' fullname='com.whirled.avrg:AVRGameAvatar/moveSpeed' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ The avatar's move speed, in pixels per second.
          <p>NOTE: this value is not available for server agents. Avatars are considered to arrive
     immediately at their destinations. ]]></description>
</field>
<field name='orientation' fullname='com.whirled.avrg:AVRGameAvatar/orientation' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ The orientation of the avatar, measured in counter-clockwise degrees from front facing. If
     the avatar is facing towards the player's screen, the orientation is 0. Facing to the right,
     90&deg;, to the rear 180&deg; and to the left 270&deg;.]]></description>
</field>
<field name='state' fullname='com.whirled.avrg:AVRGameAvatar/state' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ The avatar's current state. These are the same states that appear on the avatar's "Change
     state" menu. ]]></description>
</field>
<field name='x' fullname='com.whirled.avrg:AVRGameAvatar/x' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ The x position of the avatar's registration point, measured in room coordinates.
     ]]></description>
<see><![CDATA[http://wiki.whirled.com/Coordinate_systems ]]></see>
</field>
<field name='y' fullname='com.whirled.avrg:AVRGameAvatar/y' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ The y position of the avatar's registration point, measured in room coordinates.
     ]]></description>
<see><![CDATA[http://wiki.whirled.com/Coordinate_systems ]]></see>
</field>
<field name='z' fullname='com.whirled.avrg:AVRGameAvatar/z' type='Number' isStatic='false' isConst='false' >
<description><![CDATA[ The z position of the avatar's registration point, measured in room coordinates.
     ]]></description>
<see><![CDATA[http://wiki.whirled.com/Coordinate_systems ]]></see>
</field>
<classRec name='AVRGameControlEvent' fullname='com.whirled.avrg:AVRGameControlEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/AVRGameControlEvent.as' namespace='com.whirled.avrg' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Conveys information about a change to the state of an AVR game.
 ]]></description>
</classRec>
<method name='AVRGameControlEvent' fullname='com.whirled.avrg:AVRGameControlEvent/AVRGameControlEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;name;value;cancelable' param_types='String;String;Object;Boolean' param_defaults='undefined;null;null;false' result_type='*'>
<description><![CDATA[
     Creates a new AVRGameControlEvent.
     ]]></description>
</method>
<method name='clone' fullname='com.whirled.avrg:AVRGameControlEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[ ]]></description>
</method>
<method name='toString' fullname='com.whirled.avrg:AVRGameControlEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ ]]></description>
</method>
<method name='name' fullname='com.whirled.avrg:AVRGameControlEvent/name/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Retrieves the 'name' for this event, which is a String value
     whose meaning is determined by the event type.
     ]]></description>
</method>
<method name='value' fullname='com.whirled.avrg:AVRGameControlEvent/value/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Retrieves the object 'value' for this event, which is a value
     whose meaning is determined by the event type.
     ]]></description>
</method>
<field name='MOB_APPEARANCE_CHANGED' fullname='com.whirled.avrg:AVRGameControlEvent/MOB_APPEARANCE_CHANGED' type='String' isStatic='true' isConst='true' defaultValue='mobAppearanceChanged' >
<description><![CDATA[
     An event type dispatched when a spawned MOB has changed appearance.
     <br/><b>name</b> - not used
     <br/><b>value</b> - not used
          ]]></description>
<eventType><![CDATA[mobAppearanceChanged
     ]]></eventType>
<see><![CDATA[MobSubControlClient
     ]]></see>
<see><![CDATA[MobSubControlServer
     ]]></see>
</field>
<field name='PLAYER_JOINED_GAME' fullname='com.whirled.avrg:AVRGameControlEvent/PLAYER_JOINED_GAME' type='String' isStatic='true' isConst='true' defaultValue='playerJoinedGame' >
<description><![CDATA[
     An event type dispatched when somebody joined the AVRG.
     <br/><b>name</b> - not used
     <br/><b>value :int</b> - the id of the player who has joined
          ]]></description>
<eventType><![CDATA[playerJoinedGame
     ]]></eventType>
<see><![CDATA[GameSubControlServer
     ]]></see>
</field>
<field name='PLAYER_QUIT_GAME' fullname='com.whirled.avrg:AVRGameControlEvent/PLAYER_QUIT_GAME' type='String' isStatic='true' isConst='true' defaultValue='playerQuitGame' >
<description><![CDATA[
     An event type dispatched when somebody is leaving the AVRG.
     <br/><b>name</b> - not used
     <br/><b>value :int</b> - the memberId of the player
          ]]></description>
<eventType><![CDATA[playerQuitGame
     ]]></eventType>
<see><![CDATA[GameSubControlServer
     ]]></see>
</field>
<field name='SIZE_CHANGED' fullname='com.whirled.avrg:AVRGameControlEvent/SIZE_CHANGED' type='String' isStatic='true' isConst='true' defaultValue='sizeChanged' >
<description><![CDATA[
     An event type dispatched when the control has been resized.
     <br/><b>name</b> - not used
     <br/><b>value</b> - not used
          ]]></description>
<eventType><![CDATA[sizeChanged
     ]]></eventType>
<see><![CDATA[LocalSubControl
     ]]></see>
<see><![CDATA[LocalSubControl#getPaintableArea()
     ]]></see>
</field>
<field name='_name' fullname='com.whirled.avrg:AVRGameControlEvent/protected:_name' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ Internal storage for our name property. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_value' fullname='com.whirled.avrg:AVRGameControlEvent/protected:_value' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ Internal storage for our value property. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='AVRGamePlayerEvent' fullname='com.whirled.avrg:AVRGamePlayerEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/AVRGamePlayerEvent.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled.avrg:AVRGameControlEvent' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Conveys information about a change to the state of a particular player in an AVR game.
 ]]></description>
<see><![CDATA[PlayerSubControlClient
 ]]></see>
<see><![CDATA[PlayerSubControlServer
 ]]></see>
</classRec>
<method name='AVRGamePlayerEvent' fullname='com.whirled.avrg:AVRGamePlayerEvent/AVRGamePlayerEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;playerId;name;value;cancelable' param_types='String;int;String;Object;Boolean' param_defaults='undefined;undefined;null;null;false' result_type='*'>
<description><![CDATA[
     Creates a new AVRGamePlayerEvent.
     ]]></description>
</method>
<method name='clone' fullname='com.whirled.avrg:AVRGamePlayerEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[  ]]></description>
</method>
<method name='toString' fullname='com.whirled.avrg:AVRGamePlayerEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[  ]]></description>
</method>
<method name='playerId' fullname='com.whirled.avrg:AVRGamePlayerEvent/playerId/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Gets the id of the target player whose state is changing.
     ]]></description>
</method>
<field name='ENTERED_ROOM' fullname='com.whirled.avrg:AVRGamePlayerEvent/ENTERED_ROOM' type='String' isStatic='true' isConst='true' defaultValue='enteredRoom' >
<description><![CDATA[
     An event type dispatched when the player has entered a new room.
     <br><b>name</b> - not used
     <br><b>value :int</b> - the id of the scene entered
          ]]></description>
<eventType><![CDATA[enteredRoom
     ]]></eventType>
</field>
<field name='LEFT_ROOM' fullname='com.whirled.avrg:AVRGamePlayerEvent/LEFT_ROOM' type='String' isStatic='true' isConst='true' defaultValue='leftRoom' >
<description><![CDATA[
     An event type dispatched when the player leaves a room.
     <br><b>key</b> - not used
     <br><b>value :int</b> - the id of the scene left
          ]]></description>
<eventType><![CDATA[leftRoom
     ]]></eventType>
</field>
<field name='TASK_COMPLETED' fullname='com.whirled.avrg:AVRGamePlayerEvent/TASK_COMPLETED' type='String' isStatic='true' isConst='true' defaultValue='taskCompleted' >
<description><![CDATA[
     An event type dispatched when the player receives some coins.
     <br><b>name</b> - the id of the task that was completed
     <br><b>value :int</b> - the amount of coins awarded
          ]]></description>
<eventType><![CDATA[taskCompleted
     ]]></eventType>
</field>
<field name='_playerId' fullname='com.whirled.avrg:AVRGamePlayerEvent/protected:_playerId' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='AVRGameRoomEvent' fullname='com.whirled.avrg:AVRGameRoomEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/AVRGameRoomEvent.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled.avrg:AVRGameControlEvent' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Conveys information about a change to the state of a particular room in an AVR game.
 ]]></description>
<see><![CDATA[RoomSubControlClient
 ]]></see>
<see><![CDATA[RoomSubControlServer
 ]]></see>
</classRec>
<method name='AVRGameRoomEvent' fullname='com.whirled.avrg:AVRGameRoomEvent/AVRGameRoomEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;roomId;name;value' param_types='String;int;String;Object' param_defaults='undefined;undefined;null;null' result_type='*'>
<description><![CDATA[
     Creates a new AVRGameRoomEvent.
     ]]></description>
</method>
<method name='clone' fullname='com.whirled.avrg:AVRGameRoomEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
<description><![CDATA[  ]]></description>
</method>
<method name='toString' fullname='com.whirled.avrg:AVRGameRoomEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[  ]]></description>
</method>
<method name='roomId' fullname='com.whirled.avrg:AVRGameRoomEvent/roomId/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Gets the id of the room whose state is changing.
     ]]></description>
</method>
<field name='AVATAR_CHANGED' fullname='com.whirled.avrg:AVRGameRoomEvent/AVATAR_CHANGED' type='String' isStatic='true' isConst='true' defaultValue='avatarChanged' >
<description><![CDATA[
     An event type dispatched when something has changed about an avatar in the room.
     <br/><b>name</b> - not used
     <br/><b>value :int</b> - id of the player whose avatar changed
          ]]></description>
<eventType><![CDATA[avatarChanged
     ]]></eventType>
<see><![CDATA[RoomSubControlBase#getAvatarInfo()
     ]]></see>
</field>
<field name='MOB_CONTROL_AVAILABLE' fullname='com.whirled.avrg:AVRGameRoomEvent/MOB_CONTROL_AVAILABLE' type='String' isStatic='true' isConst='true' defaultValue='mobControlAvailable' >
<description><![CDATA[
     An event type dispatched when the control for a MOB spawned in the room has become available.
     <br/><b>name</b> - the id of the MOB
     <br/><b>value :MobSubControlBase</b> - the new control
          ]]></description>
<eventType><![CDATA[mobControlAvailable
     ]]></eventType>
<see><![CDATA[RoomSubControlServer#spawnMob()
     ]]></see>
<see><![CDATA[MobSubControlServer
     ]]></see>
<see><![CDATA[MobSubControlClient
     ]]></see>
</field>
<field name='PLAYER_ENTERED' fullname='com.whirled.avrg:AVRGameRoomEvent/PLAYER_ENTERED' type='String' isStatic='true' isConst='true' defaultValue='playerEntered' >
<description><![CDATA[
     An event type dispatched when a player entered the room.
     <br/><b>name</b> - not used
     <br/><b>value :int</b> - the id of the player entering
          ]]></description>
<eventType><![CDATA[playerEntered
     ]]></eventType>
</field>
<field name='PLAYER_LEFT' fullname='com.whirled.avrg:AVRGameRoomEvent/PLAYER_LEFT' type='String' isStatic='true' isConst='true' defaultValue='playerLeft' >
<description><![CDATA[
     An event type dispatched either when a player leaves the room.
     <br/><b>name</b> - not used
     <br/><b>value :int</b> - the id of the player leaving
          ]]></description>
<eventType><![CDATA[playerLeft
     ]]></eventType>
</field>
<field name='PLAYER_MOVED' fullname='com.whirled.avrg:AVRGameRoomEvent/PLAYER_MOVED' type='String' isStatic='true' isConst='true' defaultValue='playerMoved' >
<description><![CDATA[
     An event type dispatched when a player of our game who's also in the room took up a new
     location.
     <br/><b>name</b> - not used
     <br/><b>value :int</b> - the id of the player who moved
          ]]></description>
<eventType><![CDATA[playerMoved
     ]]></eventType>
</field>
<field name='ROOM_UNLOADED' fullname='com.whirled.avrg:AVRGameRoomEvent/ROOM_UNLOADED' type='String' isStatic='true' isConst='true' defaultValue='roomUnloaded' >
<description><![CDATA[
     Dispatched when a room has unloaded and is no longer accessible. Note that once this has
     happened, any further API methods called (except getRoomId()) will throw errors and no
     further events will be dispatched on it. The purpose of this event is for local cleanup,
     deregistration of event listeners, clearing out data structures and the like.
          ]]></description>
<eventType><![CDATA[com.whirled.avrg.AVRGameRoomEvent.ROOM_UNLOADED
     ]]></eventType>
</field>
<field name='SIGNAL_RECEIVED' fullname='com.whirled.avrg:AVRGameRoomEvent/SIGNAL_RECEIVED' type='String' isStatic='true' isConst='true' defaultValue='signalReceived' >
<description><![CDATA[
     An event type dispatched when a signal has been received in this room.
     <br/><b>name</b> - The name of the signal.
     <br/><b>value</b> - The arg sent with the signal, or null.
          ]]></description>
<eventType><![CDATA[signalReceived
     ]]></eventType>
<see><![CDATA[com.whirled.EntityControl#sendSignal()
     ]]></see>
</field>
<field name='_roomId' fullname='com.whirled.avrg:AVRGameRoomEvent/protected:_roomId' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='AVRGameControl' fullname='com.whirled.avrg:AVRGameControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/AVRGameControl.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled:AbstractControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 This file should be included by AVR game clients so that they can communicate with their server
 agent and the whirled.
  AVRGame means: Alternate Virtual Reality Game, and refers to games
 played within the whirled environment with your avatar.
  <p>AVR games can be significantly more complicated than lobbied games. Please consult the whirled
 wiki section on AVRGs as well as the AVRG discussion forum if you're having any problems.</p>
  ]]></description>
<see><![CDATA[http://wiki.whirled.com/AVR_Games
 ]]></see>
<see><![CDATA[http://www.whirled.com/#whirleds-d_135
 ]]></see>
</classRec>
<method name='AVRGameControl' fullname='com.whirled.avrg:AVRGameControl/AVRGameControl' isStatic='false' isFinal='false' isOverride='false'  param_names='disp' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Creates a new game control for an AVR game client.
     ]]></description>
</method>
<method name='createSubControls' fullname='com.whirled.avrg:AVRGameControl/protected:createSubControls' isStatic='false' isFinal='false' isOverride='true'  result_type='Array'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='enteredRoom_v1' fullname='com.whirled.avrg:AVRGameControl/com.whirled.avrg:enteredRoom_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='scene' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='leftRoom_v1' fullname='com.whirled.avrg:AVRGameControl/com.whirled.avrg:leftRoom_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='scene' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='requestMobSprite_v1' fullname='com.whirled.avrg:AVRGameControl/protected:requestMobSprite_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='id' param_types='String' param_defaults='undefined' result_type='flash.display:DisplayObject'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setUserProps' fullname='com.whirled.avrg:AVRGameControl/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='agent' fullname='com.whirled.avrg:AVRGameControl/agent/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.avrg:AgentSubControl'>
<description><![CDATA[
     Accesses the client's agent sub control.
     ]]></description>
</method>
<method name='game' fullname='com.whirled.avrg:AVRGameControl/game/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.avrg:GameSubControlClient'>
<description><![CDATA[
     Accesses the client's game sub control.
     ]]></description>
</method>
<method name='local' fullname='com.whirled.avrg:AVRGameControl/local/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.avrg:LocalSubControl'>
<description><![CDATA[
     Accesses the client's local sub control.
     ]]></description>
</method>
<method name='player' fullname='com.whirled.avrg:AVRGameControl/player/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.avrg:PlayerSubControlClient'>
<description><![CDATA[
     Accesses the client's local player sub control.
     ]]></description>
</method>
<method name='room' fullname='com.whirled.avrg:AVRGameControl/room/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.avrg:RoomSubControlClient'>
<description><![CDATA[
     Accesses the client's room sub control for the player's current room.
     ]]></description>
</method>
<field name='_agent' fullname='com.whirled.avrg:AVRGameControl/protected:_agent' type='com.whirled.avrg:AgentSubControl' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_game' fullname='com.whirled.avrg:AVRGameControl/protected:_game' type='com.whirled.avrg:GameSubControlClient' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_local' fullname='com.whirled.avrg:AVRGameControl/protected:_local' type='com.whirled.avrg:LocalSubControl' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_player' fullname='com.whirled.avrg:AVRGameControl/protected:_player' type='com.whirled.avrg:PlayerSubControlClient' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_room' fullname='com.whirled.avrg:AVRGameControl/protected:_room' type='com.whirled.avrg:RoomSubControlClient' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='AVRServerGameControl' fullname='com.whirled.avrg:AVRServerGameControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/AVRServerGameControl.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled:AbstractControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 This file should be included by the server agents of AVR games so that they can communicate
 with the whirled. Server agents are normally responsible for deciding how players will be
 grouped and for an arbitrary amount of the game logic.
  <p>AVRGame means: Alternate Virtual Reality Game, and refers to games played within the whirled
 environment with your avatar.</p>
  <p>AVR games can be significantly more complicated than lobbied games. Please consult the whirled
 wiki section on AVRGs as well as the AVRG discussion forum if you're having any problems.</p>
  ]]></description>
<see><![CDATA[http://wiki.whirled.com/AVR_Games
 ]]></see>
<see><![CDATA[http://www.whirled.com/#whirleds-d_135
 ]]></see>
</classRec>
<method name='AVRServerGameControl' fullname='com.whirled.avrg:AVRServerGameControl/AVRServerGameControl' isStatic='false' isFinal='false' isOverride='false'  param_names='serv' param_types='com.whirled:ServerObject' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Creates a new game control for a server agent.
     ]]></description>
</method>
<method name='createSubControls' fullname='com.whirled.avrg:AVRServerGameControl/protected:createSubControls' isStatic='false' isFinal='false' isOverride='true'  result_type='Array'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getPlayer' fullname='com.whirled.avrg:AVRServerGameControl/getPlayer' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId' param_types='int' param_defaults='undefined' result_type='com.whirled.avrg:PlayerSubControlServer'>
<description><![CDATA[
     Accesses the server agent's player sub control for a player with a given id. Server agents
     are notified when a player joins and quits the game by events. An <code>Error</code> is
     thrown if the requested player has not joined the game or has quit.
     ]]></description>
<see><![CDATA[AVRGameControlEvent.PLAYER_JOINED
     ]]></see>
<see><![CDATA[AVRGameControlEvent.PLAYER_QUIT
     ]]></see>
</method>
<method name='getPlayerProps' fullname='com.whirled.avrg:AVRServerGameControl/protected:getPlayerProps' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId' param_types='int' param_defaults='undefined' result_type='com.whirled.net:PropertySubControl'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getRoom' fullname='com.whirled.avrg:AVRServerGameControl/getRoom' isStatic='false' isFinal='false' isOverride='false'  param_names='roomId' param_types='int' param_defaults='undefined' result_type='com.whirled.avrg:RoomSubControlServer'>
<description><![CDATA[
     Accesses the server agent's room sub control for a given room id. This method will fail by
     throwing an <code>Error</code> if the room is not currently loaded by the server agent. A
     room with at least one player in it is guaranteed to be loaded. Server agents are notified
     of player entry and exit by events. A room with no players in it should be considered
     unloaded after the event is sent for the last player exiting the room.
     ]]></description>
<see><![CDATA[AVRGamePlayerEvent#ENTERED_ROOM
     ]]></see>
<see><![CDATA[AVRGamePlayerEvent#LEFT_ROOM
     ]]></see>
<see><![CDATA[AVRGameRoomEvent#PLAYER_ENTERED
     ]]></see>
<see><![CDATA[AVRGameRoomEvent#PLAYER_LEFT
     ]]></see>
</method>
<method name='loadOfflinePlayer' fullname='com.whirled.avrg:AVRServerGameControl/loadOfflinePlayer' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId;success;failure' param_types='int;Function;Function' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Loads the property space of an offline player and calls your function with it as an
     argument. Within this callback, you may read and write persistent properties as you
     see fit. Note: To preserve some semblance of sanity, you can only load the properties
     of a player who has already had at least one persistent property set.
          ]]></description>
<example><![CDATA[An example, whereby one player may leave an offline message for another player:
     <listing version="3.0">
        _ctrl.loadOfflinePlayer(opponentPlayerId, function (props :PropertySubControl) :void {
            props.setIn("messages", myPlayerId, myMessage);
        }, function (failureCause :String) :void {
            log.warn("Eek! Sending message to offline player failed!", "cause", failureCause);
       });
     </listing>
     ]]></example>
</method>
<method name='playerJoinedGame_v1' fullname='com.whirled.avrg:AVRServerGameControl/protected:playerJoinedGame_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='playerLeftGame_v1' fullname='com.whirled.avrg:AVRServerGameControl/protected:playerLeftGame_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='relayTo' fullname='com.whirled.avrg:AVRServerGameControl/protected:relayTo' isStatic='false' isFinal='false' isOverride='false'  param_names='getObj;fun' param_types='Function;String' param_defaults='undefined;undefined' result_type='Function'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='roomUnloaded_v1' fullname='com.whirled.avrg:AVRServerGameControl/protected:roomUnloaded_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='roomId' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Called by the backend when a room is no longer accessible.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setUserProps' fullname='com.whirled.avrg:AVRServerGameControl/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='game' fullname='com.whirled.avrg:AVRServerGameControl/game/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.avrg:GameSubControlServer'>
<description><![CDATA[
     Accesses the server agent's game sub control.
     ]]></description>
</method>
<method name='props' fullname='com.whirled.avrg:AVRServerGameControl/props/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.net:PropertySubControl'>
<description><![CDATA[
     Accesses the private properties for the server agent: these are not distributed to any
     clients and can thus be updated with greater frequency than the game-global ones.
          Properties marked as such will be persisted and restored whenever the server agent starts.
          ]]></description>
<see><![CDATA[com.whirled.net.NetConstants#makePersistent()
     ]]></see>
</method>
<field name='_game' fullname='com.whirled.avrg:AVRServerGameControl/protected:_game' type='com.whirled.avrg:GameSubControlServer' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_playerControls' fullname='com.whirled.avrg:AVRServerGameControl/protected:_playerControls' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_props' fullname='com.whirled.avrg:AVRServerGameControl/protected:_props' type='com.whirled.net.impl:PropertySubControlImpl' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_roomControls' fullname='com.whirled.avrg:AVRServerGameControl/protected:_roomControls' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='MobSubControlBase' fullname='com.whirled.avrg:MobSubControlBase' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/MobSubControlBase.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled:AbstractSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides a means of accessing and controlling a previously spawned MOB.
 ]]></description>
<see><![CDATA[http://wiki.whirled.com/Mobs
 ]]></see>
<see><![CDATA[RoomSubControlServer#spawnMob()
 ]]></see>
<see><![CDATA[RoomSubControlBase#event:mobControlAvailable
 ]]></see>
<metadata>
	<Event owner='com.whirled.avrg:MobSubControlBase' name='mobAppearanceChanged' type='com.whirled.avrg.AVRGameControlEvent' >
<description><![CDATA[
 Dispatched when the location or orientation of a MOB changes.
  ]]></description>
<eventType><![CDATA[com.whirled.avrg.AVRGameControlEvent.MOB_APPEARANCE_CHANGED
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='MobSubControlBase' fullname='com.whirled.avrg:MobSubControlBase/MobSubControlBase' isStatic='false' isFinal='false' isOverride='false'  param_names='parent;id' param_types='com.whirled:AbstractControl;String' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='appearanceChanged' fullname='com.whirled.avrg:MobSubControlBase/com.whirled.avrg:appearanceChanged' isStatic='false' isFinal='false' isOverride='false'  param_names='location;orient;moving;sleeping' param_types='Array;Number;Boolean;Boolean' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='gotHostPropsFriend' fullname='com.whirled.avrg:MobSubControlBase/com.whirled.avrg:gotHostPropsFriend' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_id' fullname='com.whirled.avrg:MobSubControlBase/protected:_id' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_isMoving' fullname='com.whirled.avrg:MobSubControlBase/protected:_isMoving' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ Indicates whether or not we're currently moving. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_location' fullname='com.whirled.avrg:MobSubControlBase/protected:_location' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ Contains our current location in the scene [x, y, z], or null. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_orient' fullname='com.whirled.avrg:MobSubControlBase/protected:_orient' type='Number' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[ Our current orientation, or 0. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='PartySubControl' fullname='com.whirled.avrg:PartySubControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/PartySubControl.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled:AbstractSubControl' isFinal='false' isDynamic='false' >
</classRec>
<method name='PartySubControl' fullname='com.whirled.avrg:PartySubControl/PartySubControl' isStatic='false' isFinal='false' isOverride='false'  param_names='parent' param_types='com.whirled.avrg:GameSubControlBase' param_defaults='undefined' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getGroupId' fullname='com.whirled.avrg:PartySubControl/getGroupId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get the group id of this party. Note that different parties could have the same group id.
     ]]></description>
</method>
<method name='getGroupName' fullname='com.whirled.avrg:PartySubControl/getGroupName' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Get the name of the group hosting this party.
     ]]></description>
</method>
<method name='getId' fullname='com.whirled.avrg:PartySubControl/getId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get the party id. You should know this, or how did you get this subcontrol?
     ]]></description>
</method>
<method name='getName' fullname='com.whirled.avrg:PartySubControl/getName' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Get the name of this party. This is not guaranteed to be unique.
     ]]></description>
</method>
<method name='getPlayerIds' fullname='com.whirled.avrg:PartySubControl/getPlayerIds' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Get the player ids in this party.
     ]]></description>
</method>
<classRec name='GameSubControlBase' fullname='com.whirled.avrg:GameSubControlBase' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/GameSubControlBase.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled:AbstractSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides AVR game services for server agents and clients.
 ]]></description>
<metadata>
	<Event owner='com.whirled.avrg:GameSubControlBase' name='MsgReceived' type='com.whirled.net.MessageReceivedEvent' >
<description><![CDATA[
 Dispatched when a message arrives with information that is not part of the shared game state.
  ]]></description>
<eventType><![CDATA[com.whirled.net.MessageReceivedEvent.MESSAGE_RECEIVED
 ]]></eventType>
<see><![CDATA[GameSubControlServer#sendMessage
 ]]></see>
<see><![CDATA[AgentSubControl#sendMessage
 ]]></see>
	</Event>
</metadata>
</classRec>
<method name='GameSubControlBase' fullname='com.whirled.avrg:GameSubControlBase/GameSubControlBase' isStatic='false' isFinal='false' isOverride='false'  param_names='ctrl' param_types='com.whirled:AbstractControl' param_defaults='undefined' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getItemPacks' fullname='com.whirled.avrg:GameSubControlBase/getItemPacks' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Returns the set of all item packs available to this game as an array of objects with the
     following properties:
          <pre>
     ident - string identifier of item pack
     name - human readable name of item pack
     mediaURL - URL for item pack content
     </pre>
     ]]></description>
</method>
<method name='getLevelPacks' fullname='com.whirled.avrg:GameSubControlBase/getLevelPacks' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Returns the set of all level packs available to this game as an array of objects with the
     following properties:
          <pre>
     ident - string identifier of item pack
     name - human readable name of item pack
     mediaURL - URL for item pack content
     premium - boolean indicating that content is premium or not
     </pre>
     ]]></description>
</method>
<method name='getOccupantName' fullname='com.whirled.avrg:GameSubControlBase/getOccupantName' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId' param_types='int' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Get the name of an occupant of the game, or null if not found.
     In an AVRG all occupants are players, so this could be called getPlayerName(),
     but this name matches RoomSubControlBase as well as the "regular" game api.
          NOTE: names are not unique and can change at any time. You must use the playerId to
     identify someone, and only retrieve the name for display purposes.
     ]]></description>
</method>
<method name='getPartyControl' fullname='com.whirled.avrg:GameSubControlBase/getPartyControl' isStatic='false' isFinal='false' isOverride='false'  param_names='partyId' param_types='int' param_defaults='undefined' result_type='com.whirled.avrg:PartySubControl'>
<description><![CDATA[
     Get the party control for the specified party, or null if there is no such party.
     ]]></description>
</method>
<method name='getPartyIds' fullname='com.whirled.avrg:GameSubControlBase/getPartyIds' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Return the ids of all parties presently in this game.
     ]]></description>
</method>
<method name='getPlayerIds' fullname='com.whirled.avrg:GameSubControlBase/getPlayerIds' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Returns an array of the ids of all players who have joined and not yet quit the game.
     ]]></description>
</method>
<method name='loadItemPackData' fullname='com.whirled.avrg:GameSubControlBase/loadItemPackData' isStatic='false' isFinal='false' isOverride='false'  param_names='ident;onLoaded;onFailure' param_types='String;Function;Function' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Loads the binary data for the item pack with the specified ident.
          ]]></description>
<param><![CDATA[ident the identifier of the item pack to be loaded.
     ]]></param>
<param><![CDATA[onLoaded a function with the signature: function (data :ByteArray) :void
     that will be called with the item pack data if it loads successfully.
     ]]></param>
<param><![CDATA[onFailure a function with the signature: function (error :Error) :void
     that will be called if the pack loading fails.
     ]]></param>
</method>
<method name='loadLevelPackData' fullname='com.whirled.avrg:GameSubControlBase/loadLevelPackData' isStatic='false' isFinal='false' isOverride='false'  param_names='ident;onLoaded;onFailure' param_types='String;Function;Function' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Loads the binary data for the level pack with the specified ident.
          ]]></description>
<param><![CDATA[ident the identifier of the level pack to be loaded.
     ]]></param>
<param><![CDATA[onLoaded a function with the signature: function (data :ByteArray) :void
     that will be called with the level pack data if it loads successfully.
     ]]></param>
<param><![CDATA[onFailure a function with the signature: function (error :Error) :void
     that will be called if the pack loading fails.
     ]]></param>
</method>
<method name='messageReceived' fullname='com.whirled.avrg:GameSubControlBase/protected:messageReceived' isStatic='false' isFinal='false' isOverride='false'  param_names='name;value;sender' param_types='String;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setUserProps' fullname='com.whirled.avrg:GameSubControlBase/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='AgentSubControl' fullname='com.whirled.avrg:AgentSubControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/AgentSubControl.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled:AbstractSubControl' interfaces='com.whirled.net:MessageSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides AVR game clients a way to communicate to their server agent.
 ]]></description>
</classRec>
<method name='AgentSubControl' fullname='com.whirled.avrg:AgentSubControl/AgentSubControl' isStatic='false' isFinal='false' isOverride='false'  param_names='ctrl' param_types='com.whirled:AbstractControl' param_defaults='undefined' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='sendMessage' fullname='com.whirled.avrg:AgentSubControl/sendMessage' isStatic='false' isFinal='false' isOverride='false'  param_names='name;value' param_types='String;Object' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Sends a message to the agent. The agent receives messages by adding a
     <code>MESSAGE_RECEIVED</code> event listener to <code>GameSubControlServer</code>.
     ]]></description>
<see><![CDATA[GameSubControlBase#event:MsgReceived
     ]]></see>
</method>
<method name='setUserProps' fullname='com.whirled.avrg:AgentSubControl/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='LocalSubControl' fullname='com.whirled.avrg:LocalSubControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/LocalSubControl.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled:AbstractSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Defines actions, accessors and callbacks available on the client only.
 ]]></description>
<metadata>
	<Event owner='com.whirled.avrg:LocalSubControl' name='partyChanged' type='com.whirled.avrg.AVRGameControlEvent' >
<description><![CDATA[
 TEMPORARY. This event will be removed soon, and <b>no backwards compatibility will be
 provided</b>. Use at your own risk. Better yet, don't use it at all, unless you are
 wearing Tim Conkling's underwear.
  Dispatched when any party information has changed.
 ]]></description>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.avrg:LocalSubControl' name='sizeChanged' type='com.whirled.avrg.AVRGameControlEvent' >
<description><![CDATA[
 Dispatched when the control has been resized.
  ]]></description>
<eventType><![CDATA[com.whirled.avrg.AVRGameControlEvent.SIZE_CHANGED
 ]]></eventType>
<see><![CDATA[#getPaintableArea()
 ]]></see>
	</Event>
</metadata>
</classRec>
<method name='LocalSubControl' fullname='com.whirled.avrg:LocalSubControl/LocalSubControl' isStatic='false' isFinal='false' isOverride='false'  param_names='ctrl' param_types='com.whirled:AbstractControl' param_defaults='undefined' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='feedback' fullname='com.whirled.avrg:LocalSubControl/feedback' isStatic='false' isFinal='false' isOverride='false'  param_names='msg' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Displays a feedback chat message for the local player only, no other players or observers
     will see it.
     ]]></description>
</method>
<method name='getInviteToken' fullname='com.whirled.avrg:LocalSubControl/getInviteToken' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Retrieves the token, if any, that was used to launch the game.  If the player entered into
     the game via a URL that contained a token (provided by the game via showInvitePage), this
     will return that token, otherwise null. Note that the invitations are not managed securely,
     it would be trivial for someone to modify a URL to specify a different token, so appropriate
     checks should be made.
     ]]></description>
</method>
<method name='getInviterMemberId' fullname='com.whirled.avrg:LocalSubControl/getInviterMemberId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Retrieves the ID of the member who invited the current player to this game (using the page
     shown by <code>showInvitePage</code>. Returns 0 if the player did not start the game via an
     invite link.
     ]]></description>
</method>
<method name='getPaintableArea' fullname='com.whirled.avrg:LocalSubControl/getPaintableArea' isStatic='false' isFinal='false' isOverride='false'  param_names='full' param_types='Boolean' param_defaults='true' result_type='flash.geom:Rectangle'>
<description><![CDATA[
     Returns the bounds of the area on which the AVRG will be drawn. This value changes when the
     browser is resized, and when the player moves to another room. A null value may be returned
     if the paintable area is not currently defined, for example if the player has left a room
     and the new room is not yet loaded.
          ]]></description>
<param><![CDATA[full If true (the default), returns the entire paintable area. If false, returns the
     area occupied by the room's decor, which can be smaller than the entire paintable area in
     narrow rooms, or when the room view is zoomed out.
          ]]></param>
<return><![CDATA[a Rectangle containing the bounds of the paintable area, or null if the area is not
     defined
          ]]></return>
<see><![CDATA[#event:sizeChanged
     ]]></see>
</method>
<method name='getPartyInfo' fullname='com.whirled.avrg:LocalSubControl/getPartyInfo' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     TEMPORARY. This method will be removed soon, and <b>no backwards compatibility will be
     provided</b>. Use at your own risk. Better yet, don't use it at all, unless you are
     wearing Tim Conkling's underwear.
          Get the party information of the local player, or null if they're not in a party.
     {
         id: <partyId> (int)
         name: <partyName> (String)
         leaderId: <playerId> (int)
         players: <playerIds> (Array of ints)
     }
     ]]></description>
</method>
<method name='getRoomBounds' fullname='com.whirled.avrg:LocalSubControl/getRoomBounds' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Get the room bounds in "room pixels".
     This will be a 3-element array corresponding to [ width, height, depth ].
     These values are otreal pixels. Rather, if an avatar is 100 pixels wide
     and a room is 700 pixels wide, then the avatar should be able to span 7 across, whether
     it's in the front of the room or the rear.
          TODO: This is not yet here. It's ]]></description>
<private.><![CDATA[     ]]></private.>
</method>
<method name='hitTestPoint_v1' fullname='com.whirled.avrg:LocalSubControl/protected:hitTestPoint_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y;shapeFlag' param_types='Number;Number;Boolean' param_defaults='undefined;undefined;undefined' result_type='Boolean'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='locationToPaintable' fullname='com.whirled.avrg:LocalSubControl/locationToPaintable' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y;z' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='flash.geom:Point'>
<description><![CDATA[
     Converts a 3D room location coordinate to a 2D paintable area coordinate. A null value may be
     returned if the room is not currently well defined, for example if the player has left a
     room and the new room is not yet loaded.
          <p>"3D room" is a an absolute coordinate system used by the Whirled server and server agents
     to specify an unambiguous position within the room's space.</p>
          <p>"Decor" or "2D room" is a two dimensional system that measures the location in pixels
     relative to the top-left corner of the room decor graphics. This removes all effects of
     stretching and scrolling so is absolute for all clients.</p>
          ]]></description>
<see><![CDATA[http://wiki.whirled.com/Coordinate_systems
     ]]></see>
</method>
<method name='locationToRoom' fullname='com.whirled.avrg:LocalSubControl/locationToRoom' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y;z' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='flash.geom:Point'>
<description><![CDATA[
     Converts a 3D room location coordinate to a 2D decor coordinate. A null value may be returned
     if the room is not currently well defined, for example if the player has left a room and the
     new room is not yet loaded.
          <p>"3D room" is a an absolute coordinate system used by the Whirled server and server agents
     to specify an unambiguous position within the room's space.</p>
          <p>"Decor" or "2D room" is a two dimensional system that measures the location in pixels
     relative to the top-left corner of the room decor graphics. This removes all effects of
     stretching and scrolling so is absolute for all clients.</p>
          ]]></description>
<see><![CDATA[http://wiki.whirled.com/Coordinate_systems
     ]]></see>
</method>
<method name='paintableToLocationAtDepth' fullname='com.whirled.avrg:LocalSubControl/paintableToLocationAtDepth' isStatic='false' isFinal='false' isOverride='false'  param_names='p;depth' param_types='flash.geom:Point;Number' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[
     Converts a paintable area coordinate to a 3D room coordinate by projecting onto a plane
     parallel to the front wall, intersecting the room at a specified depth. This type of
     functionality is useful for converting mouse position into 3D room location at some constant
     depth. The result is not constrained to be inside the room unit box.
          <p>"Paintable area" is a 2D pixel coordinate system that is relative to the parent display
     object of your game's interface and therefore useful for actually setting the x and y
     properties of your top-level user interface display object.</p>
          <p>"3D room" is a an absolute coordinate system used by the Whirled server and server agents
     to specify an unambiguous position within the room's space.</p>
            ]]></description>
<param><![CDATA[p            location in paintable area coordinate space
       ]]></param>
<param><![CDATA[depth        Z position of the intersection wall, in room coordinate space.
            ]]></param>
<return><![CDATA[an array containing [ x, y, z ] (with z value equal to depth), or null
       if no valid location was found.
          ]]></return>
<see><![CDATA[http://wiki.whirled.com/Coordinate_systems
     ]]></see>
</method>
<method name='paintableToLocationAtHeight' fullname='com.whirled.avrg:LocalSubControl/paintableToLocationAtHeight' isStatic='false' isFinal='false' isOverride='false'  param_names='p;height' param_types='flash.geom:Point;Number' param_defaults='undefined;undefined' result_type='Array'>
<description><![CDATA[
     Converts a paintable area coordinate to a 3D room coordinate by projecting onto a plane
     parallel to the floor, intersecting the room at a specified height. This type of
     functionality is useful for converting mouse position into 3D room location at some constant
     height. The result is not constrained to be inside the room unit box.
          <p>"Paintable area" is a 2D pixel coordinate system that is relative to the parent display
     object of your game's interface and therefore useful for actually setting the x and y
     properties of your top-level user interface display object.</p>
          <p>"3D room" is a an absolute coordinate system used by the Whirled server and server agents
     to specify an unambiguous position within the room's space.</p>
            ]]></description>
<param><![CDATA[p            location in room coordinate space
       ]]></param>
<param><![CDATA[height       Y position of the intersection wall, in room coordinate space.
          ]]></param>
<return><![CDATA[an array containing [ x, y, z ] (with y value equal to height) or null if
     no valid location was found.
          ]]></return>
<see><![CDATA[http://wiki.whirled.com/Coordinate_systems
     ]]></see>
</method>
<method name='paintableToRoom' fullname='com.whirled.avrg:LocalSubControl/paintableToRoom' isStatic='false' isFinal='false' isOverride='false'  param_names='p' param_types='flash.geom:Point' param_defaults='undefined' result_type='flash.geom:Point'>
<description><![CDATA[
     Converts a paintable area coordinate to a decor coordinate. A null value may be returned if
     the room is not currently well defined, for example if the player has left a room and the
     new room is not yet loaded.
          <p>"Paintable area" is a 2D pixel coordinate system that is relative to the parent display
     object of your game's interface and therefore useful for actually setting the x and y
     properties of your top-level user interface display object.</p>
          <p>"Decor" or "2D room" is a two dimensional system that measures the location in pixels
     relative to the top-left corner of the room decor graphics. This removes all effects of
     stretching and scrolling so is absolute for all clients.</p>
          ]]></description>
<see><![CDATA[http://wiki.whirled.com/Coordinate_systems
     ]]></see>
</method>
<method name='panelResized_v1' fullname='com.whirled.avrg:LocalSubControl/protected:panelResized_v1' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='partyChanged_temp' fullname='com.whirled.avrg:LocalSubControl/protected:partyChanged_temp' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='roomToPaintable' fullname='com.whirled.avrg:LocalSubControl/roomToPaintable' isStatic='false' isFinal='false' isOverride='false'  param_names='p' param_types='flash.geom:Point' param_defaults='undefined' result_type='flash.geom:Point'>
<description><![CDATA[
     Converts a decor coordinate to a paintable area coordinate. A null value may be returned if
     the room is not currently well defined, for example if the player has left a room and the
     new room is not yet loaded.
          <p>"Decor" or "2D room" is a two dimensional system that measures the location in pixels
     relative to the top-left corner of the room decor graphics. This removes all effects of
     stretching and scrolling so is absolute for all clients.</p>
          <p>"Paintable area" is a 2D pixel coordinate system that is relative to the parent display
     object of your game's interface and therefore useful for actually setting the x and y
     properties of your top-level user interface display object.</p>
          ]]></description>
<see><![CDATA[http://wiki.whirled.com/Coordinate_systems
     ]]></see>
</method>
<method name='setHitPointTester' fullname='com.whirled.avrg:LocalSubControl/setHitPointTester' isStatic='false' isFinal='false' isOverride='false'  param_names='tester' param_types='Function' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Configures the AVRG with a function to call to determine which pixels are alive for mouse
     purposes and which are not. By default, all non-transparent pixels will capture the mouse.
     The prototype for this method is identical to what the Flash API establishes in
     <code>DisplayObject</code>:
          <listing version="3.0">
        function testHitPoint(x :Number, y :Number, shapeFlag :Boolean) :Boolean
     </listing>
          ]]></description>
<see><![CDATA[flash.display.DisplayObject#hitTestPoint()
     ]]></see>
</method>
<method name='setMobSpriteExporter' fullname='com.whirled.avrg:LocalSubControl/setMobSpriteExporter' isStatic='false' isFinal='false' isOverride='false'  param_names='exporter' param_types='Function' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Sets the function that will manufacture <code>DisplayObject</code> instances on the client
     when mobs are spawned by the server agent. The function must take the string type of the
     requested mob and return a <code>DisplayObject</code>:
          <listing version="3.0">
        function createMobSprite (type :String) :DisplayObject;
     </listing>
          <p>Once created, the mob will be drawn in the room until the server agent despawns it. Clients
     should not attempt to remove the sprite. Each mob in a room has a corresponding
     <code>MobSubControlClient</code>. Games that use mobs should call this function during
     initialization so that if the player is joining an in-progress game, all the previously
     spawned mobs will be created.</p>
          ]]></description>
<see><![CDATA[RoomSubControlServer#spawnMob()
     ]]></see>
<see><![CDATA[RoomSubControlClient#getMobSubControl()
     ]]></see>
<see><![CDATA[http://wiki.whirled.com/Mobs
     ]]></see>
</method>
<method name='setUserProps' fullname='com.whirled.avrg:LocalSubControl/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='showInvitePage' fullname='com.whirled.avrg:LocalSubControl/showInvitePage' isStatic='false' isFinal='false' isOverride='false'  param_names='defmsg;token' param_types='String;String' param_defaults='undefined;' result_type='void'>
<description><![CDATA[
     Instructs the game client to open the game invite page, allowing the player to invite friends
     to play this game.
     ]]></description>
<param><![CDATA[defmsg Default message that will be included along with the game's URL when sent
     to the player's friends.
     ]]></param>
<param><![CDATA[token Optional token that will be included on the URL and eventually passed back to
     the game when an invited friend goes to the URL.  This allows the game to start in
     a different state than usual.
     ]]></param>
</method>
<method name='hitPointTester' fullname='com.whirled.avrg:LocalSubControl/hitPointTester/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Function'>
<description><![CDATA[
     Returns the AVRG's currently configured hit point tester.
          ]]></description>
<see><![CDATA[#setHitPointTester()
     ]]></see>
</method>
<method name='mobSpriteExporter' fullname='com.whirled.avrg:LocalSubControl/mobSpriteExporter/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Function'>
<description><![CDATA[
     Accesses the previously set mob sprite exporter.
     ]]></description>
<see><![CDATA[#setMobSpriteExporter()
     ]]></see>
</method>
<field name='_hitPointTester' fullname='com.whirled.avrg:LocalSubControl/protected:_hitPointTester' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_mobSpriteExporter' fullname='com.whirled.avrg:LocalSubControl/protected:_mobSpriteExporter' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='MobSubControlServer' fullname='com.whirled.avrg:MobSubControlServer' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/MobSubControlServer.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled.avrg:MobSubControlBase' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides the server agent with a means of controlling a previously spawned MOB.
 ]]></description>
<see><![CDATA[AVRServerGameControl#spawnMob()
 ]]></see>
<see><![CDATA[RoomSubControlBase#event:mobControlAvailable
 ]]></see>
<see><![CDATA[RoomSubControlServer#getMobSubControl()
 ]]></see>
<see><![CDATA[http://wiki.whirled.com/Mobs
 ]]></see>
</classRec>
<method name='MobSubControlServer' fullname='com.whirled.avrg:MobSubControlServer/MobSubControlServer' isStatic='false' isFinal='false' isOverride='false'  param_names='parent;id' param_types='com.whirled:AbstractControl;String' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='moveTo' fullname='com.whirled.avrg:MobSubControlServer/moveTo' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y;z' param_types='Number;Number;Number' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Moves the mob to a new place in room coordinates.
     ]]></description>
<see><![CDATA[http://wiki.whirled.com/Coordinate_systems
     ]]></see>
<see><![CDATA[MobSubControlBase#event:mobAppearanceChanged
     ]]></see>
</method>
<classRec name='MobSubControlClient' fullname='com.whirled.avrg:MobSubControlClient' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/MobSubControlClient.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled.avrg:MobSubControlBase' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides clients with a means of accessing and controlling a previously spawned MOB.
 ]]></description>
<see><![CDATA[http://wiki.whirled.com/Mobs
 ]]></see>
<see><![CDATA[RoomSubControlServer#spawnMob()
 ]]></see>
<see><![CDATA[RoomSubControlBase#event:mobControlAvailable
 ]]></see>
<see><![CDATA[RoomSubControlClient#getMobSubControl()
 ]]></see>
</classRec>
<method name='MobSubControlClient' fullname='com.whirled.avrg:MobSubControlClient/MobSubControlClient' isStatic='false' isFinal='false' isOverride='false'  param_names='parent;id;sprite' param_types='com.whirled:AbstractControl;String;flash.display:DisplayObject' param_defaults='undefined;undefined;undefined' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getMobSprite' fullname='com.whirled.avrg:MobSubControlClient/getMobSprite' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
<description><![CDATA[
     Accesses the sprite object for this MOB. If non-null, this will return the value created by
     the mob sprite exporter assigned in the <code>LocalSubControl</code>.
     ]]></description>
<see><![CDATA[LocalSubControl#setMobSpriteExporter()
     ]]></see>
</method>
<method name='removeDecoration' fullname='com.whirled.avrg:MobSubControlClient/removeDecoration' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Removes the previously assigned decoration.
     ]]></description>
</method>
<method name='setDecoration' fullname='com.whirled.avrg:MobSubControlClient/setDecoration' isStatic='false' isFinal='false' isOverride='false'  param_names='decoration' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Assigns an object to decorate a mob.
     ]]></description>
</method>
<method name='setHotSpot' fullname='com.whirled.avrg:MobSubControlClient/setHotSpot' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y;height' param_types='Number;Number;Number' param_defaults='undefined;undefined;unknown' result_type='void'>
<description><![CDATA[
     Set the layout "hotspot" for your item, specified as pixels relative to (0, 0) the top-left
     coordinate.
          If unset, the default hotspot will be based off of the SWF dimensions, with x = width / 2,
     y = height.
     ]]></description>
</method>
<field name='_decoration' fullname='com.whirled.avrg:MobSubControlClient/protected:_decoration' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_sprite' fullname='com.whirled.avrg:MobSubControlClient/protected:_sprite' type='flash.display:DisplayObject' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='GameSubControlServer' fullname='com.whirled.avrg:GameSubControlServer' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/GameSubControlServer.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled.avrg:GameSubControlBase' interfaces='com.whirled.net:MessageSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides services for AVR game server agents.
 ]]></description>
<see><![CDATA[AVRServerGameControl#game
 ]]></see>
<metadata>
	<Event owner='com.whirled.avrg:GameSubControlServer' name='playerQuitGame' type='com.whirled.avrg.AVRGameControlEvent' >
<description><![CDATA[
 Dispatched when a player leaves the game. This event is guaranteed to be the last event
 concerning a particular player during that player's session. Any requests related to the player
 will fail after the player has quit. The event will normally be immediately preceded by a
 <code>LEFT_ROOM</code> event.
  ]]></description>
<eventType><![CDATA[com.whirled.avrg.AVRGameControlEvent.PLAYER_QUIT_GAME
 ]]></eventType>
<see><![CDATA[com.whirled.avrg.AVRGamePlayerEvent#LEFT_ROOM
 ]]></see>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.avrg:GameSubControlServer' name='playerJoinedGame' type='com.whirled.avrg.AVRGameControlEvent' >
<description><![CDATA[
 Dispatched when a new player joins the game. This event is guaranteed to be the first event
 concerning a particular player during that player's session. It will normally be followed
 immediately by a <code>ENTERED_ROOM</code> event.
  ]]></description>
<eventType><![CDATA[com.whirled.avrg.AVRGameControlEvent.PLAYER_JOINED_GAME
 ]]></eventType>
<see><![CDATA[com.whirled.avrg.AVRGamePlayerEvent#ENTERED_ROOM
 ]]></see>
	</Event>
</metadata>
</classRec>
<method name='GameSubControlServer' fullname='com.whirled.avrg:GameSubControlServer/GameSubControlServer' isStatic='false' isFinal='false' isOverride='false'  param_names='ctrl' param_types='com.whirled:AbstractControl' param_defaults='undefined' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='createSubControls' fullname='com.whirled.avrg:GameSubControlServer/protected:createSubControls' isStatic='false' isFinal='false' isOverride='true'  result_type='Array'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dispatchFriend' fullname='com.whirled.avrg:GameSubControlServer/com.whirled.avrg:dispatchFriend' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='sendMessage' fullname='com.whirled.avrg:GameSubControlServer/sendMessage' isStatic='false' isFinal='false' isOverride='false'  param_names='name;value' param_types='String;Object' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Sends a message to all players in this game. Use carefully since the resulting outgoing
     message load could be significant. Games that overload the server are subject to
     discretionary action. Players receive game messages by adding a listener to the
     <code>GameSubControlClient</code>.
     ]]></description>
<see><![CDATA[GameSubControlClient#event:MsgReceived
     ]]></see>
</method>
<method name='props' fullname='com.whirled.avrg:GameSubControlServer/props/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.net:PropertySubControl'>
<description><![CDATA[
     Accesses the global properties for this game. Game properties marked as such will be
     persisted  and restored whenever the server agent starts. Persistent properties should
     only be used when genuinely necessary.
          ]]></description>
<see><![CDATA[com.whirled.net.NetConstants#makePersistent()
     ]]></see>
</method>
<field name='_props' fullname='com.whirled.avrg:GameSubControlServer/protected:_props' type='com.whirled.net.impl:PropertySubControlImpl' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='GameSubControlClient' fullname='com.whirled.avrg:GameSubControlClient' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/GameSubControlClient.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled.avrg:GameSubControlBase' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides AVR client game services.
 ]]></description>
<see><![CDATA[AVRGameControl#game
 ]]></see>
</classRec>
<method name='GameSubControlClient' fullname='com.whirled.avrg:GameSubControlClient/GameSubControlClient' isStatic='false' isFinal='false' isOverride='false'  param_names='ctrl' param_types='com.whirled:AbstractControl' param_defaults='undefined' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='createSubControls' fullname='com.whirled.avrg:GameSubControlClient/protected:createSubControls' isStatic='false' isFinal='false' isOverride='true'  result_type='Array'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setUserProps' fullname='com.whirled.avrg:GameSubControlClient/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='props' fullname='com.whirled.avrg:GameSubControlClient/props/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.net:PropertyGetSubControl'>
<description><![CDATA[
     Accesses the read-only properties associated with this game. To change properties use your
     server agent's <code>GameSubControlServer</code>'s <code>props</code>.
     ]]></description>
<see><![CDATA[GameSubControlServer#props
     ]]></see>
</method>
<field name='_props' fullname='com.whirled.avrg:GameSubControlClient/protected:_props' type='com.whirled.net.impl:PropertyGetSubControlImpl' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='OfflinePlayerPropertyControl' fullname='com.whirled.avrg:OfflinePlayerPropertyControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/OfflinePlayerPropertyControl.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled:TargetedSubControl' interfaces='com.whirled.net:PropertySubControl' isFinal='false' isDynamic='false' >
</classRec>
<method name='OfflinePlayerPropertyControl' fullname='com.whirled.avrg:OfflinePlayerPropertyControl/OfflinePlayerPropertyControl' isStatic='false' isFinal='false' isOverride='false'  param_names='parent;playerId;props' param_types='com.whirled:AbstractControl;int;Object' param_defaults='undefined;undefined;undefined' result_type='*'>
</method>
<method name='getPropertyNames' fullname='com.whirled.avrg:OfflinePlayerPropertyControl/getPropertyNames' isStatic='false' isFinal='false' isOverride='false'  param_names='prefix' param_types='String' param_defaults='' result_type='Array'>
<description><![CDATA[ 
     Get the names of all currently-set properties that begin with the specified prefix.
     Calling this method results in no network traffic.
     ]]></description>
</method>
<method name='setAt' fullname='com.whirled.avrg:OfflinePlayerPropertyControl/setAt' isStatic='false' isFinal='false' isOverride='false'  param_names='propName;index;value;immediate' param_types='String;int;Object;Boolean' param_defaults='undefined;undefined;undefined;false' result_type='void'>
<description><![CDATA[ 
     Update one element of an Array.<br/>
     <b>Note</b>: Unlike setIn(), this update will fail silently if the index is out of
     bounds or if there is no array currently set at the specified property name.
     Furthermore, if you set the element with immediate=true, there are two updates:
     one locally that happens right away and the update on the server that will be
     dispatched back to all the clients. Either or both can fail, so be sure to set the Array up
     first using set().
          ]]></description>
<param><![CDATA[propName the name of the property to modify.
     ]]></param>
<param><![CDATA[index the array index of the element to update.
     ]]></param>
<param><![CDATA[value the value to set.
     ]]></param>
<param><![CDATA[immediate if true, the value is updated immediately in the local object. Otherwise
     any old value will remain in effect until the ElementChangedEvent arrives after
     a round-trip to the server.
          ]]></param>
</method>
<method name='setIn' fullname='com.whirled.avrg:OfflinePlayerPropertyControl/setIn' isStatic='false' isFinal='false' isOverride='false'  param_names='propName;key;value;immediate' param_types='String;int;Object;Boolean' param_defaults='undefined;undefined;undefined;false' result_type='void'>
<description><![CDATA[ 
     Update one element of a Dictionary.<br/>
     <b>Note</b>: Unlike setAt(), this will usually work. No key is out of range, obviously,
     and if you set a value in a property that was previously null, a new Dictionary will
     be created to hold your value. If a non-Dictionary property is already stored with the
     specified name then this will fail silently on the server. But: don't do that!
     It would be pretty bad style to store two different types of property under the same name.
          ]]></description>
<param><![CDATA[propName the name of the property to modify.
     ]]></param>
<param><![CDATA[key the key of the element to update.
     ]]></param>
<param><![CDATA[value the value to set. Passing null removes the specified key from the Dictionary.
     ]]></param>
<param><![CDATA[immediate if true, the value is updated immediately in the local object. Otherwise
     any old value will remain in effect until the ElementChangedEvent arrives after
     a round-trip to the server.
     ]]></param>
</method>
<method name='get' fullname='com.whirled.avrg:OfflinePlayerPropertyControl/get' isStatic='false' isFinal='false' isOverride='false'  param_names='propName' param_types='String' param_defaults='undefined' result_type='Object'>
<description><![CDATA[ ]]></description>
</method>
<method name='set' fullname='com.whirled.avrg:OfflinePlayerPropertyControl/set' isStatic='false' isFinal='false' isOverride='false'  param_names='propName;value;immediate' param_types='String;Object;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[ ]]></description>
</method>
<field name='_props' fullname='com.whirled.avrg:OfflinePlayerPropertyControl/protected:_props' type='Object' isStatic='false' isConst='false' >
</field>
<classRec name='RoomSubControlBase' fullname='com.whirled.avrg:RoomSubControlBase' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/RoomSubControlBase.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled:TargetedSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides AVR services for a single room to clients and server agents.
 ]]></description>
<metadata>
	<Event owner='com.whirled.avrg:RoomSubControlBase' name='musicStopped' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when music stops playing in the room.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.MUSIC_STOPPED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.avrg:RoomSubControlBase' name='musicStarted' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when music starts playing in the room. If the current user can hear it,
 id3 data aybe available shortly after this event.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.MUSIC_STARTED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.avrg:RoomSubControlBase' name='signalReceived' type='com.whirled.avrg.AVRGameRoomEvent' >
<description><![CDATA[
 Dispatched when a signal has been received in this room.
  ]]></description>
<eventType><![CDATA[com.whirled.avrg.AVRGameRoomEvent.SIGNAL_RECEIVED
 ]]></eventType>
<see><![CDATA[com.whirled.EntityControl#sendSignal()
 ]]></see>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.avrg:RoomSubControlBase' name='mobControlAvailable' type='com.whirled.avrg.AVRGameRoomEvent' >
<description><![CDATA[
 Dispatched when a MOB has been created.
  ]]></description>
<eventType><![CDATA[com.whirled.avrg.AVRGameRoomEvent.MOB_CONTROL_AVAILABLE
 ]]></eventType>
<see><![CDATA[http://wiki.whirled.com/Mobs
 ]]></see>
<see><![CDATA[RoomSubControlServer#spawnMob()
 ]]></see>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.avrg:RoomSubControlBase' name='avatarChanged' type='com.whirled.avrg.AVRGameRoomEvent' >
<description><![CDATA[
 Dispatched when something has changed about a player's avatar in this room.
  ]]></description>
<eventType><![CDATA[com.whirled.avrg.AVRGameRoomEvent.AVATAR_CHANGED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.avrg:RoomSubControlBase' name='playerMoved' type='com.whirled.avrg.AVRGameRoomEvent' >
<description><![CDATA[
 Dispatched when a player in this room takes up a new location. The event is dispatched
 immediately when the move is initiated, not when the avatar arrives at the location. The movement
 itself may take a potentially long time.
  ]]></description>
<eventType><![CDATA[com.whirled.avrg.AVRGameRoomEvent.PLAYER_MOVED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.avrg:RoomSubControlBase' name='playerLeft' type='com.whirled.avrg.AVRGameRoomEvent' >
<description><![CDATA[
 Dispatched either when somebody in this room left our current game, or somebody playing the game
 left this room. On the client, the event is only dispatched if the player leaving the room is not
 the local player. On the server agent, it is always dispatched.
  ]]></description>
<eventType><![CDATA[com.whirled.avrg.AVRGameRoomEvent.PLAYER_LEFT
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.avrg:RoomSubControlBase' name='playerEntered' type='com.whirled.avrg.AVRGameRoomEvent' >
<description><![CDATA[
 Dispatched either when somebody in this room entered our current game, or somebody playing the
 game entered this room. On the client, the event is only dispatched if the player entering the
 room is not the local player. On the server agent, it is always dispatched.
  ]]></description>
<eventType><![CDATA[com.whirled.avrg.AVRGameRoomEvent.PLAYER_ENTERED
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='RoomSubControlBase' fullname='com.whirled.avrg:RoomSubControlBase/RoomSubControlBase' isStatic='false' isFinal='false' isOverride='false'  param_names='ctrl;targetId' param_types='com.whirled:AbstractControl;int' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='actorAppearanceChanged_v1' fullname='com.whirled.avrg:RoomSubControlBase/com.whirled.avrg:actorAppearanceChanged_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='actorStateSet_v1' fullname='com.whirled.avrg:RoomSubControlBase/com.whirled.avrg:actorStateSet_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId;state' param_types='int;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='callHostCodeFriend' fullname='com.whirled.avrg:RoomSubControlBase/com.whirled.avrg:callHostCodeFriend' isStatic='false' isFinal='false' isOverride='false'  param_names='name;args' param_types='String;restParam' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getAvatarInfo' fullname='com.whirled.avrg:RoomSubControlBase/getAvatarInfo' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId' param_types='int' param_defaults='undefined' result_type='com.whirled.avrg:AVRGameAvatar'>
<description><![CDATA[
     Gets all available information on the avatar of a player with the given id.
     ]]></description>
<throws><![CDATA[Error if the player is not here
     ]]></throws>
</method>
<method name='getOccupantIds' fullname='com.whirled.avrg:RoomSubControlBase/getOccupantIds' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Gets an array of the ids of all the occupants in this room.
     The occupants is a superset of the players.
     ]]></description>
</method>
<method name='getOccupantName' fullname='com.whirled.avrg:RoomSubControlBase/getOccupantName' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId' param_types='int' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Get the name of the specified occupant, who may be a player, or null if not found.
          NOTE: names are not unique and can change at any time. You must use the playerId to
     identify someone, and only retrieve the name for display purposes.
     ]]></description>
</method>
<method name='getPlayerIds' fullname='com.whirled.avrg:RoomSubControlBase/getPlayerIds' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Gets an array of the ids of all the players in this room.
     The players are a subset of the occupants.
     ]]></description>
</method>
<method name='getRoomBounds' fullname='com.whirled.avrg:RoomSubControlBase/getRoomBounds' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Rectangle'>
<description><![CDATA[
     Get the room's bounds in pixel coordinates. This is essentially the width and height
     of the room's decor. It is an absolute coordinate system, i.e. (x, y) for one client
     here is the same (x, y) as for another.
          ]]></description>
<return><![CDATA[a Rectangle anchored at (0, 0)
     ]]></return>
</method>
<method name='getRoomId' fullname='com.whirled.avrg:RoomSubControlBase/getRoomId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Gets the id of this room. Room ids are the same as scene ids and are the same each time the
     room is visited. They may also be used directly to access a scene
     (www.whirled.com/#world-s{sceneId}).
     ]]></description>
</method>
<method name='getRoomName' fullname='com.whirled.avrg:RoomSubControlBase/getRoomName' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Returns the name of this room.
     ]]></description>
</method>
<method name='getSpawnedMobs' fullname='com.whirled.avrg:RoomSubControlBase/getSpawnedMobs' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Returns an array of <code>String</code>s corresponding to the ids of all the MOBs in this
     room.
     ]]></description>
<see><![CDATA[http://wiki.whirled.com/Mobs
     ]]></see>
</method>
<method name='isPlayerHere' fullname='com.whirled.avrg:RoomSubControlBase/isPlayerHere' isStatic='false' isFinal='false' isOverride='false'  param_names='id' param_types='int' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Tests if a player of a given id is in this room.
     ]]></description>
</method>
<method name='mobAppearanceChanged_v1' fullname='com.whirled.avrg:RoomSubControlBase/com.whirled.avrg:mobAppearanceChanged_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='mobId;locArray;orient;moving;idle' param_types='String;Array;Number;Boolean;Boolean' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='mobRemoved_v1' fullname='com.whirled.avrg:RoomSubControlBase/com.whirled.avrg:mobRemoved_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='id' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='musicStartStop_v1' fullname='com.whirled.avrg:RoomSubControlBase/com.whirled.avrg:musicStartStop_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='started' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='playerEntered_v1' fullname='com.whirled.avrg:RoomSubControlBase/com.whirled.avrg:playerEntered_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='id' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='playerLeft_v1' fullname='com.whirled.avrg:RoomSubControlBase/com.whirled.avrg:playerLeft_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='id' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='playerMoved_v1' fullname='com.whirled.avrg:RoomSubControlBase/com.whirled.avrg:playerMoved_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='id' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setMobSubControl' fullname='com.whirled.avrg:RoomSubControlBase/com.whirled.avrg:setMobSubControl' isStatic='false' isFinal='false' isOverride='false'  param_names='mobId;ctrl;delayEvent' param_types='String;com.whirled.avrg:MobSubControlBase;Boolean' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setUserProps' fullname='com.whirled.avrg:RoomSubControlBase/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='signalReceived_v1' fullname='com.whirled.avrg:RoomSubControlBase/com.whirled.avrg:signalReceived_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='name;arg' param_types='String;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_mobControls' fullname='com.whirled.avrg:RoomSubControlBase/protected:_mobControls' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='PlayerSubControlBase' fullname='com.whirled.avrg:PlayerSubControlBase' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/PlayerSubControlBase.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled:TargetedSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides services for a single player of an AVRG to the server agent and client.
 ]]></description>
<metadata>
	<Event owner='com.whirled.avrg:PlayerSubControlBase' name='taskCompleted' type='com.whirled.avrg.AVRGamePlayerEvent' >
<description><![CDATA[
 Dispatched when this player completes a task and receives a coin payout.
  ]]></description>
<eventType><![CDATA[com.whirled.avrg.AVRGamePlayerEvent.TASK_COMPLETED
 ]]></eventType>
<see><![CDATA[#completeTask()
 ]]></see>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.avrg:PlayerSubControlBase' name='leftRoom' type='com.whirled.avrg.AVRGamePlayerEvent' >
<description><![CDATA[
 Dispatched when this player has left a room (or has chosen to leave the game).
  ]]></description>
<eventType><![CDATA[com.whirled.avrg.AVRGamePlayerEvent.LEFT_ROOM
 ]]></eventType>
<see><![CDATA[com.whirled.avrg.GameSubControlServer#event:playerQuitGame
 ]]></see>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.avrg:PlayerSubControlBase' name='enteredRoom' type='com.whirled.avrg.AVRGamePlayerEvent' >
<description><![CDATA[
 Dispatched when this player has just entered a room (or was already in the room and just started
 playing the game).
  ]]></description>
<eventType><![CDATA[com.whirled.avrg.AVRGamePlayerEvent.ENTERED_ROOM
 ]]></eventType>
<see><![CDATA[com.whirled.avrg.GameSubControlServer#event:playerJoinedGame
 ]]></see>
	</Event>
</metadata>
</classRec>
<method name='PlayerSubControlBase' fullname='com.whirled.avrg:PlayerSubControlBase/PlayerSubControlBase' isStatic='false' isFinal='false' isOverride='false'  param_names='ctrl;targetId' param_types='com.whirled:AbstractControl;int' param_defaults='undefined;0' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='completeTask' fullname='com.whirled.avrg:PlayerSubControlBase/completeTask' isStatic='false' isFinal='false' isOverride='false'  param_names='taskId;payout' param_types='String;Number' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     This method calculates and awards a coin payout for the player. The actual amount is not
     under the direct control of the developer, but is calculated by Whirled from factors such
     as the number of people playing the game and the frequency and size of payouts the game
     makes.
          The payout factor is a number that should lie between 0 and 1, and the coin payout is a
     multiple of this amount. This means if the game calls this method with a factor of 0.3 for
     one player and 0.6 for another, the second player is guaranteed to get twice as many coins
     as the first. Use this guarantee to develop a fair payout structure for your game.
          The taskId is not used by the server at all. Its only purpose is to be echoed back in the
     AVRGamePlayerEvent.TASK_COMPLETED event that is dispatched as a result of this call. This
     event contains the taskId that was sent in along with the precise number of coins that were
     actually awarded to the player. The typical use of this event would be to display a nice
     popup window or graphical effect to salute the player's achivement, optionally including
     the coin amount.
     ]]></description>
</method>
<method name='createSubControls' fullname='com.whirled.avrg:PlayerSubControlBase/protected:createSubControls' isStatic='false' isFinal='false' isOverride='true'  result_type='Array'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='deactivateGame' fullname='com.whirled.avrg:PlayerSubControlBase/deactivateGame' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Quits the game for this player. This method should be called for example when the user
     closes the HUD of a game.
     ]]></description>
</method>
<method name='enteredRoom_v1' fullname='com.whirled.avrg:PlayerSubControlBase/com.whirled.avrg:enteredRoom_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='newScene' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getPartyId' fullname='com.whirled.avrg:PlayerSubControlBase/getPartyId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get the party id of this player.
     ]]></description>
</method>
<method name='getPlayerId' fullname='com.whirled.avrg:PlayerSubControlBase/getPlayerId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Returns the id of this player. This id is the member id and can be used to view the member's
     profile (www.whirled.com/#people-{id}).
     ]]></description>
</method>
<method name='getPlayerItemPacks' fullname='com.whirled.avrg:PlayerSubControlBase/getPlayerItemPacks' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Returns all item packs owned by this client's player (the default) or a specified player.
     The packs are returned as an array of objects with the following properties:
          <pre>
     ident - string identifier of item pack
     name - human readable name of item pack
     mediaURL - URL for item pack content
     count - the number of copies of this item pack owned by this player
     </pre>
     ]]></description>
</method>
<method name='getPlayerLevelPacks' fullname='com.whirled.avrg:PlayerSubControlBase/getPlayerLevelPacks' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Returns all level packs owned by this client's player (the default) or a specified player.
     The packs are returned as an array of objects with the following properties:
          <pre>
     ident - string identifier of item pack
     name - human readable name of item pack
     mediaURL - URL for item pack content
     premium - boolean indicating that content is premium or not
     </pre>
     ]]></description>
</method>
<method name='getPlayerName' fullname='com.whirled.avrg:PlayerSubControlBase/getPlayerName' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Returns the name of this player.
     ]]></description>
</method>
<method name='getRoomId' fullname='com.whirled.avrg:PlayerSubControlBase/getRoomId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Accesses the id of the room that this player is in. Returns 0 if the player is not in
     any room. This may happen immediately after the player joins the game or just after
     the player leaves another room.
     ]]></description>
</method>
<method name='holdsTrophy' fullname='com.whirled.avrg:PlayerSubControlBase/holdsTrophy' isStatic='false' isFinal='false' isOverride='false'  param_names='ident' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Returns true if this client's player (the default) or a specified player has the trophy
     with the specified identifier.
     ]]></description>
</method>
<method name='leftRoom_v1' fullname='com.whirled.avrg:PlayerSubControlBase/com.whirled.avrg:leftRoom_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='scene' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='moveToRoom' fullname='com.whirled.avrg:PlayerSubControlBase/moveToRoom' isStatic='false' isFinal='false' isOverride='false'  param_names='roomId;exitCoords' param_types='int;Array' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Instructs this player's client to move to the specified room. The given exit coordinates are
     a 3-tuple specifying in room coordinates where the avatar should appear to walk to when
     leaving the room. If not given, the avatar will just disappear.
          <p>Hard-wiring valid room ids should be avoided. Room ids can be obtained from properties
     stored by an admininstrative interface or from a server agent message containing currently
     active rooms.</p>
          <p>Note that this is not guaranteed to succeed. The request may be denied.</p>
     ]]></description>
<see><![CDATA[http://wiki.whirled.com/Coordinate_systems
     ]]></see>
<see><![CDATA[AVRGamePlayerEvent#ENTERED_ROOM
     ]]></see>
</method>
<method name='playAvatarAction' fullname='com.whirled.avrg:PlayerSubControlBase/playAvatarAction' isStatic='false' isFinal='false' isOverride='false'  param_names='action' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Plays an action on this players avatar.
     ]]></description>
<see><![CDATA[com.whirled.AvatarControl#event:actionTriggered
     ]]></see>
</method>
<method name='setAvatarLocation' fullname='com.whirled.avrg:PlayerSubControlBase/setAvatarLocation' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y;z;orient' param_types='Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Sets the location and orientation of this player's avatar in room coordinates.
     ]]></description>
<see><![CDATA[http://wiki.whirled.com/Coordinate_systems
     ]]></see>
</method>
<method name='setAvatarMoveSpeed' fullname='com.whirled.avrg:PlayerSubControlBase/setAvatarMoveSpeed' isStatic='false' isFinal='false' isOverride='false'  param_names='pixelsPerSecond' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Sets the move speed of this player's avatar. TODO: implement and unmark private
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setAvatarOrientation' fullname='com.whirled.avrg:PlayerSubControlBase/setAvatarOrientation' isStatic='false' isFinal='false' isOverride='false'  param_names='orient' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Sets the orientation of this player's avatar. TODO: implement and unmark private
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setAvatarState' fullname='com.whirled.avrg:PlayerSubControlBase/setAvatarState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Sets the stats of this player's avatar.
     ]]></description>
<see><![CDATA[com.whirled.ActorControl#event:stateChanged
     ]]></see>
</method>
<method name='taskCompleted_v1' fullname='com.whirled.avrg:PlayerSubControlBase/com.whirled.avrg:taskCompleted_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='task;amount' param_types='String;int' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='props' fullname='com.whirled.avrg:PlayerSubControlBase/props/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.net:PropertySubControl'>
<description><![CDATA[
     Accesses the read-write properties of this player. Properties marked as such will be
     persisted and restored whenever the player joins the game. Persistent properties should
     only be used when genuinely necessary. Persisting properties on a guest player will have
     no effect.
          ]]></description>
<see><![CDATA[com.whirled.net.NetConstants#makePersistent()
     ]]></see>
</method>
<field name='_props' fullname='com.whirled.avrg:PlayerSubControlBase/protected:_props' type='com.whirled.net.impl:PropertySubControlImpl' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='PropControl' fullname='com.whirled.avrg:PropControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/PropControl.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled:FurniControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Defines actions, accessors and callbacks available to all Props.
 ]]></description>
</classRec>
<method name='PropControl' fullname='com.whirled.avrg:PropControl/PropControl' isStatic='false' isFinal='false' isOverride='false'  param_names='disp' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Creates a controller for a Prop. The display object is the Prop's visualization.
     ]]></description>
</method>
<method name='activateGame' fullname='com.whirled.avrg:PropControl/activateGame' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<method name='createSubControls' fullname='com.whirled.avrg:PropControl/protected:createSubControls' isStatic='false' isFinal='false' isOverride='true'  result_type='Array'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isGameActivated' fullname='com.whirled.avrg:PropControl/isGameActivated' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
</method>
<classRec name='RoomSubControlServer' fullname='com.whirled.avrg:RoomSubControlServer' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/RoomSubControlServer.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled.avrg:RoomSubControlBase' interfaces='com.whirled.net:MessageSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides AVR services for a single room to server agents only.
 ]]></description>
<see><![CDATA[AVRServerGameControl#getRoom()
 ]]></see>
<metadata>
	<Event owner='com.whirled.avrg:RoomSubControlServer' name='roomUnloaded' type='com.whirled.avrg.AVRGameRoomEvent' >
<description><![CDATA[
 Dispatched when a room has unloaded and is no longer accessible. Note that once this has
 happened, any further API methods called (except getRoomId()) will throw errors and no
 further events will be dispatched on it. The purpose of this event is for local cleanup,
 deregistration of event listeners, clearing out data structures and the like.
  ]]></description>
<eventType><![CDATA[com.whirled.avrg.AVRGameRoomEvent.ROOM_UNLOADED
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='RoomSubControlServer' fullname='com.whirled.avrg:RoomSubControlServer/RoomSubControlServer' isStatic='false' isFinal='false' isOverride='false'  param_names='ctrl;targetId' param_types='com.whirled:AbstractControl;int' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='createSubControls' fullname='com.whirled.avrg:RoomSubControlServer/protected:createSubControls' isStatic='false' isFinal='false' isOverride='true'  result_type='Array'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='despawnMob' fullname='com.whirled.avrg:RoomSubControlServer/despawnMob' isStatic='false' isFinal='false' isOverride='false'  param_names='id' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Destroys a previosuly spawned MOB in this room.
     ]]></description>
<see><![CDATA[#spawnMob()
     ]]></see>
</method>
<method name='getMobSubControl' fullname='com.whirled.avrg:RoomSubControlServer/getMobSubControl' isStatic='false' isFinal='false' isOverride='false'  param_names='id' param_types='String' param_defaults='undefined' result_type='com.whirled.avrg:MobSubControlServer'>
<description><![CDATA[
     Gets a MOB previously spawned in this room with the given id. Null is returned if there is
     no MOB with that id.
     ]]></description>
</method>
<method name='getRoomId' fullname='com.whirled.avrg:RoomSubControlServer/getRoomId' isStatic='false' isFinal='false' isOverride='true'  result_type='int'>
<description><![CDATA[ 
     Gets the id of this room. Room ids are the same as scene ids and are the same each time the
     room is visited. They may also be used directly to access a scene
     (www.whirled.com/#world-s{sceneId}).
     ]]></description>
</method>
<method name='gotHostProps' fullname='com.whirled.avrg:RoomSubControlServer/protected:gotHostProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='gotHostPropsFriend' fullname='com.whirled.avrg:RoomSubControlServer/com.whirled.avrg:gotHostPropsFriend' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='mobSpawned_v1' fullname='com.whirled.avrg:RoomSubControlServer/com.whirled.avrg:mobSpawned_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='mobId' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='roomUnloaded_v1' fullname='com.whirled.avrg:RoomSubControlServer/com.whirled.avrg:roomUnloaded_v1' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='sendMessage' fullname='com.whirled.avrg:RoomSubControlServer/sendMessage' isStatic='false' isFinal='false' isOverride='false'  param_names='name;value' param_types='String;Object' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Sends a message to all the players that are in the room. Clients receive the message by
     listening for <code>MESSAGE_RECEIVED</code> on <code>RoomSubControlClient</code>.
     ]]></description>
<see><![CDATA[RoomSubControlClient#event:MsgReceived
     ]]></see>
</method>
<method name='sendSignal' fullname='com.whirled.avrg:RoomSubControlServer/sendSignal' isStatic='false' isFinal='false' isOverride='false'  param_names='name;value' param_types='String;Object' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Sends a signal to all instances of all entities in the room. The same size restrictions as
     EntityControl.sendSignal() apply here too.
     ]]></description>
<see><![CDATA[com.whirled.EntityControl#sendSignal()
     ]]></see>
</method>
<method name='spawnMob' fullname='com.whirled.avrg:RoomSubControlServer/spawnMob' isStatic='false' isFinal='false' isOverride='false'  param_names='id;name;x;y;z' param_types='String;String;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Creates a new MOB in this room. The id identifies the instance of the MOB and the name
     specifies the type. The call will do nothing if a MOB already exists in this room with the
     given id. The coordinates specify the initial location of the MOB in room coordinates. The
     visual representation of the MOB is created on the clients using the client's sprite exporter
     callback.
     ]]></description>
<see><![CDATA[LocalSubControl#setMobSpriteExporter()
     ]]></see>
<see><![CDATA[#despawnMob()
     ]]></see>
<see><![CDATA[RoomSubControlBase#getSpawnedMobs()
     ]]></see>
<see><![CDATA[http://wiki.whirled.com/Coordinate_systems
     ]]></see>
<see><![CDATA[RoomSubControlBase#event:mobControlAvailable
     ]]></see>
</method>
<method name='props' fullname='com.whirled.avrg:RoomSubControlServer/props/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.net:PropertySubControl'>
<description><![CDATA[
     Accesses the properties for this room. Room properties marked as such will be persisted
     and restored whenever the room is occupied anew.
          ]]></description>
<see><![CDATA[com.whirled.net.NetConstants#makePersistent()
     ]]></see>
</method>
<field name='_props' fullname='com.whirled.avrg:RoomSubControlServer/protected:_props' type='com.whirled.net:PropertySubControl' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='RoomSubControlClient' fullname='com.whirled.avrg:RoomSubControlClient' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/RoomSubControlClient.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled.avrg:RoomSubControlBase' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides AVR services for a client player's current room.
 ]]></description>
<see><![CDATA[AVRGameControl#room
 ]]></see>
<metadata>
	<Event owner='com.whirled.avrg:RoomSubControlClient' name='musicId3' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when id3 data is known for a song.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.MUSIC_ID3
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.avrg:RoomSubControlClient' name='chatReceived' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched to entities when they overhear chatter in the room.
 
 ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.CHAT_RECEIVED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.avrg:RoomSubControlClient' name='MsgReceived' type='com.whirled.net.MessageReceivedEvent' >
<description><![CDATA[
 Dispatched when a message arrives with information that is not part of the shared game state.
  ]]></description>
<eventType><![CDATA[com.whirled.net.MessageReceivedEvent.MESSAGE_RECEIVED
 ]]></eventType>
<see><![CDATA[RoomSubControlServer#sendMessage()
 ]]></see>
	</Event>
</metadata>
</classRec>
<method name='RoomSubControlClient' fullname='com.whirled.avrg:RoomSubControlClient/RoomSubControlClient' isStatic='false' isFinal='false' isOverride='false'  param_names='ctrl;targetId' param_types='com.whirled:AbstractControl;int' param_defaults='undefined;0' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='canManageRoom' fullname='com.whirled.avrg:RoomSubControlClient/canManageRoom' isStatic='false' isFinal='false' isOverride='false'  param_names='memberId' param_types='int' param_defaults='0' result_type='Boolean'>
<description><![CDATA[
     Can the specified memberId manage the current room?
     ]]></description>
</method>
<method name='createSubControls' fullname='com.whirled.avrg:RoomSubControlClient/protected:createSubControls' isStatic='false' isFinal='false' isOverride='true'  result_type='Array'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getEntityIds' fullname='com.whirled.avrg:RoomSubControlClient/getEntityIds' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='null' result_type='Array'>
<description><![CDATA[
     Enumerates the ids of all entities in this room.
          ]]></description>
<param><![CDATA[type an optional filter to restrict the results to a particular type of entity,
     currently one of 'furni', 'avatar' or 'pet'.
     ]]></param>
</method>
<method name='getEntityProperty' fullname='com.whirled.avrg:RoomSubControlClient/getEntityProperty' isStatic='false' isFinal='false' isOverride='false'  param_names='key;entityId' param_types='String;String' param_defaults='undefined;null' result_type='Object'>
<description><![CDATA[
     Looks up and returns the specified property for the specified entity.
     Returns null if the entity does not exist or the entity has no such property.
     ]]></description>
</method>
<method name='getMobSubControl' fullname='com.whirled.avrg:RoomSubControlClient/getMobSubControl' isStatic='false' isFinal='false' isOverride='false'  param_names='id' param_types='String' param_defaults='undefined' result_type='com.whirled.avrg:MobSubControlClient'>
<description><![CDATA[
     Accesses a previosly spawned MOB in this room.
     ]]></description>
<see><![CDATA[http://wiki.whirled.com/Mobs
     ]]></see>
<see><![CDATA[RoomSubControlBase#event:mobControlAvailable
     ]]></see>
</method>
<method name='getMusicId3' fullname='com.whirled.avrg:RoomSubControlClient/getMusicId3' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Get the id3 metadata of the currently playing music.
     This will be an Object roughly in the format of flash.media.Id3Info, except
     that only the "raw" names of id3 tags are supported.
     http://www.id3.org
     ]]></description>
</method>
<method name='getRoomId' fullname='com.whirled.avrg:RoomSubControlClient/getRoomId' isStatic='false' isFinal='false' isOverride='true'  result_type='int'>
<description><![CDATA[ 
     Gets the id of this room. Room ids are the same as scene ids and are the same each time the
     room is visited. They may also be used directly to access a scene
     (www.whirled.com/#world-s{sceneId}).
     ]]></description>
</method>
<method name='leftRoom' fullname='com.whirled.avrg:RoomSubControlClient/com.whirled.avrg:leftRoom' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='messageReceived_v1' fullname='com.whirled.avrg:RoomSubControlClient/com.whirled.avrg:messageReceived_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='name;value;sender' param_types='String;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='musicId3_v1' fullname='com.whirled.avrg:RoomSubControlClient/com.whirled.avrg:musicId3_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='id3' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='receivedChat_v2' fullname='com.whirled.avrg:RoomSubControlClient/com.whirled.avrg:receivedChat_v2' isStatic='false' isFinal='false' isOverride='false'  param_names='entityId;msg' param_types='String;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setUserProps' fullname='com.whirled.avrg:RoomSubControlClient/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='props' fullname='com.whirled.avrg:RoomSubControlClient/props/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.net:PropertyGetSubControl'>
<description><![CDATA[
     Accesses the read-only properties associated with this room. To change properties use your
     server agent's <code>RoomSubControlServer</code>'s <code>props</code>.
     ]]></description>
<see><![CDATA[RoomSubControlServer#props
     ]]></see>
</method>
<field name='_props' fullname='com.whirled.avrg:RoomSubControlClient/protected:_props' type='com.whirled.net.impl:PropertyGetSubControlImpl' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='PlayerSubControlClient' fullname='com.whirled.avrg:PlayerSubControlClient' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/PlayerSubControlClient.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled.avrg:PlayerSubControlBase' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides services for the client's player of an AVRG.
 ]]></description>
<see><![CDATA[AVRGameControl#player
 ]]></see>
<metadata>
	<Event owner='com.whirled.avrg:PlayerSubControlClient' name='PlayerContentConsumed' type='com.whirled.game.GameContentEvent' >
<description><![CDATA[
 Dispatched when this player has consumed an item pack.
  ]]></description>
<eventType><![CDATA[com.whirled.game.GameContentEvent.PLAYER_CONTENT_CONSUMED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.avrg:PlayerSubControlClient' name='MsgReceived' type='com.whirled.net.MessageReceivedEvent' >
<description><![CDATA[
 Dispatched when a message arrives with information that is not part of the shared game state.
  ]]></description>
<eventType><![CDATA[com.whirled.net.MessageReceivedEvent.MESSAGE_RECEIVED
 ]]></eventType>
<see><![CDATA[PlayerSubControlServer#sendMessage()
 ]]></see>
	</Event>
</metadata>
</classRec>
<method name='PlayerSubControlClient' fullname='com.whirled.avrg:PlayerSubControlClient/PlayerSubControlClient' isStatic='false' isFinal='false' isOverride='false'  param_names='ctrl' param_types='com.whirled:AbstractControl' param_defaults='undefined' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getAvatarMasterItemId' fullname='com.whirled.avrg:PlayerSubControlClient/getAvatarMasterItemId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Returns the master item id of the avatar being worn by the player, or zero for
     guests (ghosts) or people wearing the default tofu. The master id will be the
     same for all purchased copies of a particular catalog avatar and will be a
     unique value for every original (non-catalog purchased) avatar item.
     ]]></description>
</method>
<method name='getPlayerId' fullname='com.whirled.avrg:PlayerSubControlClient/getPlayerId' isStatic='false' isFinal='false' isOverride='true'  result_type='int'>
<description><![CDATA[ 
     Returns the id of this player. This id is the member id and can be used to view the member's
     profile (www.whirled.com/#people-{id}).
     ]]></description>
</method>
<method name='getPlayerName' fullname='com.whirled.avrg:PlayerSubControlClient/getPlayerName' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ 
     Returns the name of this player.
     ]]></description>
</method>
<method name='player_contentConsumed_v1' fullname='com.whirled.avrg:PlayerSubControlClient/private:player_contentConsumed_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='type;ident;playerId' param_types='String;String;int' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<method name='player_messageReceived_v1' fullname='com.whirled.avrg:PlayerSubControlClient/private:player_messageReceived_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='name;value;sender' param_types='String;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
</method>
<method name='requestConsumeItemPack' fullname='com.whirled.avrg:PlayerSubControlClient/requestConsumeItemPack' isStatic='false' isFinal='false' isOverride='false'  param_names='ident;msg' param_types='String;String' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Requests to consume the specified item pack. The player must currently own at least one copy
     of the item pack. This will display a standard dialog asking the player if they wish to
     consume the pack.
          <p> If the player accepts the request to consume the item pack, a
     GameContentEvent.PLAYER_CONTENT_CONSUMED event will be dispatched on this control.
          ]]></description>
<param><![CDATA[ident the identifier of the item pack to be consumed.
     ]]></param>
<param><![CDATA[msg a message to display in the dialog to help the player understand what's going on.
          ]]></param>
<return><![CDATA[true if the dialog was shown, false if the dialog was not shown because the player
     is known not to own at least one copy of the item pack.
     ]]></return>
</method>
<method name='setUserProps' fullname='com.whirled.avrg:PlayerSubControlClient/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='PlayerSubControlServer' fullname='com.whirled.avrg:PlayerSubControlServer' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/avrg/PlayerSubControlServer.as' namespace='com.whirled.avrg' access='public' baseclass='com.whirled.avrg:PlayerSubControlBase' interfaces='com.whirled.net:MessageSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides the server agent for an AVR game with services related to a single player.
 ]]></description>
<see><![CDATA[AVRServerGameControl#getPlayer()
 ]]></see>
</classRec>
<method name='PlayerSubControlServer' fullname='com.whirled.avrg:PlayerSubControlServer/PlayerSubControlServer' isStatic='false' isFinal='false' isOverride='false'  param_names='ctrl;targetId' param_types='com.whirled:AbstractControl;int' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='awardPrize' fullname='com.whirled.avrg:PlayerSubControlServer/awardPrize' isStatic='false' isFinal='false' isOverride='false'  param_names='ident' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Awards the specified prize item to this player. If the supplied prize identifier is not
     valid, this will not be known until the request is processed on the server, so the method
     will return successfully but no prize will have been awarded. Thus you should be careful not
     to misspell your prize identifier in your code or in the associated prize item.
          <p> Note: a game is only allowed to award a prize once per game session. This is to guard
     against bugs that might try to award many hundreds of the same prize to a user while playing
     a game. If you eallywant to award multiple instances of a prize, you will need to make
     different prize items with unique identifiers which all reference the same target item. </p>
          <p> Note also: because a game anaward the same prize more than once if the player earns
     the prize in separate game sessions, a game that wishes to only award a prize once should
     couple the award of the prize with the award of a trophy and then structure their code like
     so: </p>
          <listing version="3.0">
     if (_ctrl.awardTrophy("special_award_trophy")) {
         _ctrl.awardPrize("special_award_avatar");
     }
     </listing>
          <p> The first time the player accomplishes the necessary goal, they will be awarded the
     trophy and the prize. Subsequently, awardTrophy() will return false indicating that the
     player already has the trophy in question and the prize will not be awarded. Alternatively
     the game could store whether or not the player has earned the prize in a user cookie. </p>
     ]]></description>
</method>
<method name='awardTrophy' fullname='com.whirled.avrg:PlayerSubControlServer/awardTrophy' isStatic='false' isFinal='false' isOverride='false'  param_names='ident' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Awards the specified trophy to this player. If the supplied trophy identifier is not valid,
     this will not be known until the request is processed on the server, so the method will
     return succcessfully but no trophy will be awarded. Thus, you should be careful not to
     misspell your trophy identifier in your code or in the associated trophy source item.
          ]]></description>
<return><![CDATA[true if the trophy was requested, false if the player already has that trophy.
     ]]></return>
</method>
<method name='getPlayerId' fullname='com.whirled.avrg:PlayerSubControlServer/getPlayerId' isStatic='false' isFinal='false' isOverride='true'  result_type='int'>
<description><![CDATA[ 
     Returns the id of this player. This id is the member id and can be used to view the member's
     profile (www.whirled.com/#people-{id}).
     ]]></description>
</method>
<method name='getPlayerName' fullname='com.whirled.avrg:PlayerSubControlServer/getPlayerName' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[ 
     Returns the name of this player.
     ]]></description>
</method>
<method name='gotHostPropsFriend' fullname='com.whirled.avrg:PlayerSubControlServer/com.whirled.avrg:gotHostPropsFriend' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='sendMessage' fullname='com.whirled.avrg:PlayerSubControlServer/sendMessage' isStatic='false' isFinal='false' isOverride='false'  param_names='name;value' param_types='String;Object' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Sends a message to this player only. Clients receive messages by listening for
     <code>MessageReceivedEvent</code>s on theis <code>PlayerSubControlClient</code>.
     ]]></description>
<see><![CDATA[PlayerSubControlClient#event:MsgReceived
     ]]></see>
</method>
<classRec name='UserChatEvent' fullname='com.whirled.game:UserChatEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/game/UserChatEvent.as' namespace='com.whirled.game' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Dispatched when a player speaks.
 ]]></description>
</classRec>
<method name='UserChatEvent' fullname='com.whirled.game:UserChatEvent/UserChatEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='speaker;message' param_types='int;String' param_defaults='undefined;undefined' result_type='*'>
</method>
<method name='clone' fullname='com.whirled.game:UserChatEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
</method>
<method name='toString' fullname='com.whirled.game:UserChatEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='message' fullname='com.whirled.game:UserChatEvent/message/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Get the content of the chat.
     ]]></description>
</method>
<method name='speaker' fullname='com.whirled.game:UserChatEvent/speaker/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get the name of the user who spoke.
     ]]></description>
</method>
<field name='USER_CHAT' fullname='com.whirled.game:UserChatEvent/USER_CHAT' type='String' isStatic='true' isConst='true' defaultValue='UserChat' >
<description><![CDATA[
     The type of a property change event.
     ]]></description>
<eventType><![CDATA[UserChat
     ]]></eventType>
</field>
<field name='_message' fullname='com.whirled.game:UserChatEvent/protected:_message' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_speaker' fullname='com.whirled.game:UserChatEvent/protected:_speaker' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='OccupantChangedEvent' fullname='com.whirled.game:OccupantChangedEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/game/OccupantChangedEvent.as' namespace='com.whirled.game' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Dispatched when an occupant enters or leaves.
  If a watcher becomes a player, you may get an OCCUPANT_LEFT event where player == false,
 followed immediately by an OCCUPANT_ENTERED event where player == true.
 ]]></description>
</classRec>
<method name='OccupantChangedEvent' fullname='com.whirled.game:OccupantChangedEvent/OccupantChangedEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;occupantId;player' param_types='String;int;Boolean' param_defaults='undefined;undefined;undefined' result_type='*'>
</method>
<method name='clone' fullname='com.whirled.game:OccupantChangedEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
</method>
<method name='toString' fullname='com.whirled.game:OccupantChangedEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='occupantId' fullname='com.whirled.game:OccupantChangedEvent/occupantId/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[ The occupantId of the occupant that entered or left. ]]></description>
</method>
<method name='player' fullname='com.whirled.game:OccupantChangedEvent/player/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[ Is/was the occupant a player? If false, they are/were a watcher. ]]></description>
</method>
<field name='OCCUPANT_ENTERED' fullname='com.whirled.game:OccupantChangedEvent/OCCUPANT_ENTERED' type='String' isStatic='true' isConst='true' defaultValue='OccupantEntered' >
<description><![CDATA[
     ]]></description>
<eventType><![CDATA[OccupantEntered
     ]]></eventType>
</field>
<field name='OCCUPANT_LEFT' fullname='com.whirled.game:OccupantChangedEvent/OCCUPANT_LEFT' type='String' isStatic='true' isConst='true' defaultValue='OccupantLeft' >
<description><![CDATA[
     ]]></description>
<eventType><![CDATA[OccupantLeft
     ]]></eventType>
</field>
<field name='_occupantId' fullname='com.whirled.game:OccupantChangedEvent/protected:_occupantId' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_player' fullname='com.whirled.game:OccupantChangedEvent/protected:_player' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='StateChangedEvent' fullname='com.whirled.game:StateChangedEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/game/StateChangedEvent.as' namespace='com.whirled.game' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Dispatched when the state of the game has changed.
 ]]></description>
</classRec>
<method name='StateChangedEvent' fullname='com.whirled.game:StateChangedEvent/StateChangedEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='*'>
</method>
<method name='clone' fullname='com.whirled.game:StateChangedEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
</method>
<method name='toString' fullname='com.whirled.game:StateChangedEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<field name='CONTROL_CHANGED' fullname='com.whirled.game:StateChangedEvent/CONTROL_CHANGED' type='String' isStatic='true' isConst='true' defaultValue='ControlChanged' >
<description><![CDATA[
     Indicates that a new controller has been assigned.
     ]]></description>
<eventType><![CDATA[ControlChanged
     ]]></eventType>
</field>
<field name='GAME_ENDED' fullname='com.whirled.game:StateChangedEvent/GAME_ENDED' type='String' isStatic='true' isConst='true' defaultValue='GameEnded' >
<description><![CDATA[
     Indicates that the game has transitioned to a ended state.
     ]]></description>
<eventType><![CDATA[GameEnded
     ]]></eventType>
</field>
<field name='GAME_STARTED' fullname='com.whirled.game:StateChangedEvent/GAME_STARTED' type='String' isStatic='true' isConst='true' defaultValue='GameStarted' >
<description><![CDATA[
     Indicates that the game has transitioned to a started state.
     ]]></description>
<eventType><![CDATA[GameStarted
     ]]></eventType>
</field>
<field name='ROUND_ENDED' fullname='com.whirled.game:StateChangedEvent/ROUND_ENDED' type='String' isStatic='true' isConst='true' defaultValue='RoundEnded' >
<description><![CDATA[
     Indicates that the current round has ended.
     ]]></description>
<eventType><![CDATA[RoundEnded
     ]]></eventType>
</field>
<field name='ROUND_STARTED' fullname='com.whirled.game:StateChangedEvent/ROUND_STARTED' type='String' isStatic='true' isConst='true' defaultValue='RoundStarted' >
<description><![CDATA[
     Indicates that a round has started. Games that do not require multiple rounds can ignore
     this event.
     ]]></description>
<eventType><![CDATA[RoundStarted
     ]]></eventType>
</field>
<field name='TURN_CHANGED' fullname='com.whirled.game:StateChangedEvent/TURN_CHANGED' type='String' isStatic='true' isConst='true' defaultValue='TurnChanged' >
<description><![CDATA[ Indicates that the turn has changed.
     ]]></description>
<eventType><![CDATA[TurnChanged
     ]]></eventType>
</field>
<classRec name='GameContentEvent' fullname='com.whirled.game:GameContentEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/game/GameContentEvent.as' namespace='com.whirled.game' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Dispatched when content-related events happen.
 ]]></description>
</classRec>
<method name='GameContentEvent' fullname='com.whirled.game:GameContentEvent/GameContentEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;contentType;contentIdent;playerId' param_types='String;String;String;int' param_defaults='undefined;undefined;undefined;0' result_type='*'>
</method>
<method name='clone' fullname='com.whirled.game:GameContentEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
</method>
<method name='toString' fullname='com.whirled.game:GameContentEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='contentIdent' fullname='com.whirled.game:GameContentEvent/contentIdent/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Returns the identifier of the content pack associated with this event.
     ]]></description>
</method>
<method name='contentType' fullname='com.whirled.game:GameContentEvent/contentType/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Returns the type of content associated with this event. Either ITEM_PACK or LEVEL_PACK.
     ]]></description>
</method>
<method name='playerId' fullname='com.whirled.game:GameContentEvent/playerId/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Returns the identifier of the player to whom this event pertains or 0.
     ]]></description>
</method>
<field name='ITEM_PACK' fullname='com.whirled.game:GameContentEvent/ITEM_PACK' type='String' isStatic='true' isConst='true' defaultValue='item_pack' >
<description><![CDATA[ Used to report item pack related events. ]]></description>
</field>
<field name='LEVEL_PACK' fullname='com.whirled.game:GameContentEvent/LEVEL_PACK' type='String' isStatic='true' isConst='true' defaultValue='level_pack' >
<description><![CDATA[ Used to report level pack related events. ]]></description>
</field>
<field name='PLAYER_CONTENT_ADDED' fullname='com.whirled.game:GameContentEvent/PLAYER_CONTENT_ADDED' type='String' isStatic='true' isConst='true' defaultValue='PlayerContentAdded' >
<description><![CDATA[
     Indicates that the a player has purchased new game content.
     ]]></description>
<eventType><![CDATA[PlayerContentAdded
     ]]></eventType>
</field>
<field name='PLAYER_CONTENT_CONSUMED' fullname='com.whirled.game:GameContentEvent/PLAYER_CONTENT_CONSUMED' type='String' isStatic='true' isConst='true' defaultValue='PlayerContentConsumed' >
<description><![CDATA[
     Indicates that the a player has consumed an item pack. contentType() for this event will
     always be ITEM_PACK.
     ]]></description>
<eventType><![CDATA[PlayerContentConsumed
     ]]></eventType>
</field>
<field name='_contentIdent' fullname='com.whirled.game:GameContentEvent/protected:_contentIdent' type='String' isStatic='false' isConst='false' >
</field>
<field name='_contentType' fullname='com.whirled.game:GameContentEvent/protected:_contentType' type='String' isStatic='false' isConst='false' >
</field>
<field name='_playerId' fullname='com.whirled.game:GameContentEvent/protected:_playerId' type='int' isStatic='false' isConst='false' >
</field>
<classRec name='SizeChangedEvent' fullname='com.whirled.game:SizeChangedEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/game/SizeChangedEvent.as' namespace='com.whirled.game' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Dispatched when the size of the game area changes, for example as a result of the user
 resizing their browser window.
 ]]></description>
</classRec>
<method name='SizeChangedEvent' fullname='com.whirled.game:SizeChangedEvent/SizeChangedEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='size' param_types='flash.geom:Point' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Constructor.
     ]]></description>
</method>
<method name='clone' fullname='com.whirled.game:SizeChangedEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
</method>
<method name='toString' fullname='com.whirled.game:SizeChangedEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='size' fullname='com.whirled.game:SizeChangedEvent/size/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Point'>
<description><![CDATA[
     Get the size of the game area, expressed as a Point
     (The width is the x value, the height is the y value).
     ]]></description>
</method>
<field name='SIZE_CHANGED' fullname='com.whirled.game:SizeChangedEvent/SIZE_CHANGED' type='String' isStatic='true' isConst='true' defaultValue='SizeChanged' >
<description><![CDATA[
     The type of this event.
          ]]></description>
<eventType><![CDATA[SizeChanged
     ]]></eventType>
</field>
<field name='_size' fullname='com.whirled.game:SizeChangedEvent/protected:_size' type='flash.geom:Point' isStatic='false' isConst='false' >
<description><![CDATA[ Our implementation details. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='LobbyClosedEvent' fullname='com.whirled.game:LobbyClosedEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/game/LobbyClosedEvent.as' namespace='com.whirled.game' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Dispatched if the player closes the game lobby.
 ]]></description>
</classRec>
<method name='LobbyClosedEvent' fullname='com.whirled.game:LobbyClosedEvent/LobbyClosedEvent' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
     Constructor.
     ]]></description>
</method>
<method name='clone' fullname='com.whirled.game:LobbyClosedEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
</method>
<method name='toString' fullname='com.whirled.game:LobbyClosedEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<field name='LOBBY_CLOSED' fullname='com.whirled.game:LobbyClosedEvent/LOBBY_CLOSED' type='String' isStatic='true' isConst='true' defaultValue='LobbyClosed' >
<description><![CDATA[
     The type of this event.
     ]]></description>
</field>
<classRec name='CoinsAwardedEvent' fullname='com.whirled.game:CoinsAwardedEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/game/CoinsAwardedEvent.as' namespace='com.whirled.game' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Dispatched to let a game know when the player has been awarded coins.
 This event is cancellable. If you would like to print your own coin award message and
 suppress the default one, call preventDefault().
 ]]></description>
</classRec>
<method name='CoinsAwardedEvent' fullname='com.whirled.game:CoinsAwardedEvent/CoinsAwardedEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='amount;percentile' param_types='int;int' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
     Creates a new event.
     ]]></description>
</method>
<method name='clone' fullname='com.whirled.game:CoinsAwardedEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
</method>
<method name='toString' fullname='com.whirled.game:CoinsAwardedEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='amount' fullname='com.whirled.game:CoinsAwardedEvent/amount/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Returns the amount of coins awarded to the player.
     ]]></description>
</method>
<method name='percentile' fullname='com.whirled.game:CoinsAwardedEvent/percentile/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Returns the % of scores lower than the player's reported score, or -1 if no score was
     reported.
     ]]></description>
</method>
<field name='COINS_AWARDED' fullname='com.whirled.game:CoinsAwardedEvent/COINS_AWARDED' type='String' isStatic='true' isConst='true' defaultValue='CoinsAwarded' >
<description><![CDATA[
     An event type dispatched at the end of a game (before GAME_ENDED) to inform the game that
     the player has earned coins.
          ]]></description>
<eventType><![CDATA[CoinsAwarded
     ]]></eventType>
</field>
<field name='_amount' fullname='com.whirled.game:CoinsAwardedEvent/protected:_amount' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ The amount of coins awarded to the player. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_percentile' fullname='com.whirled.game:CoinsAwardedEvent/protected:_percentile' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ The % of scores lower than the player's reported score,
     or -1 if no score was reported. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='GameControl' fullname='com.whirled.game:GameControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/game/GameControl.as' namespace='com.whirled.game' access='public' baseclass='com.whirled:AbstractControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Used to coordinate game state and control your multiplayer game.
 <br/><br/>
 <b>Note:</b> Check out the
 <a href="http://www.whirled.com/code/GameControl.html" target="_top">Easy GameControl Index</a>.
 <br/><br/>
  ]]></description>
<example><![CDATA[Typically, you create this in your top-level MovieClip/Sprite:
 <listing version="3.0">
 public class MyGame extends Sprite
 {
     public var ctrl :GameControl;
      // Constructor
     public function MyGame ()
     {
          ctrl = new GameControl(this);
          ...
 </listing>
 ]]></example>
</classRec>
<method name='GameControl' fullname='com.whirled.game:GameControl/GameControl' isStatic='false' isFinal='false' isOverride='false'  param_names='disp;autoReady' param_types='flash.display:DisplayObject;Boolean' param_defaults='undefined;true' result_type='*'>
<description><![CDATA[
     Creates a GameControl that connects to the Whirled game system.
          ]]></description>
<param><![CDATA[disp the display object that is the game's UI.
     ]]></param>
<param><![CDATA[autoReady if true, the game will automatically be started when initialization is
     complete, if false, the game will not start until all clients call playerReady().
          ]]></param>
<see><![CDATA[com.whirled.game.GameSubControl#playerReady()
     ]]></see>
</method>
<method name='connectionClosed_v1' fullname='com.whirled.game:GameControl/private:connectionClosed_v1' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Private method called when the backend disconnects from us.
     ]]></description>
</method>
<method name='createSubControls' fullname='com.whirled.game:GameControl/protected:createSubControls' isStatic='false' isFinal='false' isOverride='true'  result_type='Array'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='gotHostProps' fullname='com.whirled.game:GameControl/protected:gotHostProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Sets the properties we received from the host framework on the other side of the security
     boundary.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleRootClick' fullname='com.whirled.game:GameControl/protected:handleRootClick' isStatic='false' isFinal='false' isOverride='false'  param_names='evt' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Internal method that is called whenever the mouse clicks our root.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isConnected' fullname='com.whirled.game:GameControl/isConnected' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
     
     Are we connected and running inside the whirled environment, or has someone just
     loaded up our SWF by itself?
     ]]></description>
</method>
<method name='setUserProps' fullname='com.whirled.game:GameControl/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Populate any properties or functions we want to expose to the other side of the whirled
     security boundary.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='game' fullname='com.whirled.game:GameControl/game/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.game:GameSubControl'>
<description><![CDATA[
     Access the 'game' services.
     ]]></description>
</method>
<method name='local' fullname='com.whirled.game:GameControl/local/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.game:LocalSubControl'>
<description><![CDATA[
     Access the 'local' services.
     ]]></description>
</method>
<method name='net' fullname='com.whirled.game:GameControl/net/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.game:NetSubControl'>
<description><![CDATA[
     Access the 'net' services.
     ]]></description>
</method>
<method name='player' fullname='com.whirled.game:GameControl/player/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.game:PlayerSubControl'>
<description><![CDATA[
     Access the 'player' services.
     ]]></description>
</method>
<method name='services' fullname='com.whirled.game:GameControl/services/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.game:ServicesSubControl'>
<description><![CDATA[
     Access the 'services' services.
     ]]></description>
</method>
<field name='AVATAR_SHOP' fullname='com.whirled.game:GameControl/AVATAR_SHOP' type='String' isStatic='true' isConst='true' defaultValue='avatars' >
</field>
<field name='BACKDROP_SHOP' fullname='com.whirled.game:GameControl/BACKDROP_SHOP' type='String' isStatic='true' isConst='true' defaultValue='backdrops' >
</field>
<field name='FURNITURE_SHOP' fullname='com.whirled.game:GameControl/FURNITURE_SHOP' type='String' isStatic='true' isConst='true' defaultValue='furniture' >
</field>
<field name='ITEM_PACK_SHOP' fullname='com.whirled.game:GameControl/ITEM_PACK_SHOP' type='String' isStatic='true' isConst='true' defaultValue='item_packs' >
</field>
<field name='LEVEL_PACK_SHOP' fullname='com.whirled.game:GameControl/LEVEL_PACK_SHOP' type='String' isStatic='true' isConst='true' defaultValue='level_packs' >
</field>
<field name='PET_SHOP' fullname='com.whirled.game:GameControl/PET_SHOP' type='String' isStatic='true' isConst='true' defaultValue='pets' >
</field>
<field name='TOY_SHOP' fullname='com.whirled.game:GameControl/TOY_SHOP' type='String' isStatic='true' isConst='true' defaultValue='toys' >
</field>
<field name='_connected' fullname='com.whirled.game:GameControl/protected:_connected' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ Are we connected? ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_gameCtrl' fullname='com.whirled.game:GameControl/protected:_gameCtrl' type='com.whirled.game:GameSubControl' isStatic='false' isConst='false' >
<description><![CDATA[ The game sub-control. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_localCtrl' fullname='com.whirled.game:GameControl/protected:_localCtrl' type='com.whirled.game:LocalSubControl' isStatic='false' isConst='false' >
<description><![CDATA[ The local sub-control. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_netCtrl' fullname='com.whirled.game:GameControl/protected:_netCtrl' type='com.whirled.game:NetSubControl' isStatic='false' isConst='false' >
<description><![CDATA[ The net sub-control. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_playerCtrl' fullname='com.whirled.game:GameControl/protected:_playerCtrl' type='com.whirled.game:PlayerSubControl' isStatic='false' isConst='false' >
<description><![CDATA[ The player sub-control. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_servicesCtrl' fullname='com.whirled.game:GameControl/protected:_servicesCtrl' type='com.whirled.game:ServicesSubControl' isStatic='false' isConst='false' >
<description><![CDATA[ The services sub-control. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='NetSubControl' fullname='com.whirled.game:NetSubControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/game/NetSubControl.as' namespace='com.whirled.game' access='public' baseclass='com.whirled:AbstractSubControl' interfaces='com.whirled.net:PropertySubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides access to 'net' game services. Do not instantiate this class yourself,
 access it via GameControl.net.
  The 'net' subcontrol is used to communicate shared state between game clients. When you set
 a property it is immediately distributed to the other clients in the game. Reading a property
 is immediate, you are reading the properties that have already been distributed. When a client
 connects to an already-running game, any properties already set will be available.
  Neessages can be sent by either a server agent or a client at a maximum rate of 10 messages per
 second.  Messages sent at a greater rate will be buffered until sending them will not cause this
 limit to be  exceeded.  A message sent to all players counts as a single message against this
 limit.  Changing a property value also counts as sending a single message.
 
 The doBatch method can be used to combine a number of otherwise unrelated messages or property 
 changes into a single unit so that they count only once against the limit.  
 ]]></description>
<see><![CDATA[#doBatch
 ]]></see>
<metadata>
	<Event owner='com.whirled.game:NetSubControl' name='MsgReceived' type='com.whirled.net.MessageReceivedEvent' >
<description><![CDATA[
 Dispatched when a message arrives with information that is not part of the shared game state.
  ]]></description>
<eventType><![CDATA[com.whirled.net.MessageReceivedEvent.MESSAGE_RECEIVED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.game:NetSubControl' name='ElemChanged' type='com.whirled.net.ElementChangedEvent' >
<description><![CDATA[
 Dispatched when an element inside a property has changed in the shared game state.
 This event is a result of calling setIn() or setAt().
  ]]></description>
<eventType><![CDATA[com.whirled.net.ElementChangedEvent.ELEMENT_CHANGED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.game:NetSubControl' name='PropChanged' type='com.whirled.net.PropertyChangedEvent' >
<description><![CDATA[
 Dispatched when a property has changed in the shared game state. This event is a result
 of calling set() or testAndSet().
  ]]></description>
<eventType><![CDATA[com.whirled.net.PropertyChangedEvent.PROPERTY_CHANGED
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='NetSubControl' fullname='com.whirled.game:NetSubControl/NetSubControl' isStatic='false' isFinal='false' isOverride='false'  param_names='parent' param_types='com.whirled.game:GameControl' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='createSubControls' fullname='com.whirled.game:NetSubControl/protected:createSubControls' isStatic='false' isFinal='false' isOverride='true'  result_type='Array'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getPlayer' fullname='com.whirled.game:NetSubControl/getPlayer' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId' param_types='int' param_defaults='undefined' result_type='com.whirled.net:MessageSubControl'>
<description><![CDATA[
     Provides a per-player way to send messages to a specific player.
     ]]></description>
<see><![CDATA[#sendMessage
     ]]></see>
</method>
<method name='getPlayerMessager' fullname='com.whirled.game:NetSubControl/protected:getPlayerMessager' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId' param_types='int' param_defaults='undefined' result_type='com.whirled.net:MessageSubControl'>
<description><![CDATA[
     Look up or create a MessageSubControl for a specific player.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getPropertyNames' fullname='com.whirled.game:NetSubControl/getPropertyNames' isStatic='false' isFinal='false' isOverride='false'  param_names='prefix' param_types='String' param_defaults='' result_type='Array'>
<description><![CDATA[ 
     Get the names of all currently-set properties that begin with the specified prefix.
     Calling this method results in no network traffic.
     ]]></description>
</method>
<method name='getTargetId' fullname='com.whirled.game:NetSubControl/getTargetId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='gotHostProps' fullname='com.whirled.game:NetSubControl/protected:gotHostProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='messageReceived_v2' fullname='com.whirled.game:NetSubControl/private:messageReceived_v2' isStatic='false' isFinal='false' isOverride='false'  param_names='name;value;sender' param_types='String;Object;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Private method to post a MessageReceivedEvent.
     ]]></description>
</method>
<method name='propertyWasSet_v2' fullname='com.whirled.game:NetSubControl/private:propertyWasSet_v2' isStatic='false' isFinal='false' isOverride='false'  param_names='name;newValue;oldValue;key' param_types='String;Object;Object;Object' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Private method to post a PropertyChangedEvent.
     ]]></description>
</method>
<method name='sendMessage' fullname='com.whirled.game:NetSubControl/sendMessage' isStatic='false' isFinal='false' isOverride='false'  param_names='messageName;value;playerId' param_types='String;Object;int' param_defaults='undefined;undefined;unknown' result_type='void'>
<description><![CDATA[
     Send a "message" to other clients subscribed to the game.  These is similar to setting a
     property, except that the value will not be saved- it will merely end up coming out as a
     MessageReceivedEvent.
          ]]></description>
<param><![CDATA[messageName The message to send.
     ]]></param>
<param><![CDATA[value The value to attach to the message.
     ]]></param>
<param><![CDATA[playerId if <code>TO_ALL</code> (or unset), sends to all players, 
     otherwise the message will be private to just one player; if the game employs a server agent, 
     <code>TO_SERVER_AGENT</code> may be used to send a message only to the server.
     ]]></param>
<see><![CDATA[#TO_ALL
     ]]></see>
<see><![CDATA[#TO_SERVER_AGENT
     ]]></see>
</method>
<method name='setAt' fullname='com.whirled.game:NetSubControl/setAt' isStatic='false' isFinal='false' isOverride='false'  param_names='propName;index;value;immediate' param_types='String;int;Object;Boolean' param_defaults='undefined;undefined;undefined;false' result_type='void'>
<description><![CDATA[ 
     Update one element of an Array.<br/>
     <b>Note</b>: Unlike setIn(), this update will fail silently if the index is out of
     bounds or if there is no array currently set at the specified property name.
     Furthermore, if you set the element with immediate=true, there are two updates:
     one locally that happens right away and the update on the server that will be
     dispatched back to all the clients. Either or both can fail, so be sure to set the Array up
     first using set().
          ]]></description>
<param><![CDATA[propName the name of the property to modify.
     ]]></param>
<param><![CDATA[index the array index of the element to update.
     ]]></param>
<param><![CDATA[value the value to set.
     ]]></param>
<param><![CDATA[immediate if true, the value is updated immediately in the local object. Otherwise
     any old value will remain in effect until the ElementChangedEvent arrives after
     a round-trip to the server.
          ]]></param>
</method>
<method name='setIn' fullname='com.whirled.game:NetSubControl/setIn' isStatic='false' isFinal='false' isOverride='false'  param_names='propName;key;value;immediate' param_types='String;int;Object;Boolean' param_defaults='undefined;undefined;undefined;false' result_type='void'>
<description><![CDATA[ 
     Update one element of a Dictionary.<br/>
     <b>Note</b>: Unlike setAt(), this will usually work. No key is out of range, obviously,
     and if you set a value in a property that was previously null, a new Dictionary will
     be created to hold your value. If a non-Dictionary property is already stored with the
     specified name then this will fail silently on the server. But: don't do that!
     It would be pretty bad style to store two different types of property under the same name.
          ]]></description>
<param><![CDATA[propName the name of the property to modify.
     ]]></param>
<param><![CDATA[key the key of the element to update.
     ]]></param>
<param><![CDATA[value the value to set. Passing null removes the specified key from the Dictionary.
     ]]></param>
<param><![CDATA[immediate if true, the value is updated immediately in the local object. Otherwise
     any old value will remain in effect until the ElementChangedEvent arrives after
     a round-trip to the server.
     ]]></param>
</method>
<method name='setUserProps' fullname='com.whirled.game:NetSubControl/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='testAndSet' fullname='com.whirled.game:NetSubControl/testAndSet' isStatic='false' isFinal='false' isOverride='false'  param_names='propName;newValue;testValue' param_types='String;Object;Object' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Set a property that will be distributed, but only if it's equal to the specified test value.
          <p> Please note that there is no way to test and set a property immediately,
     because the value must be sent to the server to perform the test.</p>
          <p> The operation is 'atomic', in the sense that testing and setting take place during the
     same server event. In comparison, a separate 'get' followed by a 'set' operation would
     first read the current value as seen on your client and then send a request to overwrite
     any value with a new value. By the time the 'set' reaches the server the old value
     may no longer be valid. Since that's sketchy, we have this method.</p>
     ]]></description>
</method>
<method name='agent' fullname='com.whirled.game:NetSubControl/agent/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.net:MessageSubControl'>
<description><![CDATA[
     Provides a control with which to send messages to the server agent.
     ]]></description>
<see><![CDATA[#sendMessage
     ]]></see>
</method>
<method name='get' fullname='com.whirled.game:NetSubControl/get' isStatic='false' isFinal='false' isOverride='false'  param_names='propName' param_types='String' param_defaults='undefined' result_type='Object'>
<description><![CDATA[ ]]></description>
</method>
<method name='players' fullname='com.whirled.game:NetSubControl/players/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.net:MessageSubControl'>
<description><![CDATA[
     Provides a control with which to send messages to all the players of this game.
     ]]></description>
<see><![CDATA[#sendMessage
     ]]></see>
</method>
<method name='set' fullname='com.whirled.game:NetSubControl/set' isStatic='false' isFinal='false' isOverride='false'  param_names='propName;value;immediate' param_types='String;Object;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[ ]]></description>
</method>
<field name='TO_ALL' fullname='com.whirled.game:NetSubControl/TO_ALL' type='int' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[
     Constant provided to <code>sendMessage</code> that will send a message to all subscribers.
     ]]></description>
<see><![CDATA[#sendMessage()
     ]]></see>
</field>
<field name='TO_SERVER_AGENT' fullname='com.whirled.game:NetSubControl/TO_SERVER_AGENT' type='int' isStatic='true' isConst='true' defaultValue='-2.147483648E9' >
<description><![CDATA[
     Constant provided to <code>sendMessage</code> that will send a message to the game's server
     agent, if there is one.
     ]]></description>
<see><![CDATA[#sendMessage()
     ]]></see>
</field>
<field name='_agentMsgCtrl' fullname='com.whirled.game:NetSubControl/protected:_agentMsgCtrl' type='com.whirled.net:MessageSubControl' isStatic='false' isConst='false' >
</field>
<field name='_gameData' fullname='com.whirled.game:NetSubControl/protected:_gameData' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ Game properties. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_playerCtrls' fullname='com.whirled.game:NetSubControl/protected:_playerCtrls' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='' >
</field>
<field name='_playersMsgCtrl' fullname='com.whirled.game:NetSubControl/protected:_playersMsgCtrl' type='com.whirled.net:MessageSubControl' isStatic='false' isConst='false' >
</field>
<classRec name='SeatingSubControl' fullname='com.whirled.game:SeatingSubControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/game/SeatingSubControl.as' namespace='com.whirled.game' access='public' baseclass='com.whirled:AbstractSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Access seating information for a seated game. Do not instantiate this class directly,
 access it via GameControl.game.seating.
 ]]></description>
</classRec>
<method name='SeatingSubControl' fullname='com.whirled.game:SeatingSubControl/SeatingSubControl' isStatic='false' isFinal='false' isOverride='false'  param_names='parent;game' param_types='com.whirled:AbstractControl;com.whirled.game:GameSubControl' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getMyPosition' fullname='com.whirled.game:SeatingSubControl/getMyPosition' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     A convenient function to get our own player position,
     or -1 if we're not a player.
     ]]></description>
</method>
<method name='getPlayerIds' fullname='com.whirled.game:SeatingSubControl/getPlayerIds' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Get all the players at the table, in their seated position.
     Note that the number of seats never changes during a game, even as players come and go.
     Absent players will be represented by a 0.
          ]]></description>
<return><![CDATA[an Array of ints.
     ]]></return>
</method>
<method name='getPlayerNames' fullname='com.whirled.game:SeatingSubControl/getPlayerNames' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Get the names of the seated players, in the order of their seated position.
     Note that the number of seats never changes during a game, even as players come and go.
     Absent players will have a name of null.
          ]]></description>
<return><![CDATA[an Array of Strings.
     ]]></return>
</method>
<method name='getPlayerPosition' fullname='com.whirled.game:SeatingSubControl/getPlayerPosition' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId' param_types='int' param_defaults='undefined' result_type='int'>
<description><![CDATA[
     Get the player's position (seated index), or -1 if not a player.
     ]]></description>
</method>
<field name='_game' fullname='com.whirled.game:SeatingSubControl/protected:_game' type='com.whirled.game:GameSubControl' isStatic='false' isConst='false' >
<description><![CDATA[ Our direct parent. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='PlayerSubControl' fullname='com.whirled.game:PlayerSubControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/game/PlayerSubControl.as' namespace='com.whirled.game' access='public' baseclass='com.whirled:AbstractSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides access to 'player' game services. Do not instantiate this class directly,
 instead access it via GameControl.player.
 ]]></description>
<metadata>
	<Event owner='com.whirled.game:PlayerSubControl' name='PlayerContentConsumed' type='com.whirled.game.GameContentEvent' >
<description><![CDATA[
 Dispatched when this player has consumed an item pack.
  ]]></description>
<eventType><![CDATA[com.whirled.game.GameContentEvent.PLAYER_CONTENT_CONSUMED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.game:PlayerSubControl' name='CoinsAwarded' type='com.whirled.game.CoinsAwardedEvent' >
<description><![CDATA[
 Dispatched when this player has been awarded coins.
  ]]></description>
<eventType><![CDATA[com.whirled.game.CoinsAwardedEvent.COINS_AWARDED
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='PlayerSubControl' fullname='com.whirled.game:PlayerSubControl/PlayerSubControl' isStatic='false' isFinal='false' isOverride='false'  param_names='parent' param_types='com.whirled.game:GameControl' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='awardPrize' fullname='com.whirled.game:PlayerSubControl/awardPrize' isStatic='false' isFinal='false' isOverride='false'  param_names='ident;playerId' param_types='String;int' param_defaults='undefined;unknown' result_type='void'>
<description><![CDATA[
     Awards the specified prize item to this client's player (the default) or a specified player.
     If the supplied prize identifier is not valid, this will not be known until the request is
     processed on the server, so the method will return successfully but no prize will have been
     awarded. Thus you should be careful not to misspell your prize identifier in your code or in
     the associated prize item.
          <p> Note: a game is only allowed to award a prize once per game session. This is to guard
     against bugs that might try to award many hundreds of the same prize to a user while playing
     a game. If you eallywant to award multiple instances of a prize, you will need to make
     different prize items with unique identifiers which all reference the same target item. </p>
          <p> Note also: because a game anaward the same prize more than once if the player earns
     the prize in separate game sessions, a game that wishes to only award a prize once should
     couple the award of the prize with the award of a trophy and then structure their code like
     so: </p>
          <pre>
     if (_ctrl.awardTrophy("special_award_trophy")) {
         _ctrl.awardPrize("special_award_avatar");
     }
     </pre>
          <p> The first time the player accomplishes the necessary goal, they will be awarded the
     trophy and the prize. Subsequently, awardTrophy() will return false indicating that the
     player already has the trophy in question and the prize will not be awarded. Alternatively
     the game could store whether or not the player has earned the prize in a user cookie. </p>
          <p>Note thirdly: Clients may only award prized to the current player. Server agents do not
     have a current player and therefore must pass in a valid player id.</p>
          ]]></description>
<param><![CDATA[playerId the id of the player to award the prize to
     ]]></param>
</method>
<method name='awardTrophy' fullname='com.whirled.game:PlayerSubControl/awardTrophy' isStatic='false' isFinal='false' isOverride='false'  param_names='ident;playerId' param_types='String;int' param_defaults='undefined;unknown' result_type='Boolean'>
<description><![CDATA[
     Awards the specified trophy to this client's player (the default) or a specified player.
     If the supplied trophy identifier is not valid, this will not be known until the request is
     processed on the server, so the method will return succcessfully but no trophy will have
     been awarded. Thus, you should be careful not to misspell your trophy identifier in your
     code or in the associated trophy source item.
          <p>Note: Clients may award trophies to the current player. Server agents do not
     have a current player and therefore must pass in a valid player id.</p>
          ]]></description>
<param><![CDATA[playerId the id of the player to award the trophy to
     ]]></param>
<return><![CDATA[true if the trophy was awarded, false if the player already has that trophy.
     ]]></return>
</method>
<method name='flowAwarded_v1' fullname='com.whirled.game:PlayerSubControl/private:flowAwarded_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='amount;percentile' param_types='int;int' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Private method to post a CoinsAwardedEvent.
     ]]></description>
<return><![CDATA[true if the usercode has prevented the default action.
     ]]></return>
</method>
<method name='getCookie' fullname='com.whirled.game:PlayerSubControl/getCookie' isStatic='false' isFinal='false' isOverride='false'  param_names='callback;occupantId' param_types='Function;int' param_defaults='undefined;unknown' result_type='void'>
<description><![CDATA[
     Get the user-specific game data for the specified occupant. The first time this is requested 
     per game instance it will be retrieved from the database. After that, it will be returned 
     from memory.
          ]]></description>
<param><![CDATA[callback the function that will be called when the cookie has loaded.
     The callback should be of the form:
     <listing version="3.0">
      function onGotUserCookie (cookie :Object, occupantId :int) :void
      {
          // read cookie
      }
     </listing>
     ]]></param>
</method>
<method name='getPlayerItemPacks' fullname='com.whirled.game:PlayerSubControl/getPlayerItemPacks' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId' param_types='int' param_defaults='unknown' result_type='Array'>
<description><![CDATA[
     Returns all item packs owned by this client's player (the default) or a specified player.
     The packs are returned as an array of objects with the following properties:
          <pre>
     ident - string identifier of item pack
     name - human readable name of item pack
     mediaURL - URL for item pack content
     count - the number of copies of this item pack owned by this player
     </pre>
          <p>Note: Clients may only get the item packs of the current player. Server agents do not
     have a current player and therefore must pass in a valid player id.</p>
          ]]></description>
<param><![CDATA[playerId the id of the player whose item packs to get
     ]]></param>
</method>
<method name='getPlayerLevelPacks' fullname='com.whirled.game:PlayerSubControl/getPlayerLevelPacks' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId' param_types='int' param_defaults='unknown' result_type='Array'>
<description><![CDATA[
     Returns all level packs owned by this client's player (the default) or a specified player.
     The packs are returned as an array of objects with the following properties:
          <pre>
     ident - string identifier of item pack
     name - human readable name of item pack
     mediaURL - URL for item pack content
     premium - boolean indicating that content is premium or not
     </pre>
          <p>Note: Clients may only get the level packs of the current player. Server agents do not
     have a current player and therefore must pass in a valid player id.</p>
          ]]></description>
<param><![CDATA[playerId the id of the player whose level packs to get
     ]]></param>
</method>
<method name='holdsTrophy' fullname='com.whirled.game:PlayerSubControl/holdsTrophy' isStatic='false' isFinal='false' isOverride='false'  param_names='ident;playerId' param_types='String;int' param_defaults='undefined;unknown' result_type='Boolean'>
<description><![CDATA[
     Returns true if this client's player (the default) or a specified player has the trophy
     with the specified identifier.
          <p>Note: Clients may only test the trophies of the current player. Server agents do not
     have a current player and therefore must pass in a valid player id.</p>
          ]]></description>
<param><![CDATA[playerId the id of the player whose trophies to test
     ]]></param>
</method>
<method name='notifyGameContentAdded_v1' fullname='com.whirled.game:PlayerSubControl/private:notifyGameContentAdded_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='type;ident;playerId' param_types='String;String;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Private method to post a GameContentEvent.PLAYER_CONTENT_ADDED.
     ]]></description>
</method>
<method name='notifyGameContentConsumed_v1' fullname='com.whirled.game:PlayerSubControl/private:notifyGameContentConsumed_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='type;ident;playerId' param_types='String;String;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Private method to post a GameContentEvent.PLAYER_CONTENT_CONSUMED.
     ]]></description>
</method>
<method name='requestConsumeItemPack' fullname='com.whirled.game:PlayerSubControl/requestConsumeItemPack' isStatic='false' isFinal='false' isOverride='false'  param_names='ident;msg' param_types='String;String' param_defaults='undefined;undefined' result_type='Boolean'>
<description><![CDATA[
     Requests to consume the specified item pack. The player must currently own at least one copy
     of the item pack. This will display a standard dialog asking the player if they wish to
     consume the pack.
          <p> If the player accepts the request to consume the item pack, a
     GameContentEvent.PLAYER_CONTENT_CONSUMED event will be dispatched on this control.
          <p><em>Note:</em> this method may only be called on the client. It will always return false
     on the server.
          ]]></description>
<param><![CDATA[ident the identifier of the item pack to be consumed.
     ]]></param>
<param><![CDATA[msg a message to display in the dialog to help the player understand what's going on.
          ]]></param>
<return><![CDATA[true if the dialog was shown, false if the dialog was not shown because the player
     is known not to own at least one copy of the item pack.
     ]]></return>
</method>
<method name='setCookie' fullname='com.whirled.game:PlayerSubControl/setCookie' isStatic='false' isFinal='false' isOverride='false'  param_names='cookie;occupantId' param_types='Object;int' param_defaults='undefined;unknown' result_type='Boolean'>
<description><![CDATA[
     Store persistent data that can later be retrieved by an instance of this game. The maximum
     size of this data is 4096 bytes AFTER AMF3 encoding.
          <p>Note: Clients may only set the cookie of the current player. Server agents do not
     have a current player and therefore must pass in a valid player id.</p>
          ]]></description>
<param><![CDATA[playerId the id of the player whose cookie to get
          ]]></param>
<return><![CDATA[false if the cookie could not be encoded to 4096 bytes or less; true if the cookie
     is going to try to be saved. There is no guarantee it will be saved and no way to find out
     if it failed, but if it fails it will be because the shit hit the fan so hard that there's
     nothing you can do anyway.
     ]]></return>
</method>
<method name='setUserProps' fullname='com.whirled.game:PlayerSubControl/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='CURRENT_USER' fullname='com.whirled.game:PlayerSubControl/CURRENT_USER' type='int' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[ ID constant passed to cookie, prize and trophy functions to refer to the current player.
     On normal flash clients, this is used as a default value and should not be changed. On
     server agents, a valid playerId must be provided since there is no current player.
     ]]></description>
<see><![CDATA[#awardTrophy()
     ]]></see>
<see><![CDATA[#holdsTrophy()
     ]]></see>
<see><![CDATA[#setCookie()
     ]]></see>
<see><![CDATA[#getCookie()
     ]]></see>
<see><![CDATA[#awardPrize() ]]></see>
</field>
<classRec name='LocalSubControl' fullname='com.whirled.game:LocalSubControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/game/LocalSubControl.as' namespace='com.whirled.game' access='public' baseclass='com.whirled:AbstractSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides access to the 'local' game services. Do not instantiate this class yourself,
 access it via GameControl.local.
 ]]></description>
<metadata>
	<Event owner='com.whirled.game:LocalSubControl' name='LobbyClosed' type='com.whirled.game.LobbyClosedEvent' >
<description><![CDATA[
 Dispatched if the game lobby is closed.
  ]]></description>
<eventType><![CDATA[com.whirled.game.LobbyClosedEvent.LOBBY_CLOSED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.game:LocalSubControl' name='SizeChanged' type='com.whirled.game.SizeChangedEvent' >
<description><![CDATA[
 Dispatched when the size of the game area changes.
  ]]></description>
<eventType><![CDATA[com.whirled.game.SizeChangedEvent.SIZE_CHANGED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.game:LocalSubControl' name='keyUp' type='flash.events.KeyboardEvent' >
<description><![CDATA[
 Dispatched when a key is released when the game has focus.
  ]]></description>
<eventType><![CDATA[flash.events.KeyboardEvent.KEY_UP
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.game:LocalSubControl' name='keyDown' type='flash.events.KeyboardEvent' >
<description><![CDATA[
 Dispatched when a key is pressed when the game has focus.
  ]]></description>
<eventType><![CDATA[flash.events.KeyboardEvent.KEY_DOWN
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='LocalSubControl' fullname='com.whirled.game:LocalSubControl/LocalSubControl' isStatic='false' isFinal='false' isOverride='false'  param_names='parent' param_types='com.whirled.game:GameControl' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addEventListener' fullname='com.whirled.game:LocalSubControl/addEventListener' isStatic='false' isFinal='false' isOverride='true'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[
     
     Registers an event listener.
     ]]></description>
</method>
<method name='clearScores' fullname='com.whirled.game:LocalSubControl/clearScores' isStatic='false' isFinal='false' isOverride='false'  param_names='clearValue;sortValuesToo' param_types='Object;Boolean' param_defaults='null;false' result_type='void'>
<description><![CDATA[
     Clear all the scores displayed in the occupants list.
          <b>Note:</b> this function changes local display only; other clients will not be affected.
          ]]></description>
<param><![CDATA[clearValue a value to set all the scores to, or null to not show anything.
     ]]></param>
<param><![CDATA[sortValuesToo if true, also clear the sort values, returning the list
     to the default sort order.
     ]]></param>
</method>
<method name='feedback' fullname='com.whirled.game:LocalSubControl/feedback' isStatic='false' isFinal='false' isOverride='false'  param_names='msg' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Display a feedback chat message for the local player only, no other players
     or observers will see it.
     ]]></description>
</method>
<method name='filter' fullname='com.whirled.game:LocalSubControl/filter' isStatic='false' isFinal='false' isOverride='false'  param_names='text' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Run the specified text through the user's chat filter. This is optional, you can use
     it to clean up user-entered text.
          ]]></description>
<return><![CDATA[the filtered text, or null if it was so bad it's gone.
     ]]></return>
</method>
<method name='getHeadShot' fullname='com.whirled.game:LocalSubControl/getHeadShot' isStatic='false' isFinal='false' isOverride='false'  param_names='occupantId' param_types='int' param_defaults='undefined' result_type='flash.display:DisplayObject'>
<description><![CDATA[
     Return the headshot for the given occupant in the form of a DisplayObject.
          The objects are now otcached in the backend, so each request will return a brand
     new headshot. You should save a reference to these in your game if you will be
     re-using headshots, but now you may also get two headshots for the same player if you
     want to display them in two places.
          The DisplayObject returned is always 80x60 pixels large. If the player's actual headshot
     is smaller than 80x60, it will be centered inside the 80x60 area.
          Note: There is a weird flash security issue/bug that may prevent you from removing
     this object from a parent. addChild(headshot) works, removeChild(headshot) works, but
     calling getChildAt(index) or removeChildAt(index) using the index of the headshot will
     throw a security error. Weird!
          ]]></description>
<param><![CDATA[occupantId the player for which to get a headshot.
     ]]></param>
</method>
<method name='getInviteToken' fullname='com.whirled.game:LocalSubControl/getInviteToken' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Retrieves the token, if any, that was used to launch the game.  If the player entered into
     the game via a URL that contained a token (provided by the game via showInvitePage), this
     will return that token, otherwise null. Note that the invitations are not managed securely,
     it would be trivial for someone to modify a URL to specify a different token, so appropriate
     checks should be made.
     ]]></description>
</method>
<method name='getInviterMemberId' fullname='com.whirled.game:LocalSubControl/getInviterMemberId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Retrieves the ID of the member who invited the current player to this game (using the page
     shown by <code>showInvitePage</code>. Returns 0 if the player did not start the game via an
     invite link.
     ]]></description>
</method>
<method name='getSize' fullname='com.whirled.game:LocalSubControl/getSize' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.geom:Point'>
<description><![CDATA[
     Get the size of the game area, expressed as a Point
     (x = width, y = height).
     ]]></description>
</method>
<method name='isEmbedded' fullname='com.whirled.game:LocalSubControl/isEmbedded' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Is the game being played in a "Whirled embed", and not on the main site?
     In the game testing environment, this will always be false. 
     ]]></description>
</method>
<method name='lobbyClosed_v1' fullname='com.whirled.game:LocalSubControl/private:lobbyClosed_v1' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Private method to generate a LobbyClosedEvent.
     ]]></description>
</method>
<method name='removeEventListener' fullname='com.whirled.game:LocalSubControl/removeEventListener' isStatic='false' isFinal='false' isOverride='true'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
     
     Unregisters an event listener.
     ]]></description>
</method>
<method name='setFrameRate' fullname='com.whirled.game:LocalSubControl/setFrameRate' isStatic='false' isFinal='false' isOverride='false'  param_names='frameRate' param_types='Number' param_defaults='30' result_type='void'>
<description><![CDATA[
     Set the frame rate to use in your game. The default is 30fps, the
     same frame rate used in whirled rooms. The actual frame rate may be bounded on the lower
     end (for example, we may not let it go lower than 15fps) so that the rest of the user
     interface doesn't become annoying or unusable.
     ]]></description>
</method>
<method name='setMappedScores' fullname='com.whirled.game:LocalSubControl/setMappedScores' isStatic='false' isFinal='false' isOverride='false'  param_names='scores' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Set score or sortValue values for occupants. You may want to call clearScores prior
     to using this method to ensure that occupants that you don't specify are cleared out.
     You may use this method to update the "score" and sorting value for any subset of
     occupants in the game. You can update the score for one player having their occupantId
     as the only key. You can even set a "score" for any watchers.
          <b>Note:</b> this function changes local display only; other clients will not be affected.
          ]]></description>
<param><![CDATA[scores an Object mapping occupantId to a score value (which may be a String or
     numeric), or to a two-dimensional array containing the score value and the sortValue.
     ]]></param>
</method>
<method name='setOccupantsLabel' fullname='com.whirled.game:LocalSubControl/setOccupantsLabel' isStatic='false' isFinal='false' isOverride='false'  param_names='label' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Set a label to be shown above the occupants list in the game.
     Set to null to remove the label.
          <b>Note:</b> this function changes local display only; other clients will not be affected.
     ]]></description>
</method>
<method name='setPlayerScores' fullname='com.whirled.game:LocalSubControl/setPlayerScores' isStatic='false' isFinal='false' isOverride='false'  param_names='scores;sortValues' param_types='Array;Array' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Set scores for seated players.
          <b>Note:</b> this function changes local display only; other clients will not be affected.
          ]]></description>
<param><![CDATA[scores an array of 'score' values that must correspond to the seated players.
     The scores may be numeric or String and will be displayed after the player names.
     ]]></param>
<param><![CDATA[sortValues an array of sorting values that must correpond to the seated players.
     If not specified then the scoreValues are used to sort the occupants list.
     ]]></param>
</method>
<method name='setStageQuality' fullname='com.whirled.game:LocalSubControl/setStageQuality' isStatic='false' isFinal='false' isOverride='false'  param_names='quality' param_types='String' param_defaults='medium' result_type='void'>
<description><![CDATA[
     Set the stage quality to use in your game. The default is MEDIUM, the same quality
     used in whirled rooms.
     ]]></description>
</method>
<method name='setUserProps' fullname='com.whirled.game:LocalSubControl/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='showAllGames' fullname='com.whirled.game:LocalSubControl/showAllGames' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Opens the web page for all the games at whirled. (Does nothing in the test environment)
     ]]></description>
</method>
<method name='showGameLobby' fullname='com.whirled.game:LocalSubControl/showGameLobby' isStatic='false' isFinal='false' isOverride='false'  param_names='multiplayerOnly' param_types='Boolean' param_defaults='true' result_type='void'>
<description><![CDATA[
     Opens the game's multiplayer lobby on this player's machine. Please note this is only
     meaningful for games that support multiplayer.
          ]]></description>
<param><![CDATA[multiplayerOnly Optional parameter: if this game supports both single- and
     multi-player games, a true value will only show multiplayer options (create table
     or join existing tables), and a false value will show the default
     single- and multi-player options. Default value is true.
     ]]></param>
</method>
<method name='showGameShop' fullname='com.whirled.game:LocalSubControl/showGameShop' isStatic='false' isFinal='false' isOverride='false'  param_names='itemType;catalogId' param_types='String;int' param_defaults='undefined;0' result_type='void'>
<description><![CDATA[
     Opens the web page for this game's shop. The game will be shrunk to sidebar width while the
     game shop is showing.
          ]]></description>
<param><![CDATA[itemType the type of item to select by default. Valid constants are defined in
     GameControl.
     ]]></param>
<param><![CDATA[catalogId the catalog id of a specific item to show or 0 to display the overview page
     of all items of the specified type.
     ]]></param>
</method>
<method name='showInvitePage' fullname='com.whirled.game:LocalSubControl/showInvitePage' isStatic='false' isFinal='false' isOverride='false'  param_names='defmsg;token' param_types='String;String' param_defaults='undefined;' result_type='void'>
<description><![CDATA[
     Instructs the game client to open the game invite page, allowing the player to invite friends
     to play this game.
     ]]></description>
<param><![CDATA[defmsg Default message that will be included along with the game's URL when sent
     to the player's friends.
     ]]></param>
<param><![CDATA[token Optional token that will be included on the URL and eventually passed back to
     the game when an invited friend goes to the URL.  This allows the game to start in
     a different state than usual.
     ]]></param>
</method>
<method name='showTrophies' fullname='com.whirled.game:LocalSubControl/showTrophies' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Opens a popup displaying the trophies awarded by this game.
     ]]></description>
</method>
<method name='sizeChanged_v1' fullname='com.whirled.game:LocalSubControl/private:sizeChanged_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='size' param_types='flash.geom:Point' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Private method to generate a SizeChangedEvent.
     ]]></description>
</method>
<classRec name='GameSubControl' fullname='com.whirled.game:GameSubControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/game/GameSubControl.as' namespace='com.whirled.game' access='public' baseclass='com.whirled:AbstractSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Access game-specific controls. Do not instantiate this class yourself.
 Access it via GameControl.game.
 ]]></description>
<metadata>
	<Event owner='com.whirled.game:GameSubControl' name='UserChat' type='com.whirled.game.UserChatEvent' >
<description><![CDATA[
 Dispatched when a user chats.
  ]]></description>
<eventType><![CDATA[com.whirled.game.UserChatEvent.USER_CHAT
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.game:GameSubControl' name='OccupantLeft' type='com.whirled.game.OccupantChangedEvent' >
<description><![CDATA[
 Dispatched when an occupant leaves the game.
  ]]></description>
<eventType><![CDATA[com.whirled.game.OccupantChangedEvent.OCCUPANT_LEFT
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.game:GameSubControl' name='OccupantEntered' type='com.whirled.game.OccupantChangedEvent' >
<description><![CDATA[
 Dispatched when an occupant enters the game.
  ]]></description>
<eventType><![CDATA[com.whirled.game.OccupantChangedEvent.OCCUPANT_ENTERED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.game:GameSubControl' name='GameEnded' type='com.whirled.game.StateChangedEvent' >
<description><![CDATA[
 Dispatched when the game ends.
  ]]></description>
<eventType><![CDATA[com.whirled.game.StateChangedEvent.GAME_ENDED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.game:GameSubControl' name='RoundEnded' type='com.whirled.game.StateChangedEvent' >
<description><![CDATA[
 Dispatched when a round ends.
  ]]></description>
<eventType><![CDATA[com.whirled.game.StateChangedEvent.ROUND_ENDED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.game:GameSubControl' name='TurnChanged' type='com.whirled.game.StateChangedEvent' >
<description><![CDATA[
 Dispatched when the turn changes in a turn-based game.
  ]]></description>
<eventType><![CDATA[com.whirled.game.StateChangedEvent.TURN_CHANGED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.game:GameSubControl' name='RoundStarted' type='com.whirled.game.StateChangedEvent' >
<description><![CDATA[
 Dispatched when a round starts.
  ]]></description>
<eventType><![CDATA[com.whirled.game.StateChangedEvent.ROUND_STARTED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.game:GameSubControl' name='GameStarted' type='com.whirled.game.StateChangedEvent' >
<description><![CDATA[
 Dispatched when the game starts, usually after all players are present.
  ]]></description>
<eventType><![CDATA[com.whirled.game.StateChangedEvent.GAME_STARTED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled.game:GameSubControl' name='ControlChanged' type='com.whirled.game.StateChangedEvent' >
<description><![CDATA[
 Dispatched when the controller changes for the game.
  ]]></description>
<eventType><![CDATA[com.whirled.game.StateChangedEvent.CONTROL_CHANGED
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='GameSubControl' fullname='com.whirled.game:GameSubControl/GameSubControl' isStatic='false' isFinal='false' isOverride='false'  param_names='parent' param_types='com.whirled.game:GameControl' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='amInControl' fullname='com.whirled.game:GameSubControl/amInControl' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Returns true if we are in control of this game. False if another client is in control.
     Always returns false when called from the game's server agent.
     ]]></description>
</method>
<method name='amServerAgent' fullname='com.whirled.game:GameSubControl/amServerAgent' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Returns true if this control is connected to a server agent.
     ]]></description>
</method>
<method name='controlDidChange_v1' fullname='com.whirled.game:GameSubControl/private:controlDidChange_v1' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Private method to post a StateChangedEvent.
     ]]></description>
</method>
<method name='createSubControls' fullname='com.whirled.game:GameSubControl/protected:createSubControls' isStatic='false' isFinal='false' isOverride='true'  result_type='Array'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='endGameWithScore' fullname='com.whirled.game:GameSubControl/endGameWithScore' isStatic='false' isFinal='false' isOverride='false'  param_names='score;gameMode' param_types='int;int' param_defaults='undefined;0' result_type='void'>
<description><![CDATA[
     A convenience function for ending a single player game with the supplied score. This is
     equivalent to: <code>endGameWithScores([ getMyId() ], [ score ], TO_EACH_THEIR_OWN)</code>.
     Please read the <code>endGameWithScores</code> documentation for information on the range of
     allowable scores.
          <p> Note that if a single player game is ended with a score of zero, it will be assumed
     that the player in question abandoned the game and no coins will be paid out, nor will
     their rating be updated. </p>
     ]]></description>
</method>
<method name='endGameWithScores' fullname='com.whirled.game:GameSubControl/endGameWithScores' isStatic='false' isFinal='false' isOverride='false'  param_names='playerIds;scores;payoutType;gameMode' param_types='Array;Array;int;int' param_defaults='undefined;undefined;undefined;0' result_type='void'>
<description><![CDATA[
     Ends the game, reporting the scores earned by each player in the game, awarding coins
     according to the specified strategy and updating player ratings.
          <p> Coins are awarded based on the supplied payout type, either CASCADING_PAYOUT,
     WINNERS_TAKE_ALL or TO_EACH_THEIR_OWN. In the case of WINNERS_TAKE_CALL, the highest scoring
     player or players will be considered the winner(s) and in the case of CASCADING_PAYOUT,
     players will be ranked according to their scores, higher scores being considered better. </p>
          <p> If coins are awarded, a COINS_AWARDED event will be dispatched <em>before</em> the
     GAME_ENDED event is dispatched informing the client that the game has ended. </p>
          <p> Both rating and a player's coin payout will be adjusted based on their score. Whirled
     will track every score reported by your game for its entire existence and will convert newly
     reported scores to a percentile value between 0 and 99 (inclusive) indicating the percentage
     of scores in the entire score history that are below the reported score. That percentile
     ranking will be used to adjust the players rating as well as to determine their individual
     coin payout. </p>
          <p> Note that scores must be positive integers between 0 and 2^30 (1073741824) and higher
     scores are considered better, so if your game naturally operates with scores where lower is
     better (elapsed time in a racing game, for example), then you must convert your score to a
     positive integer by, for example, subtracting your score from a hypothentical worse possible
     score. For example: </p>
          <p><code>score = Math.max(WORST_POSSIBLE_TIME - actualTime, 1)</code></p>
          <p> Note that if a game is ended with all players scores equal of zero, it will be assumed
     that the players in question abandoned the game and no coins will be paid out, nor will
     their ratings be updated. </p>
          <p> The <code>gameMode</code> parameter allows you to maintain separate score distributions
     for different game modes. If your game contains different modes which use scores that are
     not comparable to one another, or you have various game levels for which you would like to
     track individual score distributions, you can assign each an integer value between 0 and 99.
     Only 100 game modes are allowed. </p>
     ]]></description>
</method>
<method name='endGameWithWinners' fullname='com.whirled.game:GameSubControl/endGameWithWinners' isStatic='false' isFinal='false' isOverride='false'  param_names='winnerIds;loserIds;payoutType' param_types='Array;Array;int' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Ends the game, declaring which players are the winners (if players tie, more than one player
     can be declared a winner. In addition to ending the game, this method awards coins and
     updates players ratings.
          <p> Coins are awarded based on the supplied payout type, either CASCADING_PAYOUT or
     WINNERS_TAKE_ALL. In the case of WINNERS_TAKE_ALL, the losers will have all of their
     individual coin payouts combined into a pool and that pool will be evenly divided among the
     winners and added to their respective individual coin payouts. In the case of
     CASCADING_PAYOUT, the losers will only have 50% of their individual coin payouts given to
     the winners. </p>
          <p> If coins are awarded, a COINS_AWARDED event will be dispatched <em>before</em> the
     GAME_ENDED event is dispatched informing the client that the game has ended. </p>
          <p> Players' ratings will also be updated using the Elo algorigthm wherein each player is
     rated against the average ratings of the players that the defeated or were defeated by.  In
     a two player game this degenerates into the standard Elo algorithm. </p>
          ]]></description>
<see><![CDATA[http://en.wikipedia.org/wiki/ELO_rating_system
     ]]></see>
</method>
<method name='endRound' fullname='com.whirled.game:GameSubControl/endRound' isStatic='false' isFinal='false' isOverride='false'  param_names='nextRoundDelay' param_types='int' param_defaults='0' result_type='void'>
<description><![CDATA[
     Ends the current round. If nextRoundDelay is greater than zero, the next round will be
     started in the specified number of seconds, otherwise no next round will be started.  This
     method should not be called at the end of the last round, instead <code>endGame()</code>
     should be called.
     ]]></description>
</method>
<method name='gameStateChanged_v1' fullname='com.whirled.game:GameSubControl/private:gameStateChanged_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='started' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Private method to post a StateChangedEvent.
     ]]></description>
</method>
<method name='getConfig' fullname='com.whirled.game:GameSubControl/getConfig' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Get any game-specific configurations that were set up in the lobby.
          ]]></description>
<return><![CDATA[an Object containing config names mapping to their values.
     ]]></return>
</method>
<method name='getControllerId' fullname='com.whirled.game:GameSubControl/getControllerId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Returns the player id of the client that is in control of this game.
     ]]></description>
</method>
<method name='getItemPacks' fullname='com.whirled.game:GameSubControl/getItemPacks' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Returns the set of all item packs available to this game as an array of objects with the
     following properties:
          <pre>
     ident - string identifier of item pack
     name - human readable name of item pack
     mediaURL - URL for item pack content
     </pre>
     ]]></description>
</method>
<method name='getLevelPacks' fullname='com.whirled.game:GameSubControl/getLevelPacks' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Returns the set of all level packs available to this game as an array of objects with the
     following properties:
          <pre>
     ident - string identifier of item pack
     name - human readable name of item pack
     mediaURL - URL for item pack content
     premium - boolean indicating that content is premium or not
     </pre>
     ]]></description>
</method>
<method name='getMyId' fullname='com.whirled.game:GameSubControl/getMyId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Returns this client's player id. If this method is called from the game's server agent, the
     result is <code>SERVER_AGENT_ID</code>. The method <code>amServerAgent</code> can be used to
     explicitly test for this case.
     ]]></description>
<see><![CDATA[#SERVER_AGENT_ID
     ]]></see>
<see><![CDATA[#amServerAgent()
     ]]></see>
</method>
<method name='getOccupantIds' fullname='com.whirled.game:GameSubControl/getOccupantIds' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Returns the player ids of all occupants in the game room: players and watchers.
     The occupants will be returned in no particular order, and unlike getPlayerIds() there
     will never be any zeros in the array.
     ]]></description>
</method>
<method name='getOccupantName' fullname='com.whirled.game:GameSubControl/getOccupantName' isStatic='false' isFinal='false' isOverride='false'  param_names='playerId' param_types='int' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Get the display name of the specified occupant.  Two players may have the same name: always
     use playerId to purposes of identification and comparison. The name is for display
     only. Will be null is the specified playerId is not present.
     ]]></description>
</method>
<method name='getRound' fullname='com.whirled.game:GameSubControl/getRound' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Returns the current round number. Rounds start at 1 and increase if the game calls
     <code>endRound</code> with a next round timeout. Between rounds, it returns a
     negative number, corresponding to the negation of the round that just ended.
          ]]></description>
<see><![CDATA[#endRound()
     ]]></see>
</method>
<method name='getTurnHolderId' fullname='com.whirled.game:GameSubControl/getTurnHolderId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Returns the player id of the current turn holder, or 0 if it's nobody's turn.
     ]]></description>
</method>
<method name='gotHostProps' fullname='com.whirled.game:GameSubControl/protected:gotHostProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isInPlay' fullname='com.whirled.game:GameSubControl/isInPlay' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Is the game currently in play?
     ]]></description>
</method>
<method name='isMyTurn' fullname='com.whirled.game:GameSubControl/isMyTurn' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     A convenience method to just check if it's our turn.
     ]]></description>
</method>
<method name='loadItemPackData' fullname='com.whirled.game:GameSubControl/loadItemPackData' isStatic='false' isFinal='false' isOverride='false'  param_names='ident;onLoaded;onFailure' param_types='String;Function;Function' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Loads the binary data for the item pack with the specified ident.
          ]]></description>
<param><![CDATA[ident the identifier of the item pack to be loaded.
     ]]></param>
<param><![CDATA[onLoaded a function with the signature: function (data :ByteArray) :void
     that will be called with the item pack data if it loads successfully.
     ]]></param>
<param><![CDATA[onFailure a function with the signature: function (error :Error) :void
     that will be called if the pack loading fails.
     ]]></param>
</method>
<method name='loadLevelPackData' fullname='com.whirled.game:GameSubControl/loadLevelPackData' isStatic='false' isFinal='false' isOverride='false'  param_names='ident;onLoaded;onFailure' param_types='String;Function;Function' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Loads the binary data for the level pack with the specified ident.
          ]]></description>
<param><![CDATA[ident the identifier of the level pack to be loaded.
     ]]></param>
<param><![CDATA[onLoaded a function with the signature: function (data :ByteArray) :void
     that will be called with the level pack data if it loads successfully.
     ]]></param>
<param><![CDATA[onFailure a function with the signature: function (error :Error) :void
     that will be called if the pack loading fails.
     ]]></param>
</method>
<method name='occupantChanged_v1' fullname='com.whirled.game:GameSubControl/private:occupantChanged_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='occupantId;player;enter' param_types='int;Boolean;Boolean' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Private method to post a OccupantEvent.
     ]]></description>
</method>
<method name='playerReady' fullname='com.whirled.game:GameSubControl/playerReady' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     If the game was not configured to auto-start, which is determined by the 2nd parameter
     to the GameControl constructor, then all player clients must call this function to let the
     server know that they are ready, at which point the game will be started. Once a game is
     over, all clients can call this function again to start a new game.
     ]]></description>
</method>
<method name='restartGameIn' fullname='com.whirled.game:GameSubControl/restartGameIn' isStatic='false' isFinal='false' isOverride='false'  param_names='seconds' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Requests to start the game again in the specified number of seconds. This should only be
     used for party games. Seated table games (including single player games) should have
     each player report that they are ready again and the game will automatically start.
     ]]></description>
</method>
<method name='roundStateChanged_v1' fullname='com.whirled.game:GameSubControl/private:roundStateChanged_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='started' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Private method to post a StateChangedEvent.
     ]]></description>
</method>
<method name='setUserProps' fullname='com.whirled.game:GameSubControl/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='startNextTurn' fullname='com.whirled.game:GameSubControl/startNextTurn' isStatic='false' isFinal='false' isOverride='false'  param_names='nextPlayerId' param_types='int' param_defaults='0' result_type='void'>
<description><![CDATA[
     Start the next player's turn. If a playerId is specified, that player's turn will be
     next. Otherwise the turn will be assigned randomly the first time, after that following
     the "natural" turn order. In a seated game, the natural order follows the seating order.
     In a party game, the natural order is to give the turn to the player that has been
     around the longest without getting a turn.
     ]]></description>
</method>
<method name='systemMessage' fullname='com.whirled.game:GameSubControl/systemMessage' isStatic='false' isFinal='false' isOverride='false'  param_names='msg' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ 
     Send a system chat message that will be seen by everyone in the game room,
     even observers.
     ]]></description>
</method>
<method name='turnDidChange_v1' fullname='com.whirled.game:GameSubControl/private:turnDidChange_v1' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Private method to post a StateChangedEvent.
     ]]></description>
</method>
<method name='userChat_v1' fullname='com.whirled.game:GameSubControl/private:userChat_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='speaker;message' param_types='int;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Private method to post a UserChatEvent.
     ]]></description>
</method>
<method name='seating' fullname='com.whirled.game:GameSubControl/seating/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.game:SeatingSubControl'>
<description><![CDATA[
     Access the 'seating' subcontrol. Note that this will be null in "party" games,
     because there's no such thing as seats.
     ]]></description>
</method>
<field name='CASCADING_PAYOUT' fullname='com.whirled.game:GameSubControl/CASCADING_PAYOUT' type='int' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[ Cascading payout skews awards toward the winners by giving 50% of last place's payout to
     first place, 25% to the next inner pair of opponents (third to second in a four player game,
     for example), and so on. It is very similar overall to WINNERS_TAKE_ALL, only it rewards
     everyone at least a little bit. ]]></description>
</field>
<field name='PROPORTIONAL' fullname='com.whirled.game:GameSubControl/PROPORTIONAL' type='int' isStatic='true' isConst='true' defaultValue='3' >
<description><![CDATA[ Proportional is used for games where there is no way to measure player's performance
     against a global standard, but where the scores are subjective to the particular players
     currently playing. Each player vies to get their score the highest, and the coins are split
     up according to the relative scores. ]]></description>
</field>
<field name='SERVER_AGENT_ID' fullname='com.whirled.game:GameSubControl/SERVER_AGENT_ID' type='int' isStatic='true' isConst='true' defaultValue='-2.147483648E9' >
<description><![CDATA[ ID constant returned by <code>getMyId</code> when called by a game's server agent. 
     ]]></description>
<see><![CDATA[#getMyId() ]]></see>
</field>
<field name='TO_EACH_THEIR_OWN' fullname='com.whirled.game:GameSubControl/TO_EACH_THEIR_OWN' type='int' isStatic='true' isConst='true' defaultValue='2' >
<description><![CDATA[ Each player receives a payout based only on their score and not influenced by the
     scores of any other player. ]]></description>
</field>
<field name='WINNERS_TAKE_ALL' fullname='com.whirled.game:GameSubControl/WINNERS_TAKE_ALL' type='int' isStatic='true' isConst='true' defaultValue='1' >
<description><![CDATA[ Winner takes all splits the total coins available to award to all players in the game among
     those identified as winners at the end of the game. When used with endGameWithScores, it
     is intended for games where each player's performance is independant of the others and
     can be measured against a global standard. The winner(s) will get more coins if they beat
     someone else who played well than if they beat someone who played poorly.
     Using it with endGameWithWinners() is intended for games in which there is no per-player
     score, just some player(s) defeating others. In this case, the game is stating that
     it cannot distinguish between an excellent player and a poor player, just one won
     over the others.
     ]]></description>
</field>
<field name='_gameConfig' fullname='com.whirled.game:GameSubControl/protected:_gameConfig' type='Object' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[ Contains any custom game configuration data. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_seatingCtrl' fullname='com.whirled.game:GameSubControl/protected:_seatingCtrl' type='com.whirled.game:SeatingSubControl' isStatic='false' isConst='false' >
<description><![CDATA[ The seating sub-control. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='BagsSubControl' fullname='com.whirled.game:BagsSubControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/game/BagsSubControl.as' namespace='com.whirled.game' access='public' baseclass='com.whirled:AbstractSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Contains 'bags' game services. Do not instantiate this class yourself, access it via
 GameControl.services.bags.
  Bags are secret collections containing non-unique elements that are stored on the server. They
 can be used to implement game features where clients can't be trusted to not sniff their network.
 
 For example you could create a bag called "dice" and fill it with [ 1, 2, 3, 4, 5, 6 ]. Now you
 can roll the die with _ctrl.services.bags.pick("dice", 1, "diceProperty");
 ]]></description>
</classRec>
<method name='BagsSubControl' fullname='com.whirled.game:BagsSubControl/BagsSubControl' isStatic='false' isFinal='false' isOverride='false'  param_names='parent' param_types='com.whirled:AbstractControl' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='addTo' fullname='com.whirled.game:BagsSubControl/addTo' isStatic='false' isFinal='false' isOverride='false'  param_names='bagName;values' param_types='String;Array' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Add values to an existing bag. If it doesn't exist, it will be created.
     ]]></description>
</method>
<method name='create' fullname='com.whirled.game:BagsSubControl/create' isStatic='false' isFinal='false' isOverride='false'  param_names='bagName;values' param_types='String;Array' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Create a bag containing the specified values, clearing any previous bag with the same name.
     ]]></description>
</method>
<method name='deal' fullname='com.whirled.game:BagsSubControl/deal' isStatic='false' isFinal='false' isOverride='false'  param_names='bagName;count;msgOrPropName;callback;playerId' param_types='String;int;String;Function;int' param_defaults='undefined;undefined;undefined;null;unknown' result_type='void'>
<description><![CDATA[
     Deal (remove) the specified number of elements from a bag, and distribute them to a 
     specific player or set them as a property in the game data. Fails if the named collection 
     could not be found or does not contain enough elements to complete the deal.
          ]]></description>
<param><![CDATA[bagName the collection name.
     ]]></param>
<param><![CDATA[count the number of elements to pick
     ]]></param>
<param><![CDATA[msgOrPropName the name of the message or property that will contain the picked 
     elements.
     ]]></param>
<param><![CDATA[callback optional function to call after the deal has completed. If provided, the 
     signature of the function must be compatible with the following:
         <listing version="3.0">
             function onDealt (count :int) :void {}
         </listing>
     If the deal fails for any reason, the count will be 0, otherwise it will be the number of 
     elements dealt.
     ]]></param>
<param><![CDATA[playerId if <code>SHOW_TO_ALL</code> (or unset), the picked elements should be set on 
     the gameObject as a property for all to see. If a playerId is specified, only that player 
     will receive the elements as a message.
     ]]></param>
<see><![CDATA[#SHOW_TO_ALL
     ]]></see>
</method>
<method name='getFrom' fullname='com.whirled.game:BagsSubControl/protected:getFrom' isStatic='false' isFinal='false' isOverride='false'  param_names='bagName;count;msgOrPropName;playerId;consume;callback' param_types='String;int;String;int;Boolean;Function' param_defaults='undefined;undefined;undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Helper method for pick and deal.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='merge' fullname='com.whirled.game:BagsSubControl/merge' isStatic='false' isFinal='false' isOverride='false'  param_names='srcBag;intoBag' param_types='String;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Merge all values from the specified bag into the other bag. The source bag will be destroyed.
     The elements from the source bag will be shuffled and appended to the end of the destination
     bag.
     ]]></description>
</method>
<method name='pick' fullname='com.whirled.game:BagsSubControl/pick' isStatic='false' isFinal='false' isOverride='false'  param_names='bagName;count;msgOrPropName;playerId' param_types='String;int;String;int' param_defaults='undefined;undefined;undefined;unknown' result_type='void'>
<description><![CDATA[
     Pick (do not remove) the specified number of elements from a bag, and distribute them to a
     specific player or set them as a property in the game data.
          ]]></description>
<param><![CDATA[bagName the collection name.
     ]]></param>
<param><![CDATA[count the number of elements to pick
     ]]></param>
<param><![CDATA[msgOrPropName the name of the message or property that will contain the picked
     elements.
     ]]></param>
<param><![CDATA[playerId if <code>SHOW_TO_ALL</code> (or unset), the picked elements should be set on
     the gameObject as a property for all to see. If a playerId is specified, only that player
     will receive the elements as a message.
     ]]></param>
<see><![CDATA[#SHOW_TO_ALL
     ]]></see>
</method>
<method name='populate' fullname='com.whirled.game:BagsSubControl/protected:populate' isStatic='false' isFinal='false' isOverride='false'  param_names='bagName;values;clearExisting' param_types='String;Array;Boolean' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Helper method for create and addTo.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='SHOW_TO_ALL' fullname='com.whirled.game:BagsSubControl/SHOW_TO_ALL' type='int' isStatic='true' isConst='true' defaultValue='0' >
<description><![CDATA[ 
     Player id constant used by <code>pick</code> and <code>deal</code> indicating that elements 
     should be picked or dealt publicly to all players.
     ]]></description>
<see><![CDATA[#pick()
     ]]></see>
<see><![CDATA[#deal()
     ]]></see>
</field>
<classRec name='ServicesSubControl' fullname='com.whirled.game:ServicesSubControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/game/ServicesSubControl.as' namespace='com.whirled.game' access='public' baseclass='com.whirled:AbstractSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Provides access to 'services' game services. Do not instantiate this class yourself,
 access it via GameControl.services.
 ]]></description>
</classRec>
<method name='ServicesSubControl' fullname='com.whirled.game:ServicesSubControl/ServicesSubControl' isStatic='false' isFinal='false' isOverride='false'  param_names='parent' param_types='com.whirled.game:GameControl' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='checkDictionaryWord' fullname='com.whirled.game:ServicesSubControl/checkDictionaryWord' isStatic='false' isFinal='false' isOverride='false'  param_names='locale;dictionary;word;callback' param_types='String;String;String;Function' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Checks to see if the dictionary for the given locale contains the given word.
          ]]></description>
<param><![CDATA[locale RFC 3066 string that represents language settings, such as en-US.
     ]]></param>
<param><![CDATA[dictionary the dictionary to use, or null for the default.
                       TODO: document possible parameters.
     ]]></param>
<param><![CDATA[word the string contains the word to be checked
     ]]></param>
<param><![CDATA[callback the function that will process the results, of the form:
     <pre>function (word :String, result :Boolean) :void</pre>
     where word is a copy of the word that was requested, and result specifies whether the word
     is valid given language settings
     ]]></param>
</method>
<method name='createSubControls' fullname='com.whirled.game:ServicesSubControl/protected:createSubControls' isStatic='false' isFinal='false' isOverride='true'  result_type='Array'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getDictionaryLetters' fullname='com.whirled.game:ServicesSubControl/getDictionaryLetters' isStatic='false' isFinal='false' isOverride='false'  param_names='locale;dictionary;count;callback' param_types='String;String;int;Function' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Requests a list of random letters from the dictionary service. The letters will arrive in a
     separate message with the specified key, as an array of strings.
          The returned letters aren't necessarily unique; there may be repeats in the array.
          ]]></description>
<param><![CDATA[locale RFC 3066 string that represents language settings, such as en-US.
     ]]></param>
<param><![CDATA[dictionary the dictionary to use, or null for the default.
                       TODO: document possible parameters.
     ]]></param>
<param><![CDATA[count the number of letters to be produced
     ]]></param>
<param><![CDATA[callback the function that will process the results, of the form:
     <pre>function (letters :Array) :void</pre>
     where letters is an array of strings containing letters for the given language settings
     (potentially empty).
     ]]></param>
</method>
<method name='getDictionaryWords' fullname='com.whirled.game:ServicesSubControl/getDictionaryWords' isStatic='false' isFinal='false' isOverride='false'  param_names='locale;dictionary;count;callback' param_types='String;String;int;Function' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Requests a set of random words from the dictionary service.
          ]]></description>
<param><![CDATA[locale RFC 3066 string that represents language settings, such as en-US.
     ]]></param>
<param><![CDATA[dictionary the dictionary to use, or null for the default.
                       TODO: document possible parameters.
     ]]></param>
<param><![CDATA[count the number of words to be produced, to a maximum of 100.
     ]]></param>
<param><![CDATA[callback the function that will process the results, of the form:
     <pre>function (words :Array) :void</pre>
     where words is an array of strings. This array will not contain repeated elements.
     If an error occured, this array will be empty.
     ]]></param>
</method>
<method name='startTicker' fullname='com.whirled.game:ServicesSubControl/startTicker' isStatic='false' isFinal='false' isOverride='false'  param_names='tickerName;msOfDelay' param_types='String;int' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Start the ticker with the specified name. The ticker will deliver messages
     (resulting in a MessageReceivedEvent being dispatched on the 'net' control)
     to all connected clients, at the specified delay. The value of each message is
     a single integer, starting with 0 and increasing by 1 with each messsage.
          Note: you may have a maximum of 3 tickers, and the minimum delay is 50ms.
          Note: When your game transitions to the GAME_ENDED state, all tickers are automatically
     stopped.
     ]]></description>
</method>
<method name='stopTicker' fullname='com.whirled.game:ServicesSubControl/stopTicker' isStatic='false' isFinal='false' isOverride='false'  param_names='tickerName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Stop the specified ticker.
     ]]></description>
</method>
<method name='bags' fullname='com.whirled.game:ServicesSubControl/bags/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.whirled.game:BagsSubControl'>
<description><![CDATA[
     Access the 'bags' subcontrol.
     ]]></description>
</method>
<field name='_bagsCtrl' fullname='com.whirled.game:ServicesSubControl/protected:_bagsCtrl' type='com.whirled.game:BagsSubControl' isStatic='false' isConst='false' >
<description><![CDATA[ The bags sub-control. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='ControlEvent' fullname='com.whirled:ControlEvent' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/ControlEvent.as' namespace='com.whirled' access='public' baseclass='flash.events:Event' isFinal='false' isDynamic='false' >
<description><![CDATA[
 An Event dispatched on controls (AvatarControl, PetControl...) to indicate
 that something has happened. Not all event types will be dispatched to all controls,
 please see the documentation for those controls.
 ]]></description>
</classRec>
<method name='ControlEvent' fullname='com.whirled:ControlEvent/ControlEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='type;name;value' param_types='String;String;Object' param_defaults='undefined;null;null' result_type='*'>
<description><![CDATA[
     Create a new ControlEvent.
     ]]></description>
</method>
<method name='clone' fullname='com.whirled:ControlEvent/clone' isStatic='false' isFinal='false' isOverride='true'  result_type='flash.events:Event'>
</method>
<method name='toString' fullname='com.whirled:ControlEvent/toString' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
</method>
<method name='name' fullname='com.whirled:ControlEvent/name/get' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Retrieve the 'name' for this event, which is a String value
     whose meaning is determined by the event type.
     ]]></description>
</method>
<method name='target' fullname='com.whirled:ControlEvent/target/get' isStatic='false' isFinal='false' isOverride='true'  result_type='Object'>
<description><![CDATA[
     Retrieve the event target, which will be the Control instance that
     dispatched this event.
     ]]></description>
</method>
<method name='value' fullname='com.whirled:ControlEvent/value/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Retrieve the object 'value' for this event, which is a value
     whose meaning is determined by the event type.
     ]]></description>
</method>
<field name='ACTION_TRIGGERED' fullname='com.whirled:ControlEvent/ACTION_TRIGGERED' type='String' isStatic='true' isConst='true' defaultValue='actionTriggered' >
<description><![CDATA[ An event type dispatched when an action is triggered.
     name: action name 
     value: action value
          ]]></description>
<eventType><![CDATA[actionTriggered
     ]]></eventType>
</field>
<field name='APPEARANCE_CHANGED' fullname='com.whirled:ControlEvent/APPEARANCE_CHANGED' type='String' isStatic='true' isConst='true' defaultValue='appearanceChanged' >
<description><![CDATA[ An event type dispatched when an Actor has had its appearance
     changed. Your code should react to this event and possibly redraw
     the actor, taking into account the orientation and whether the
     actor is moving or sleeping.
     name: unused
     value: unused
          ]]></description>
<eventType><![CDATA[appearanceChanged
     ]]></eventType>
</field>
<field name='AVATAR_SPOKE' fullname='com.whirled:ControlEvent/AVATAR_SPOKE' type='String' isStatic='true' isConst='true' defaultValue='avatarSpoke' >
<description><![CDATA[ An event type dispatched when this avatar speaks.
     name: unused
     value: unused
          ]]></description>
<eventType><![CDATA[avatarSpoke
     ]]></eventType>
</field>
<field name='CHAT_RECEIVED' fullname='com.whirled:ControlEvent/CHAT_RECEIVED' type='String' isStatic='true' isConst='true' defaultValue='chatReceived' >
<description><![CDATA[ An event type dispatched to all entities when someone chats.
     Note that only the instance in control receives this event.
     name: the speaker's entity ID
     value: chat message
          ]]></description>
<eventType><![CDATA[chatReceived
     ]]></eventType>
</field>
<field name='CONTROL_ACQUIRED' fullname='com.whirled:ControlEvent/CONTROL_ACQUIRED' type='String' isStatic='true' isConst='true' defaultValue='controlAcquired' >
<description><![CDATA[ An event type dispatched when this client-side instance of the item
     has gained "control" over the other client-side instances.
     name: unused
     value: unused
          ]]></description>
<eventType><![CDATA[controlAcquired
     ]]></eventType>
</field>
<field name='ENTITY_ENTERED' fullname='com.whirled:ControlEvent/ENTITY_ENTERED' type='String' isStatic='true' isConst='true' defaultValue='entityEntered' >
<description><![CDATA[
     An event dispatched when a new entity has been added to the room.
     Note: only the instance in control receives this event.
     name: The new entity ID
     value: unused
          ]]></description>
<eventType><![CDATA[entityEntered
     ]]></eventType>
</field>
<field name='ENTITY_LEFT' fullname='com.whirled:ControlEvent/ENTITY_LEFT' type='String' isStatic='true' isConst='true' defaultValue='entityLeft' >
<description><![CDATA[
     An event dispatched when an entity has been removed from the room.
     Note: only the instance in control receives this event.
     name: The entity ID. Note that this will no longer exist in the room.
     value: unused
          ]]></description>
<eventType><![CDATA[entityLeft
     ]]></eventType>
</field>
<field name='ENTITY_MOVED' fullname='com.whirled:ControlEvent/ENTITY_MOVED' type='String' isStatic='true' isConst='true' defaultValue='entityMoved' >
<description><![CDATA[
     An event dispatched when an actor begins and ends walking within the room.
     Note: only the instance in control receives this event.
     name: The moving entity's ID
     value: If the actor has started moving, this is an array containing the logical location it
       is moving to. Null when this event fires in response to the actor arriving at its
       destination.
          ]]></description>
<eventType><![CDATA[entityMoved
     ]]></eventType>
</field>
<field name='HOVER_OUT' fullname='com.whirled:ControlEvent/HOVER_OUT' type='String' isStatic='true' isConst='true' defaultValue='hoverOut' >
<description><![CDATA[ An event type dispatched to Furniture and Toys when the mouse is leaves them.
     Note that the normal MouseEvents will be blocked if the furniture has an action,
     so this is necessary to make doorways that react to mouse hovering.
     name: unused
     value: unused
          ]]></description>
<eventType><![CDATA[hoverOut
     ]]></eventType>
</field>
<field name='HOVER_OVER' fullname='com.whirled:ControlEvent/HOVER_OVER' type='String' isStatic='true' isConst='true' defaultValue='hoverOver' >
<description><![CDATA[ An event type dispatched to Furniture and Toys when the mouse is over them.
     Note that the normal MouseEvents will be blocked if the furniture has an action,
     so this is necessary to make doorways that react to mouse hovering.
     name: unused
     value: unused
          ]]></description>
<eventType><![CDATA[hoverOver
     ]]></eventType>
</field>
<field name='MEMORY_CHANGED' fullname='com.whirled:ControlEvent/MEMORY_CHANGED' type='String' isStatic='true' isConst='true' defaultValue='memoryChanged' >
<description><![CDATA[ An event type dispatched when the memory has changed.
     name: memory name
     value: memory value
          ]]></description>
<eventType><![CDATA[memoryChanged
     ]]></eventType>
</field>
<field name='MESSAGE_RECEIVED' fullname='com.whirled:ControlEvent/MESSAGE_RECEIVED' type='String' isStatic='true' isConst='true' defaultValue='messageRecieved' >
<description><![CDATA[ An event type dispatched when a message is received.
     name: message name
     value: message value
          ]]></description>
<eventType><![CDATA[messageReceived
     ]]></eventType>
</field>
<field name='MUSIC_ID3' fullname='com.whirled:ControlEvent/MUSIC_ID3' type='String' isStatic='true' isConst='true' defaultValue='musicId3' >
<description><![CDATA[
     An event that may be dispatched soon after music starts playing.
     name: unused
     value: an Object from which id3 tags may be read.
          ]]></description>
<eventType><![CDATA[musicId3
     ]]></eventType>
</field>
<field name='MUSIC_STARTED' fullname='com.whirled:ControlEvent/MUSIC_STARTED' type='String' isStatic='true' isConst='true' defaultValue='musicStarted' >
<description><![CDATA[
     An event dispatched when some music starts playing.
     name: unused
     value: unused
          ]]></description>
<eventType><![CDATA[musicStarted
     ]]></eventType>
</field>
<field name='MUSIC_STOPPED' fullname='com.whirled:ControlEvent/MUSIC_STOPPED' type='String' isStatic='true' isConst='true' defaultValue='musicStopped' >
<description><![CDATA[
     An event dispatched when some music stops playing.
     name: unused
     value: unused
          ]]></description>
<eventType><![CDATA[musicStopped
     ]]></eventType>
</field>
<field name='SIGNAL_RECEIVED' fullname='com.whirled:ControlEvent/SIGNAL_RECEIVED' type='String' isStatic='true' isConst='true' defaultValue='signalRecieved' >
<description><![CDATA[ An event type dispatched when a signal is received.
     Dispatched only to the instance in control.
     name: signal name
     value: signal value
          ]]></description>
<eventType><![CDATA[signalReceived
     ]]></eventType>
</field>
<field name='STATE_CHANGED' fullname='com.whirled:ControlEvent/STATE_CHANGED' type='String' isStatic='true' isConst='true' defaultValue='stateChanged' >
<description><![CDATA[ An event type dispatched to actors to indicate that they should
     be in the specified state.
     name: state name
     value: unused
          ]]></description>
<eventType><![CDATA[stateChanged
     ]]></eventType>
</field>
<field name='_name' fullname='com.whirled:ControlEvent/protected:_name' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ Internal storage for our name property. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_value' fullname='com.whirled:ControlEvent/protected:_value' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ Internal storage for our value property. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='AbstractControl' fullname='com.whirled:AbstractControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/AbstractControl.as' namespace='com.whirled' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
 The abstract base class for all controls and subcontrols.
 ]]></description>
<metadata>
	<Event owner='com.whirled:AbstractControl' name='unload' type='flash.events.Event' >
<description><![CDATA[
 Event.UNLOAD
 Dispatched when the SWF using this control has been unloaded.
 You should clean-up any resources that would otherwise stick around, like stopping any
 Timers, cancelling any sound streams, etc.
  ]]></description>
<eventType><![CDATA[flash.events.Event.UNLOAD
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='AbstractControl' fullname='com.whirled:AbstractControl/AbstractControl' isStatic='false' isFinal='false' isOverride='false'  param_names='disp;initialUserProps' param_types='flash.display:DisplayObject;Object' param_defaults='undefined;null' result_type='*'>
<description><![CDATA[
     ]]></description>
<param><![CDATA[disp the display object on the stage
     ]]></param>
<param><![CDATA[initialUserProps any userProps that should be configured even prior to setUserProps.
     ]]></param>
<private><![CDATA[]]></private>
</method>
<method name='addEventListener' fullname='com.whirled:AbstractControl/addEventListener' isStatic='false' isFinal='false' isOverride='true'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[
     Registers an event listener.
     ]]></description>
</method>
<method name='callHostCode' fullname='com.whirled:AbstractControl/protected:callHostCode' isStatic='false' isFinal='false' isOverride='false'  param_names='name;args' param_types='String;restParam' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
     Call a method exposed by the host code.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='callHostCodeFriend' fullname='com.whirled:AbstractControl/com.whirled:callHostCodeFriend' isStatic='false' isFinal='false' isOverride='false'  param_names='name;args' param_types='String;Array' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
     Exposed to sub controls.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='checkIsConnected' fullname='com.whirled:AbstractControl/protected:checkIsConnected' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Helper method to throw an error if we're not connected.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='createSubControls' fullname='com.whirled:AbstractControl/protected:createSubControls' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Override and return any custom sub-controls.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dispatch' fullname='com.whirled:AbstractControl/protected:dispatch' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Secret function to dispatch events.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dispatchEvent' fullname='com.whirled:AbstractControl/dispatchEvent' isStatic='false' isFinal='false' isOverride='true'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Your own events may not be dispatched here.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='doBatch' fullname='com.whirled:AbstractControl/doBatch' isStatic='false' isFinal='false' isOverride='false'  param_names='fn;args' param_types='Function;restParam' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Execute the specified function as a batch of commands that will be sent to the server
     together.  Messages can be sent no faster than a rate of 10 per second.  Using doBatch groups
     a number of set or sendMessage operations so that they are treated as a single unit towards
     this limit. For best performance, it should be used whenever a number of values are being set
     at once.
          ]]></description>
<example><![CDATA[     <listing version="3.0">
     _ctrl.doBatch(function () :void {
         _ctrl.net.set("board", new Array(100));
         _ctrl.net.set("scores", new Dictionary());
         _ctrl.net.set("captures", 0);
     });
     </listing>
          Note that it guarantees that those events get processed by the server as a unit, but
     the results will not come back as a unit. So, for instance, when you receive the
     PropertyChangedEvent for "board", checking the value of "scores" will still return
     the old value.
     ]]></example>
</method>
<method name='gotHostProps' fullname='com.whirled:AbstractControl/protected:gotHostProps' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Grab any properties needed from our host code.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleUnload' fullname='com.whirled:AbstractControl/protected:handleUnload' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Handle any shutdown required.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isConnected' fullname='com.whirled:AbstractControl/isConnected' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Are we connected and running inside the whirled environment, or has someone just
     loaded up our SWF by itself?
     ]]></description>
</method>
<method name='removeEventListener' fullname='com.whirled:AbstractControl/removeEventListener' isStatic='false' isFinal='false' isOverride='true'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
     Unregisters an event listener.
     ]]></description>
</method>
<method name='setUserProps' fullname='com.whirled:AbstractControl/protected:setUserProps' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Populate any properties or functions we want to expose to the host code.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_funcs' fullname='com.whirled:AbstractControl/protected:_funcs' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[ The functions supplied by the host. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_subControls' fullname='com.whirled:AbstractControl/protected:_subControls' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ Any sub-controls we may have. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='BaseDataPack' fullname='com.whirled:BaseDataPack' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/BaseDataPack.as' namespace='com.whirled' access='public' baseclass='flash.events:EventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A DataPack is a bundle of stored goodies for use by your game, avatar, or other whirled
 creation. In a DataPack can be named data values as well as named files.
 ]]></description>
<metadata>
	<Event owner='com.whirled:BaseDataPack' name='error' type='flash.events.ErrorEvent' >
<description><![CDATA[
 Dispatched when the DataPack could not load due to an error.
  ]]></description>
<eventType><![CDATA[flash.events.ErrorEvent.ERROR
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='BaseDataPack' fullname='com.whirled:BaseDataPack/BaseDataPack' isStatic='false' isFinal='false' isOverride='false'  param_names='bytes' param_types='flash.utils:ByteArray' param_defaults='null' result_type='*'>
<description><![CDATA[
     Construct a DataPack to be loaded from the specified source.
     Note that passing a ByteArray will result in a DataPack that is instantly complete.
          ]]></description>
<param><![CDATA[bytes a ByteArray containing the raw data.
     ]]></param>
</method>
<method name='bytesAvailable' fullname='com.whirled:BaseDataPack/protected:bytesAvailable' isStatic='false' isFinal='false' isOverride='false'  param_names='bytes' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Read the zip file.
          ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='bytesToString' fullname='com.whirled:BaseDataPack/protected:bytesToString' isStatic='false' isFinal='false' isOverride='false'  param_names='ba' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Turn the specified ByteArray into a String.
          ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dispatchError' fullname='com.whirled:BaseDataPack/protected:dispatchError' isStatic='false' isFinal='false' isOverride='false'  param_names='message' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Dispatch an error event with the specified message.
          ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='extractStringValue' fullname='com.whirled:BaseDataPack/protected:extractStringValue' isStatic='false' isFinal='false' isOverride='false'  param_names='datum;valueField' param_types='XML;String' param_defaults='undefined;value' result_type='*'>
<description><![CDATA[
     Extract from the datum either a String, null, or undefined.
     ]]></description>
</method>
<method name='getArray' fullname='com.whirled:BaseDataPack/getArray' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='Array'>
<description><![CDATA[
     Convenience function to access some data as an Array.
     ]]></description>
</method>
<method name='getBoolean' fullname='com.whirled:BaseDataPack/getBoolean' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Convenience function to access some data as a Boolean.
     ]]></description>
</method>
<method name='getColor' fullname='com.whirled:BaseDataPack/getColor' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='uint'>
<description><![CDATA[
     Convenience function to access some data as a color (uint).
     ]]></description>
</method>
<method name='getData' fullname='com.whirled:BaseDataPack/getData' isStatic='false' isFinal='false' isOverride='false'  param_names='name;formatType' param_types='String;String' param_defaults='undefined;null' result_type='*'>
<description><![CDATA[
     Get some data, optionally formatted as a different type than that specified in the data xml.
     ]]></description>
</method>
<method name='getDatum' fullname='com.whirled:BaseDataPack/protected:getDatum' isStatic='false' isFinal='false' isOverride='false'  param_names='list;name' param_types='XMLList;String' param_defaults='undefined;undefined' result_type='XML'>
<description><![CDATA[
     Fucking hell.
          var datum :XML = getDatum(_metadata..data, value);
     This should be:
     var datum :XML = _metadata..data.(]]></description>
<name><![CDATA[== value) selector doesn't work if we're compiled in CS4,
     so this method is a workaround.
     ]]></name>
</method>
<method name='getFile' fullname='com.whirled:BaseDataPack/getFile' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='flash.utils:ByteArray'>
<description><![CDATA[
     Get a File, as a ByteArray.
     ]]></description>
</method>
<method name='getFileAsString' fullname='com.whirled:BaseDataPack/getFileAsString' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Get a File, as a String.
     ]]></description>
</method>
<method name='getFileAsXML' fullname='com.whirled:BaseDataPack/getFileAsXML' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='XML'>
<description><![CDATA[
     Get a File, as an XML object.
     ]]></description>
</method>
<method name='getFileBytes' fullname='com.whirled:BaseDataPack/protected:getFileBytes' isStatic='false' isFinal='false' isOverride='false'  param_names='fileName' param_types='String' param_defaults='undefined' result_type='flash.utils:ByteArray'>
<description><![CDATA[
     Get the actual bytes in use for the specified filename.
          ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getFileInternal' fullname='com.whirled:BaseDataPack/protected:getFileInternal' isStatic='false' isFinal='false' isOverride='false'  param_names='name;asString' param_types='String;Boolean' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
     Locate the data contained within a file with the specified data name.
          ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getFileName' fullname='com.whirled:BaseDataPack/protected:getFileName' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Translate the requested file into the actual filename stored in the zip.
          ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getInt' fullname='com.whirled:BaseDataPack/getInt' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='int'>
<description><![CDATA[
     Convenience function to access some data as an int.
     ]]></description>
</method>
<method name='getNumber' fullname='com.whirled:BaseDataPack/getNumber' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='Number'>
<description><![CDATA[
     Convenience function to access some data as a Number.
     ]]></description>
</method>
<method name='getPoint' fullname='com.whirled:BaseDataPack/getPoint' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='flash.geom:Point'>
<description><![CDATA[
     Convenience function to access some data as a Point.
     ]]></description>
</method>
<method name='getRectangle' fullname='com.whirled:BaseDataPack/getRectangle' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='flash.geom:Rectangle'>
<description><![CDATA[
     Convenience function to access some data as a Rectangle.
     ]]></description>
</method>
<method name='getString' fullname='com.whirled:BaseDataPack/getString' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Convenience function to access some data as a String.
     ]]></description>
</method>
<method name='isComplete' fullname='com.whirled:BaseDataPack/isComplete' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Has the loading of the datapack completed?
     ]]></description>
</method>
<method name='parseValue' fullname='com.whirled:BaseDataPack/protected:parseValue' isStatic='false' isFinal='false' isOverride='false'  param_names='datum;valueField;typeOverride' param_types='XML;String;String' param_defaults='undefined;value;null' result_type='*'>
<description><![CDATA[
     Parse a data value from the specified XML datum.
          ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='parseValueFromString' fullname='com.whirled:BaseDataPack/protected:parseValueFromString' isStatic='false' isFinal='false' isOverride='false'  param_names='string;type' param_types='String;String' param_defaults='undefined;undefined' result_type='Object'>
</method>
<method name='validateAccess' fullname='com.whirled:BaseDataPack/protected:validateAccess' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='String'>
<description><![CDATA[
     Validate that the everything is ok accessing the specified data name.
          ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='validateComplete' fullname='com.whirled:BaseDataPack/protected:validateComplete' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Validate that this DataPack has completed loading.
          ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='validateName' fullname='com.whirled:BaseDataPack/protected:validateName' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Validate that the specified data name is legal.
          ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='CONTENT_DATANAME' fullname='com.whirled:BaseDataPack/protected:CONTENT_DATANAME' type='String' isStatic='true' isConst='true' defaultValue='_CONTENT' >
<description><![CDATA[ The data name of the primary media file, used for all-in-one remixable media. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='METADATA_FILENAME' fullname='com.whirled:BaseDataPack/protected:METADATA_FILENAME' type='String' isStatic='true' isConst='true' defaultValue='_data.xml' >
<description><![CDATA[ The filename of the metadata file. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_metadata' fullname='com.whirled:BaseDataPack/protected:_metadata' type='XML' isStatic='false' isConst='false' >
<description><![CDATA[ The metadata. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_zip' fullname='com.whirled:BaseDataPack/protected:_zip' type='nochump.util.zip:ZipFile' isStatic='false' isConst='false' >
<description><![CDATA[ The contents of the datapack. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='AbstractSubControl' fullname='com.whirled:AbstractSubControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/AbstractSubControl.as' namespace='com.whirled' access='public' baseclass='com.whirled:AbstractControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Abstract base class. Do not instantiate.
 ]]></description>
</classRec>
<method name='AbstractSubControl' fullname='com.whirled:AbstractSubControl/AbstractSubControl' isStatic='false' isFinal='false' isOverride='false'  param_names='parent' param_types='com.whirled:AbstractControl' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='callHostCode' fullname='com.whirled:AbstractSubControl/protected:callHostCode' isStatic='false' isFinal='false' isOverride='true'  param_names='name;args' param_types='String;restParam' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='doBatch' fullname='com.whirled:AbstractSubControl/doBatch' isStatic='false' isFinal='false' isOverride='true'  param_names='fn;args' param_types='Function;restParam' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     
     Execute the specified function as a batch of commands that will be sent to the server
     together.  Messages can be sent no faster than a rate of 10 per second.  Using doBatch groups
     a number of set or sendMessage operations so that they are treated as a single unit towards
     this limit. For best performance, it should be used whenever a number of values are being set
     at once.
          ]]></description>
</method>
<method name='gotHostPropsFriend' fullname='com.whirled:AbstractSubControl/com.whirled:gotHostPropsFriend' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isConnected' fullname='com.whirled:AbstractSubControl/isConnected' isStatic='false' isFinal='false' isOverride='true'  result_type='Boolean'>
<description><![CDATA[
     
     Are we connected and running inside the whirled environment, or has someone just
     loaded up our SWF by itself?
     ]]></description>
</method>
<method name='setUserPropsFriend' fullname='com.whirled:AbstractSubControl/com.whirled:setUserPropsFriend' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_parent' fullname='com.whirled:AbstractSubControl/protected:_parent' type='com.whirled:AbstractControl' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='MiniGameControl' fullname='com.whirled:MiniGameControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/MiniGameControl.as' namespace='com.whirled' access='public' baseclass='com.whirled:AbstractControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 NOTE: currently not used anywhere. ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='MiniGameControl' fullname='com.whirled:MiniGameControl/MiniGameControl' isStatic='false' isFinal='false' isOverride='false'  param_names='disp' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     ]]></description>
</method>
<method name='reportPerformance' fullname='com.whirled:MiniGameControl/reportPerformance' isStatic='false' isFinal='false' isOverride='false'  param_names='score;style' param_types='Number;Number' param_defaults='undefined;0' result_type='void'>
<description><![CDATA[
     Report our performance to the server. This may be called at any time.
          ]]></description>
<param><![CDATA[score A standardized score between 0 (total booch) and
                  1 (perfect performance).
     ]]></param>
<param><![CDATA[style (Optional) Style points, also between 0 and 1.
     ]]></param>
</method>
<classRec name='EntityControl' fullname='com.whirled:EntityControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/EntityControl.as' namespace='com.whirled' access='public' baseclass='com.whirled:AbstractControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Handles services that are available to all entities in a room. This includes dispatching
 trigger events and maintaining memory.
 ]]></description>
<metadata>
	<Event owner='com.whirled:EntityControl' name='musicStopped' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when music stops playing in the room.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.MUSIC_STOPPED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled:EntityControl' name='musicId3' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when id3 data is known for a song.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.MUSIC_ID3
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled:EntityControl' name='musicStarted' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when music starts playing in the room. If the current user can hear it,
 id3 data aybe available shortly after this event.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.MUSIC_STARTED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled:EntityControl' name='entityMoved' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when an entity in the room (other than the listening entity) changes location.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.ENTITY_MOVED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled:EntityControl' name='entityLeft' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when an entity leaves the room.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.ENTITY_LEFT
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled:EntityControl' name='entityEntered' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when an entity enters the room.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.ENTITY_ENTERED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled:EntityControl' name='timer' type='flash.events.TimerEvent' >
<description><![CDATA[
 Dispatched once per tick, only when this instance has control and only if tick interval is
 registered.
  ]]></description>
<eventType><![CDATA[flash.events.TimerEvent.TIMER
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled:EntityControl' name='controlAcquired' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when this instance gains control. See the <code>hasControl</code> method.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.CONTROL_ACQUIRED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled:EntityControl' name='chatReceived' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched to entities when they overhear chatter in the room. Only
 the instance in control receives this event.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.CHAT_RECEIVED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled:EntityControl' name='memoryChanged' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when the instance in control updates the memory of this digital item.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.MEMORY_CHANGED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled:EntityControl' name='signalReceived' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when any entity or AVR game sends a message to all other entities.
 <p>Note: this is only dispatched to the instance in control.</p>
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.SIGNAL_RECEIVED
 ]]></eventType>
<see><![CDATA[com.whirled.avrg.RoomSubControlServer#sendSignal()
 ]]></see>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled:EntityControl' name='messageReceived' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when any instance sends a message to all instances.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.MESSAGE_RECEIVED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled:EntityControl' name='actionTriggered' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when the instance in control sends a trigger action to all instances.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.ACTION_TRIGGERED
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='EntityControl' fullname='com.whirled:EntityControl/EntityControl' isStatic='false' isFinal='false' isOverride='false'  param_names='disp' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='canManageRoom' fullname='com.whirled:EntityControl/canManageRoom' isStatic='false' isFinal='false' isOverride='false'  param_names='memberId' param_types='int' param_defaults='0' result_type='Boolean'>
<description><![CDATA[
     Returns true if the local client has management privileges in the current room.
     A user with management permissions can edit the room, among other things.
     Passing 0 for the memberId indicates that this instance's viewing user should be checked.
     Note that this may change without notice, meaning that you shouldn't just check it once
     for a user and assume they still have management permissions later.
     ]]></description>
</method>
<method name='checkIsConnected' fullname='com.whirled:EntityControl/protected:checkIsConnected' isStatic='false' isFinal='false' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='clearPopup' fullname='com.whirled:EntityControl/clearPopup' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Clear any showing popup. May be called at any time.
     ]]></description>
</method>
<method name='dispatchCtrlEvent' fullname='com.whirled:EntityControl/com.whirled:dispatchCtrlEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='ctrlEvent;key;value' param_types='String;String;Object' param_defaults='undefined;null;null' result_type='void'>
<description><![CDATA[
     Helper method to dispatch a ControlEvent, avoiding creation if there are no listeners.
     ]]></description>
</method>
<method name='entityEntered_v1' fullname='com.whirled:EntityControl/protected:entityEntered_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='entityId' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='entityLeft_v1' fullname='com.whirled:EntityControl/protected:entityLeft_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='entityId' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='entityMoved_v2' fullname='com.whirled:EntityControl/protected:entityMoved_v2' isStatic='false' isFinal='false' isOverride='false'  param_names='entityId;destination' param_types='String;Array' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getCamera' fullname='com.whirled:EntityControl/getCamera' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='String' param_defaults='null' result_type='flash.media:Camera'>
<description><![CDATA[
     Access the local user's camera.
          <p>Calling Camera.getCamera() does not work inside whirled due to security restrictions.
     For convenience, this method works even when you're not connected.</p>
     ]]></description>
</method>
<method name='getConfigPanel_v1' fullname='com.whirled:EntityControl/protected:getConfigPanel_v1' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:DisplayObject'>
<description><![CDATA[
     Called when whirled is editing this furniture, to retrieve any custom configuration
     panel.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getDefaultDataPack' fullname='com.whirled:EntityControl/getDefaultDataPack' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.utils:ByteArray'>
<description><![CDATA[
     Get the default datapack for this entity, or null if there is none defined.
     The DataPack is returned as a ByteArray, which can easily be passed to the
     com.whirled.DataPack constructor. We do not return a DataPack for you, because otherwise
     including this class would include all the DataPack support classes, even if your
     project never made use of it.
     ]]></description>
</method>
<method name='getEntityIds' fullname='com.whirled:EntityControl/getEntityIds' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='null' result_type='Array'>
<description><![CDATA[
     Enumerates the ids of all entities in this room.
          ]]></description>
<param><![CDATA[type an optional filter to restrict the results to a particular type of entity.
     ]]></param>
</method>
<method name='getEntityProperty' fullname='com.whirled:EntityControl/getEntityProperty' isStatic='false' isFinal='false' isOverride='false'  param_names='key;entityId' param_types='String;String' param_defaults='undefined;null' result_type='Object'>
<description><![CDATA[
     Looks up and returns the specified property for the specified entity.
     Returns null if the entity does not exist or the entity has no such property.
     ]]></description>
</method>
<method name='getEnvironment' fullname='com.whirled:EntityControl/getEnvironment' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Get the "environment" in which this entity is presently running.
     
     ]]></description>
<return><![CDATA[one of the ENV_VIEWER, ENV_SHOP, or ENV_ROOM constants,
     or null if we're not connected.
     ]]></return>
</method>
<method name='getInstanceId' fullname='com.whirled:EntityControl/getInstanceId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get the id of the viewer that is viewing this instance.
     An instance is the copy of the entity running in a particular user's browser.
     If you are in a room with 2 other people, each piece of furniture has three instances:
     one on each person's browser.
          ]]></description>
<return><![CDATA[the memberId of the player viewing this instance, or zero if the instance is being
     viewed by something other than a player.
     ]]></return>
</method>
<method name='getLogicalLocation' fullname='com.whirled:EntityControl/getLogicalLocation' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Returns our current logical location in the scene.  Note that if y is nonzero, you are
     <b>flying</b>. If applicable, an avatar should animate appropriately. The actor method
     <code>isMoving()</code> may return true or false when flying, depending on whether you're
     floating or actually moving between locations.
          ]]></description>
<return><![CDATA[an array containing [ x, y, z ]. x, y, and z are Numbers between 0 and 1 or null if
     our location is unknown.
          ]]></return>
<see><![CDATA[com.whirled.ActorControl#isMoving()
     ]]></see>
</method>
<method name='getMemories' fullname='com.whirled:EntityControl/getMemories' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Return an associative hash of all the memories. This is not a cheap operation. Use
     <code>getMemory</code> if you know what you want.
     ]]></description>
<see><![CDATA[#getMemory
     ]]></see>
</method>
<method name='getMemory' fullname='com.whirled:EntityControl/getMemory' isStatic='false' isFinal='false' isOverride='false'  param_names='key;defval' param_types='String;Object' param_defaults='undefined;null' result_type='Object'>
<description><![CDATA[
     Returns the value associated with the supplied key in this item's memory. If no value is
     mapped in the item's memory, the supplied default value will be returned.
          ]]></description>
<return><![CDATA[the value for the specified key from this item's memory or the supplied default.
     ]]></return>
</method>
<method name='getMicrophone' fullname='com.whirled:EntityControl/getMicrophone' isStatic='false' isFinal='false' isOverride='false'  param_names='index' param_types='int' param_defaults='0' result_type='flash.media:Microphone'>
<description><![CDATA[
     Access the local user's microphone.
          <p>Calling Microphone.getMicrophone() does not work inside whirled due to security
     restrictions. For convenience, this method works even when you're not connected.</p>
     ]]></description>
</method>
<method name='getMusicId3' fullname='com.whirled:EntityControl/getMusicId3' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
     Get the id3 metadata of the currently playing music.
     This will be an Object roughly in the format of flash.media.Id3Info, except
     that only the "raw" names of id3 tags are supported.
     http://www.id3.org
     ]]></description>
</method>
<method name='getMyEntityId' fullname='com.whirled:EntityControl/getMyEntityId' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Returns the Whirled-wide unique ID of this copy of the entity. Multiple copies of the same
     avatar in a room, for example, each have different entity IDs.
     ]]></description>
</method>
<method name='getPixelLocation' fullname='com.whirled:EntityControl/getPixelLocation' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Returns our current location in the scene, in pixel coordinates.
          ]]></description>
<return><![CDATA[an array containing [ x, y, z ] in pixel coordinates. Obviously there is not a
     real Z coordinate, but the value will coorrespond to real Z distance in proportion
     to the distance in X and Y.
     ]]></return>
</method>
<method name='getRoomBounds' fullname='com.whirled:EntityControl/getRoomBounds' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Get the room's bounds in pixels.
          ]]></description>
<return><![CDATA[an array containing [ width, height, depth ].
     ]]></return>
</method>
<method name='getViewerName' fullname='com.whirled:EntityControl/getViewerName' isStatic='false' isFinal='false' isOverride='false'  param_names='id' param_types='int' param_defaults='0' result_type='String'>
<description><![CDATA[
     Get the non-unique display name of the user viewing a particular instance. Note
     that this cannot be used to look up member names of people who are not in the room.
          <p>TODO: other examples of where the member id comes from.</p>
          ]]></description>
<param><![CDATA[id a memberId, for example one obtained from <code>getInstanceId</code>. If the
     default argument of zero is passed, the instance id is used.
          ]]></param>
<return><![CDATA[a String or null if the viewer is unknown.
     ]]></return>
</method>
<method name='gotControl_v1' fullname='com.whirled:EntityControl/protected:gotControl_v1' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Called when this client has been assigned control of this object.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='gotHostProps' fullname='com.whirled:EntityControl/protected:gotHostProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='gotInitProps' fullname='com.whirled:EntityControl/protected:gotInitProps' isStatic='false' isFinal='false' isOverride='false'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Entities get another packet of data called the initProps.
          ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleUnload' fullname='com.whirled:EntityControl/protected:handleUnload' isStatic='false' isFinal='false' isOverride='true'  param_names='evt' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='hasConfigPanel_v1' fullname='com.whirled:EntityControl/protected:hasConfigPanel_v1' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='hasControl' fullname='com.whirled:EntityControl/hasControl' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Detects whether this client is in control.
          <p>Control is a mutually exclusive lock across all instances of the entity (i.e. running in
     other browsers across the network). Only one client can hold the lock at any time.</p>
     ]]></description>
</method>
<method name='lookupEntityProperty_v1' fullname='com.whirled:EntityControl/protected:lookupEntityProperty_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='key' param_types='String' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
     Called when some other entity is requesting a property from this sprite.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='memoryChanged_v1' fullname='com.whirled:EntityControl/protected:memoryChanged_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='key;value' param_types='String;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Called when one of this item's memory entries has changed.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='messageReceived_v1' fullname='com.whirled:EntityControl/protected:messageReceived_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='name;arg;isAction' param_types='String;Object;Boolean' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Called when an action or message is triggered on this scene object.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='musicId3_v1' fullname='com.whirled:EntityControl/protected:musicId3_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='id3' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='musicStartStop_v1' fullname='com.whirled:EntityControl/protected:musicStartStop_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='started' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='receivedChat_v2' fullname='com.whirled:EntityControl/protected:receivedChat_v2' isStatic='false' isFinal='false' isOverride='false'  param_names='entityId;message' param_types='String;String' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Called when this entity is overhearing a line of chatter in the room.
     If this instance of the entity has control, it will dispatch a new receivedChat event,
     otherwise the line will be ignored.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='recheckTicker' fullname='com.whirled:EntityControl/protected:recheckTicker' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Check the status of the ticker, starting or stopping it as necessary.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='registerCustomConfig' fullname='com.whirled:EntityControl/registerCustomConfig' isStatic='false' isFinal='false' isOverride='false'  param_names='func' param_types='Function' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Register a function used for generating a custom config panel. This will
     be called when this piece of furniture is being edited inside whirled.
          ]]></description>
<param><![CDATA[func signature: function () :DisplayObject
     <p>Your function should return a DisplayObject as a configuration panel.
     The width/height of the object at return time will be used to configure the amount
     of space given it. Any changes made by the user should effect immediately, or
     you should provide buttons to apply the change, if absolutely necessary.</p>
          ]]></param>
</method>
<method name='registerPropertyProvider' fullname='com.whirled:EntityControl/registerPropertyProvider' isStatic='false' isFinal='false' isOverride='false'  param_names='func' param_types='Function' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Registers a function that provides custom entity properties. This should be done immediately
     after creating your EntityControl, for example:
          <listing version="3.0">
     var ctrl :FurniControl = new FurniControl(this);
     ctrl.registerPropertyProvider(getEntityProperty);
     </listing>
          ]]></description>
<param><![CDATA[func signature: function (key :String) :Object
     ]]></param>
</method>
<method name='sendMessage' fullname='com.whirled:EntityControl/sendMessage' isStatic='false' isFinal='false' isOverride='false'  param_names='name;arg' param_types='String;Object' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Send a message to other instances of this entity, resulting in a MESSAGE_RECEIVED event.
          <p>Note: the name must be a String and may be up to 64 characters. The argument may be up
     to 1024 bytes after being AMF3 encoded.</p>
          <p>Note: Any instance can send messages. Compare with triggerAction.</p>
     ]]></description>
</method>
<method name='sendSignal' fullname='com.whirled:EntityControl/sendSignal' isStatic='false' isFinal='false' isOverride='false'  param_names='name;arg' param_types='String;Object' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Send a message to all instances of all entities in this instance's current room,
     resulting in a SIGNAL_RECEIVED event. All instances of the entity can initiate a
     signal, so the user must take care to check for control when appropriate.
          <p>Note: the name must be a String and may be up to 64 characters. The argument may be up
     to 1024 bytes after being AMF3 encoded.</p>
     ]]></description>
</method>
<method name='setHotSpot' fullname='com.whirled:EntityControl/setHotSpot' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y;height' param_types='Number;Number;Number' param_defaults='undefined;undefined;unknown' result_type='void'>
<description><![CDATA[
     Set the layout "hotspot" for your item, specified as pixels relative to (0, 0) the top-left
     coordinate.
          If unset, the default hotspot will be based off of the SWF dimensions, with x = width / 2,
     y = height.
          ]]></description>
<param><![CDATA[x the new hotspot x coordinate
     ]]></param>
<param><![CDATA[y the new hotspot y coordinate
     ]]></param>
<param><![CDATA[height if specified, the entity's actual current height, as pixels above the hotspot.
                   This is used by avatars to position the name label.
     ]]></param>
</method>
<method name='setMemory' fullname='com.whirled:EntityControl/setMemory' isStatic='false' isFinal='false' isOverride='false'  param_names='key;value;callback' param_types='String;Object;Function' param_defaults='undefined;undefined;null' result_type='void'>
<description><![CDATA[
     Requests that this item's memory be updated with the supplied key/value pair. The supplied
     value must be a simple object (Integer, Number, String) or an Array of simple objects. The
     contents of the entity's memory (keys and values) must not exceed 4096 bytes when AMF3
     encoded.
          <p>Setting the memory for a key to null clears that key; subsequent lookups will return the
     default value.</p>
          <p>Note: for avatars, only the instance "in control" can update memories, but this
     restriction does not hold (presently) for pets, furni, toys, or backdrops. Put another
     way, only the instance of the person wearing the avatar can update memories.</p>
          ]]></description>
<param><![CDATA[callback An optional function that is passed a Boolean indicating whether the
     memory was successfully updated or not. True if the memory update was accepted, or false
     if the memory update failed due to size or other restrictions.
     ]]></param>
</method>
<method name='setTickInterval' fullname='com.whirled:EntityControl/setTickInterval' isStatic='false' isFinal='false' isOverride='false'  param_names='interval' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Configures the interval on which this item is "ticked" in milliseconds. If the client
     setting this interval is in control, it will get a <code>timer</code> event at the
     specified interval.
          <p>Ticking mechanism is turned off by default. Application needs to set the interval
     explicitly to start receiving tick events. The tick interval can be no smaller than 100ms
     to avoid bogging down the client.</p>
          ]]></description>
<param><![CDATA[interval Delay between ticks in milliseconds, either 0ms, or a value larger
     than 100ms. Value larger than zero activates the ticking mechanism,
     and a value of exactly zero deactivates it.
     ]]></param>
</method>
<method name='setUserProps' fullname='com.whirled:EntityControl/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Populate any properties that we provide back to whirled.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='showPage' fullname='com.whirled:EntityControl/showPage' isStatic='false' isFinal='false' isOverride='false'  param_names='token' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
     Shows the Whirled page identified by the supplied token.
          ]]></description>
<param><![CDATA[token the token that identifies the page to be shown. This is <em>not</em> the full
     URL, just the part after http://www.whirled.com/#. For example: passing "me" would show the
     Me page. Passing "shop-l_5_343" would show the shop page for the Kawaii Knight avatar.
          ]]></param>
<return><![CDATA[true if the page was shown, false if it could not be shown for some reason.
     ]]></return>
</method>
<method name='showPopup' fullname='com.whirled:EntityControl/showPopup' isStatic='false' isFinal='false' isOverride='false'  param_names='title;panel;width;height;backgroundColor;backgroundAlpha' param_types='String;flash.display:DisplayObject;Number;Number;uint;Number' param_defaults='undefined;undefined;undefined;undefined;0xFFFFFF;1.0' result_type='Boolean'>
<description><![CDATA[
     Show a popup to the current user in the whirled. Only one popup between all entities in
     a room can be show at one time. Calling this closes any existing popup currently open.
          ]]></description>
<param><![CDATA[title The title displayed in the title bar for the popup.
     ]]></param>
<param><![CDATA[panel The display object to show in the popup. It should only paint inside the
                  rectangle defined by (0, 0, width, height).
     ]]></param>
<param><![CDATA[width The width of the panel.
     ]]></param>
<param><![CDATA[height The height of the panel.
     ]]></param>
<param><![CDATA[backgroundColor The RGB value to fill the background of the panel with.
     ]]></param>
<param><![CDATA[backgroundAlpha The transparency to fill the background of the panel with.
          ]]></param>
<return><![CDATA[true if the popup was shown, false if it could not be shown for various reasons.
     ]]></return>
</method>
<method name='signalReceived_v1' fullname='com.whirled:EntityControl/protected:signalReceived_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='name;arg' param_types='String;Object' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Called when an action or message is triggered on this scene object.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='stopTicker' fullname='com.whirled:EntityControl/protected:stopTicker' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Stops our AI ticker.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='triggerAction' fullname='com.whirled:EntityControl/triggerAction' isStatic='false' isFinal='false' isOverride='false'  param_names='name;arg' param_types='String;Object' param_defaults='undefined;null' result_type='void'>
<description><![CDATA[
     Triggers an action on this scene object. The action will be properly distributed to the
     object running in every client in the scene, resulting in a ACTION_TRIGGERED event.
          <p>Note: the name must be a String and may be up to 64 characters. The argument may be up
     to 1024 bytes after being AMF3 encoded.</p>
          <p>Note: Only the instance "in control" can trigger actions. If you want any instance to be
     able to communicate, use <code>sendMessage()</code>.</p>
     ]]></description>
</method>
<field name='ENV_ROOM' fullname='com.whirled:EntityControl/ENV_ROOM' type='String' isStatic='true' isConst='true' defaultValue='room' >
<description><![CDATA[ A constant returned by getEnvironment() to indicate that this entity is
     being viewed in a room. Memories are persistent. ]]></description>
</field>
<field name='ENV_SHOP' fullname='com.whirled:EntityControl/ENV_SHOP' type='String' isStatic='true' isConst='true' defaultValue='shop' >
<description><![CDATA[ A constant returned by getEnvironment() to indicate that this entity is
     being viewed in the shop. If the user buys the item, any memories will be saved for
     the user's new copy of the item. ]]></description>
</field>
<field name='ENV_VIEWER' fullname='com.whirled:EntityControl/ENV_VIEWER' type='String' isStatic='true' isConst='true' defaultValue='viewer' >
<description><![CDATA[ A constant returned by getEnvironment() to indicate that this entity is
     being viewed in the "viewer": memories may be set and read, but they will not be saved. ]]></description>
</field>
<field name='PROP_DIMENSIONS' fullname='com.whirled:EntityControl/PROP_DIMENSIONS' type='String' isStatic='true' isConst='true' defaultValue='std:dimensions' >
<description><![CDATA[ The entity pixel dimensions (an Array [width, height]). Use with getEntityProperty(). ]]></description>
</field>
<field name='PROP_HOTSPOT' fullname='com.whirled:EntityControl/PROP_HOTSPOT' type='String' isStatic='true' isConst='true' defaultValue='std:hotspot' >
<description><![CDATA[ The entity's hot spot (an Array [x, y]). Use with getEntityProperty(). ]]></description>
</field>
<field name='PROP_LOCATION_LOGICAL' fullname='com.whirled:EntityControl/PROP_LOCATION_LOGICAL' type='String' isStatic='true' isConst='true' defaultValue='std:location_logical' >
<description><![CDATA[
     The entity's location in logical coordinates (an Array [ x, y, z ]). x, y, and z are Numbers
     between that are typically between 0 and 1 or null if our location is unknown.
     Note that Whirled allows furniture to be positioned "outside" the room, at locations less
     than 0 or greater than 1, in order to create a desired effect, so don't be surprised if
     something is placed at wacky coordinates.
     Use with getEntityProperty().
     ]]></description>
</field>
<field name='PROP_LOCATION_PIXEL' fullname='com.whirled:EntityControl/PROP_LOCATION_PIXEL' type='String' isStatic='true' isConst='true' defaultValue='std:location_pixel' >
<description><![CDATA[
     The entity's location in pixel coordinates (an Array [ x, y, z ]). Obviously there is not a
     real Z coordinate, but the value will coorrespond to real Z distance in proportion to the
     distance in X and Y. Use with getEntityProperty().
     ]]></description>
</field>
<field name='PROP_MEMBER_ID' fullname='com.whirled:EntityControl/PROP_MEMBER_ID' type='String' isStatic='true' isConst='true' defaultValue='std:member_id' >
<description><![CDATA[
     The unique Whirled player ID (int) of the wearer of the avatar, or the owner of the pet.
     Use with getEntityProperty().
     ]]></description>
</field>
<field name='PROP_MOVE_SPEED' fullname='com.whirled:EntityControl/PROP_MOVE_SPEED' type='String' isStatic='true' isConst='true' defaultValue='std:move_speed' >
<description><![CDATA[ The current movement speed of an actor (Number). ]]></description>
</field>
<field name='PROP_NAME' fullname='com.whirled:EntityControl/PROP_NAME' type='String' isStatic='true' isConst='true' defaultValue='std:name' >
<description><![CDATA[
     The non-unique display name of the entity (a String). Use with getEntityProperty().
     Valid only for "avatar" and "pet" entity types. Invalid entity types will return null.
     ]]></description>
</field>
<field name='PROP_ORIENTATION' fullname='com.whirled:EntityControl/PROP_ORIENTATION' type='String' isStatic='true' isConst='true' defaultValue='std:orientation' >
<description><![CDATA[
     The entity facing direction (a Number). Use with getEntityProperty().
     Valid only for "avatar" and "pet" entity types.
     ]]></description>
</field>
<field name='PROP_TYPE' fullname='com.whirled:EntityControl/PROP_TYPE' type='String' isStatic='true' isConst='true' defaultValue='std:type' >
<description><![CDATA[
     The type of the entity, TYPE_AVATAR, TYPE_PET or TYPE_FURNI.
     Use with getEntityProperty().
     ]]></description>
</field>
<field name='TYPE_AVATAR' fullname='com.whirled:EntityControl/TYPE_AVATAR' type='String' isStatic='true' isConst='true' defaultValue='avatar' >
<description><![CDATA[ The type of avatar entities. ]]></description>
</field>
<field name='TYPE_FURNI' fullname='com.whirled:EntityControl/TYPE_FURNI' type='String' isStatic='true' isConst='true' defaultValue='furni' >
<description><![CDATA[ The type of furniture entities. ]]></description>
</field>
<field name='TYPE_PET' fullname='com.whirled:EntityControl/TYPE_PET' type='String' isStatic='true' isConst='true' defaultValue='pet' >
<description><![CDATA[ The type of pet entities. ]]></description>
</field>
<field name='_customConfig' fullname='com.whirled:EntityControl/protected:_customConfig' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[ A function registered to return a custom configuration panel. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_datapack' fullname='com.whirled:EntityControl/protected:_datapack' type='flash.utils:ByteArray' isStatic='false' isConst='false' >
<description><![CDATA[ The default datapack, if any. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_env' fullname='com.whirled:EntityControl/protected:_env' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ The environment in which we're running. ]]></description>
</field>
<field name='_hasControl' fullname='com.whirled:EntityControl/protected:_hasControl' type='Boolean' isStatic='false' isConst='false' defaultValue='false' >
<description><![CDATA[ Whether this instance has control. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_location' fullname='com.whirled:EntityControl/protected:_location' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ Contains our current location in the scene [x, y, z], or null. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_propertyProvider' fullname='com.whirled:EntityControl/protected:_propertyProvider' type='Function' isStatic='false' isConst='false' >
<description><![CDATA[ User specified callback to publish properties. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_tickInterval' fullname='com.whirled:EntityControl/protected:_tickInterval' type='Number' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[ Our desired tick interval (in milliseconds). ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_ticker' fullname='com.whirled:EntityControl/protected:_ticker' type='flash.utils:Timer' isStatic='false' isConst='false' >
<description><![CDATA[ Used to tick this object when this client is running its AI. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='DataPack' fullname='com.whirled:DataPack' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/DataPack.as' namespace='com.whirled' access='public' baseclass='com.whirled:BaseDataPack' isFinal='false' isDynamic='false' >
<description><![CDATA[
 A DataPack is a bundle of stored goodies for use by your game, avatar, or other whirled
 creation. In a DataPack can be named data values as well as named files.
 ]]></description>
<metadata>
	<Event owner='com.whirled:DataPack' name='complete' type='flash.events.Event' >
<description><![CDATA[
 Dispatched when the DataPack has completed loading.
  ]]></description>
<eventType><![CDATA[flash.events.Event.COMPLETE
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='DataPack' fullname='com.whirled:DataPack/DataPack' isStatic='false' isFinal='false' isOverride='false'  param_names='source;completeListener;errorListener' param_types='Object;Function;Function' param_defaults='undefined;null;null' result_type='*'>
<description><![CDATA[
     Construct a DataPack to be loaded from the specified source.
     Note that passing a ByteArray will result in a DataPack that is instantly complete.
          ]]></description>
<param><![CDATA[source a url (as a String or as a URLRequest) from which to load the
            DataPack, or a ByteArray containing the raw data, or a Class.
     ]]></param>
<param><![CDATA[completeListener a listener function to automatically register for COMPLETE events.
     ]]></param>
<param><![CDATA[errorListener a listener function to automatically register for ERROR events.
          ]]></param>
<throws><![CDATA[TypeError if urlOrByteArray is not of the right type.
     ]]></throws>
</method>
<method name='bytesAvailable' fullname='com.whirled:DataPack/protected:bytesAvailable' isStatic='false' isFinal='false' isOverride='true'  param_names='bytes' param_types='flash.utils:ByteArray' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     
     Read the zip file.
          ]]></description>
</method>
<method name='close' fullname='com.whirled:DataPack/close' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     If the DataPack is still loading, stop it, otherwise has no effect. It would
     be a good idea to call this during your UNLOAD handling.
     ]]></description>
</method>
<method name='doGetObjects' fullname='com.whirled:DataPack/protected:doGetObjects' isStatic='false' isFinal='false' isOverride='false'  param_names='sources;callback;appDom;returnRawLoaders' param_types='Object;Function;flash.system:ApplicationDomain;Boolean' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Helper method for getDisplayObjects and getLoaders. Turns the sources into
     the ByteArrays they address, have MultiLoader coordinate the loading.
          ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getDisplayObjects' fullname='com.whirled:DataPack/getDisplayObjects' isStatic='false' isFinal='false' isOverride='false'  param_names='sources;callback;appDom' param_types='Object;Function;flash.system:ApplicationDomain' param_defaults='undefined;undefined;null' result_type='void'>
<description><![CDATA[
     Get some display objects in the datapack.
     <b>Note</b>: With the move to flash 10, it's now illegal to "reparent" a SWF that was
     compiled with AVM1 (flash 8, or newer but compiled as actionscript 1/2). It will work
     fine in flashplayer 9, but in flashplayer 10 it will give a runtime error. The workaround
     is to use getLoaders() instead, and add the Loader to your hierarchy.
          ]]></description>
<param><![CDATA[sources an Object containing keys mapping to the names of the display objects to load.
     ]]></param>
<param><![CDATA[callback a Function that will be called when all the display objects
                     are loaded (or were unable to load).
                     Signature: <code>function (results :Object) :void</code>
                     results will contain a mapping from name -> DisplayObject, or null if none.
     ]]></param>
<param><![CDATA[appDom The ApplicationDomain in which to load the DisplayObjects. The default value
                   of null will load into a child of the current ApplicationDomain.
     ]]></param>
</method>
<method name='getLoaders' fullname='com.whirled:DataPack/getLoaders' isStatic='false' isFinal='false' isOverride='false'  param_names='sources;callback;appDom' param_types='Object;Function;flash.system:ApplicationDomain' param_defaults='undefined;undefined;null' result_type='void'>
<description><![CDATA[
     Get Loaders containing the specified files from the datapack. These Loaders will hold the 
     DisplayObject or Image files, and can be safely added to your display hierarchy without
     causing any errors, even if loading an AVM1 swf.
          ]]></description>
<param><![CDATA[sources an Object containing keys mapping to the names of the display objects to load.
     ]]></param>
<param><![CDATA[callback a Function that will be called when all the display objects
                     are loaded (or were unable to load).
                     Signature: <code>function (results :Object) :void</code>.
                     results will contain a mapping from name -> Loader, or null.
     ]]></param>
<param><![CDATA[appDom The ApplicationDomain in which to load the DisplayObjects. The default value
                   of null will load into a child of the current ApplicationDomain.
     ]]></param>
</method>
<method name='handleLoadError' fullname='com.whirled:DataPack/protected:handleLoadError' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:ErrorEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Handle some sort of problem loading the datapack.
          ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='handleLoadingComplete' fullname='com.whirled:DataPack/protected:handleLoadingComplete' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Handle the successful completion of datapack loading.
          ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='load' fullname='com.whirled:DataPack/load' isStatic='true' isFinal='false' isOverride='false'  param_names='sources;completeListener' param_types='Object;Function' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     A static helper method to load one or more DataPacks without using any event listeners.
     Take a deep breath and then read the parameter documentation.
          ]]></description>
<example><![CDATA[Load one DataPack from a url.
     <listing version="3.0">
     function gotDataPack (result :Object) :void {
         if (!(result is DataPack)) { // result must be an Error
             trace("Why? Oh why!? .. Oh: " + result);
             return;
         }
         var pack :DataPack = (result as DataPack);
         // _weapon is something set up outside the scope of this example
         _weapon.name = pack.getString("name");
         _weapon.astonishmentPoints = pack.getNumber("ap");
         // etc.
     }
          // ok, the function is set up, let's load the DataPack
     var itemInfos :Array = _gameCtrl.getItemPacks();
     for each (var itemInfo :Object in itemInfos) {
         if (itemInfo.ident == "bubblePopper") {
              DataPack.load(itemInfo.mediaURL, gotDataPack);
              break;
         }
     }
     </listing>
     ]]></example>
<param><![CDATA[sources can be a String (representing a URL), or a URLRequest object, or a
     ByteArray containing an embedded DataPack, or a Class object that will instantiate
     with no args into a ByteArray or (unlikely) a URLRequest. Orrrrrr, sources can be
     an Array, Dictionary or plain Object containing primary kinds of sources as the values.
     ]]></param>
<param><![CDATA[completeListener a function with the signature:
     <code>function (result :Object) :void;</code>
     If you passed in only a single source, then this completeListener is called and provided
     with a result of either a DataPack (for a successful load) or an Error object.
     If it's an Error but your function only accepts a DataPack, an error message will be
     calmly logged. If your sources was an Array, Dictionary, or Object then the result will
     be an object of the same type, with the same keys, but with each value being either a
     DataPack or an Error.
          ]]></param>
</method>
<field name='_loader' fullname='com.whirled:DataPack/protected:_loader' type='flash.net:URLLoader' isStatic='false' isConst='false' >
<description><![CDATA[ Used only while loading the zip bytes. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='ServerObject' fullname='com.whirled:ServerObject' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/ServerObject.as' namespace='com.whirled' access='public' baseclass='flash.display:DisplayObject' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Superclass for all server agents. Subclassing from this allows code to be used as a thane agent
 and connect to the backend. Note that all functionality is currently in the (fake) DisplayObject
 provided by thane, but using this class will give leverage in later releases.
 ]]></description>
</classRec>
<classRec name='TargetedSubControl' fullname='com.whirled:TargetedSubControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/TargetedSubControl.as' namespace='com.whirled' access='public' baseclass='com.whirled:AbstractSubControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Superclass for controls that are instantiated in association with a specific
 target, e.g. roomId or playerId. It centralizes the targetId member and sends
 it automatically as the first argument to all backend functions.
 ]]></description>
</classRec>
<method name='TargetedSubControl' fullname='com.whirled:TargetedSubControl/TargetedSubControl' isStatic='false' isFinal='false' isOverride='false'  param_names='parent;targetId' param_types='com.whirled:AbstractControl;int' param_defaults='undefined;undefined' result_type='*'>
</method>
<method name='callHostCode' fullname='com.whirled:TargetedSubControl/protected:callHostCode' isStatic='false' isFinal='false' isOverride='true'  param_names='name;args' param_types='String;restParam' param_defaults='undefined;undefined' result_type='*'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getTargetId' fullname='com.whirled:TargetedSubControl/getTargetId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get the targetId on which this control operates.
     ]]></description>
</method>
<field name='_targetId' fullname='com.whirled:TargetedSubControl/protected:_targetId' type='int' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='ActorControl' fullname='com.whirled:ActorControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/ActorControl.as' namespace='com.whirled' access='public' baseclass='com.whirled:EntityControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Defines actions, accessors and callbacks available to all in-world mobiles. An mobile is
 something that has an orientation in the scene and can request to change locations.
 ]]></description>
<metadata>
	<Event owner='com.whirled:ActorControl' name='stateChanged' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched as notification that the actor's state has changed.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.STATE_CHANGED
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled:ActorControl' name='appearanceChanged' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched as notification that the actor's appearance has changed. getOrientation() and
 isMoving() should be re-queried to paint the correct visual for the actor in its current state.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.APPEARANCE_CHANGED
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='ActorControl' fullname='com.whirled:ActorControl/ActorControl' isStatic='false' isFinal='false' isOverride='false'  param_names='disp' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Creates a controller for a mobile. The display object is the mobile's visualization.
     ]]></description>
</method>
<method name='appearanceChanged_v2' fullname='com.whirled:ActorControl/protected:appearanceChanged_v2' isStatic='false' isFinal='false' isOverride='false'  param_names='location;orient;moving;sleeping' param_types='Array;Number;Boolean;Boolean' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Called when we start or stop moving or change orientation.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getOrientation' fullname='com.whirled:ActorControl/getOrientation' isStatic='false' isFinal='false' isOverride='false'  result_type='Number'>
<description><![CDATA[
     Returns the current orientation of this mobile.
          ]]></description>
<return><![CDATA[a value between 0 (facing straight ahead) moving counter-clockwise to 359.
     ]]></return>
</method>
<method name='getState' fullname='com.whirled:ActorControl/getState' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Get the current state. If no state has been set or the control is not connected to whirled,
     null will be returned.
     ]]></description>
</method>
<method name='gotInitProps' fullname='com.whirled:ActorControl/protected:gotInitProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isMoving' fullname='com.whirled:ActorControl/isMoving' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Returns whether the mobile is currently moving between locations in the scene.
     ]]></description>
</method>
<method name='setLogicalLocation' fullname='com.whirled:ActorControl/setLogicalLocation' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y;z;orient' param_types='Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Requests that our location be updated. This will result in dispatch of the
     APPEARANCE_CHANGED event when the mobile starts moving and another when the mobile arrives
     at its destination and stops moving.
          <p>x, y, and z are Numbers between 0 and 1 indicating a percentage of the room's width,
     height and depth respectively.  orient is a number between 0 (facing straight ahead) and 359,
     going counter-clockwise.</p>
          ]]></description>
<see><![CDATA[com.whirled.ControlEvent#APPEARANCE_CHANGED
     ]]></see>
</method>
<method name='setMoveSpeed' fullname='com.whirled:ActorControl/setMoveSpeed' isStatic='false' isFinal='false' isOverride='false'  param_names='pixelsPerSecond' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Set this actor's movement speed, in pixels per second. The default value if unset is 500
     pixels per second. The minimum possible speed currently is 50 pixels per second. This only
     sets the local move speed for this instance, and is not propogated out to other clients.
     ]]></description>
</method>
<method name='setOrientation' fullname='com.whirled:ActorControl/setOrientation' isStatic='false' isFinal='false' isOverride='false'  param_names='orient' param_types='Number' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Requests that our orientation be updated. This will result in a dispatch of the
     APPEARANCE_CHANGED event.
          <p>NOTE: this is currently not working.</p>
          ]]></description>
<param><![CDATA[orient an orientation between 0 (facing straight ahead) and going to 359,
     counter-clockwise.
          ]]></param>
<see><![CDATA[com.whirled.ControlEvent#APPEARANCE_CHANGED
     ]]></see>
</method>
<method name='setPixelLocation' fullname='com.whirled:ActorControl/setPixelLocation' isStatic='false' isFinal='false' isOverride='false'  param_names='x;y;z;orient' param_types='Number;Number;Number;Number' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     Requests that our location be updated. x, y, and z are pixel values. orient is a number
     between 0 (facing straight ahead) and 359, going counter-clockwise.
     ]]></description>
</method>
<method name='setState' fullname='com.whirled:ActorControl/setState' isStatic='false' isFinal='false' isOverride='false'  param_names='state' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Set the state of this actor. An actor can only be in one state at a time, but it is
     persistent across rooms.
          <p>Note: only the instance "in control" may set states.</p>
          ]]></description>
<param><![CDATA[state A String identifier, which may be null, indicating the state. The maximum
     length is 64 characters.
          ]]></param>
</method>
<method name='setUserProps' fullname='com.whirled:ActorControl/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='stateSet_v1' fullname='com.whirled:ActorControl/protected:stateSet_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='newState' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Called when a new state is set.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_isMoving' fullname='com.whirled:ActorControl/protected:_isMoving' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ Indicates whether or not we're currently moving. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_orient' fullname='com.whirled:ActorControl/protected:_orient' type='Number' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[ Our current orientation, or 0. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='FurniControl' fullname='com.whirled:FurniControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/FurniControl.as' namespace='com.whirled' access='public' baseclass='com.whirled:EntityControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 This file should be included by furniture, so that it can communicate
 with the whirled.
 ]]></description>
<metadata>
	<Event owner='com.whirled:FurniControl' name='hoverOut' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when the local user unhovers the mouse from this sprite.
 Note that normal MouseEvents are blocked when this sprite has "action", like it
 is a doorway. If you want the doorway to react to the mouse being over it then
 you should listen for this event.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.HOVER_OVER
 ]]></eventType>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled:FurniControl' name='hoverOver' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when the local user hovers the mouse over this sprite.
 Note that normal MouseEvents are blocked when this sprite has "action", like it
 is a doorway. If you want the doorway to react to the mouse being over it then
 you should listen for this event.
  ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.HOVER_OVER
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='FurniControl' fullname='com.whirled:FurniControl/FurniControl' isStatic='false' isFinal='false' isOverride='false'  param_names='disp' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Create a furni interface. The display object is your piece
     of furni.
     ]]></description>
</method>
<method name='handleMouseRoll' fullname='com.whirled:FurniControl/protected:handleMouseRoll' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:MouseEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='mouseHover_v1' fullname='com.whirled:FurniControl/protected:mouseHover_v1' isStatic='false' isFinal='false' isOverride='false'  param_names='over' param_types='Boolean' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Dispatches hover events.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='setUserProps' fullname='com.whirled:FurniControl/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='BODY_ENTERED' fullname='com.whirled:FurniControl/BODY_ENTERED' type='String' isStatic='true' isConst='true' defaultValue='bodyEntered' >
<description><![CDATA[ An action triggered when someone arrives at the location at which
     this furniture is placed, if this piece of furniture is a doorway.
          <p>This will arrive via an ACTION_TRIGGERED event with the name property set
     to BODY_ENTERED.</p>
     ]]></description>
</field>
<field name='BODY_LEFT' fullname='com.whirled:FurniControl/BODY_LEFT' type='String' isStatic='true' isConst='true' defaultValue='bodyLeft' >
<description><![CDATA[ An action triggered when someone leaves via this piece of doorway
     furniture.
          <p>This will arrive via an ACTION_TRIGGERED event with the name property set
     to BODY_LEFT.</p>
     ]]></description>
</field>
<classRec name='EffectControl' fullname='com.whirled:EffectControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/EffectControl.as' namespace='com.whirled' access='public' baseclass='com.whirled:EntityControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 This file should be included by effects.
 There are currently no such thing as effects.
 ]]></description>
<private><![CDATA[]]></private>
</classRec>
<method name='EffectControl' fullname='com.whirled:EffectControl/EffectControl' isStatic='false' isFinal='false' isOverride='false'  param_names='disp' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Create a effect control.
     ]]></description>
</method>
<method name='effectFinished' fullname='com.whirled:EffectControl/effectFinished' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     Called to notify the host that this effect animation is done.
     ]]></description>
</method>
<method name='getParameters' fullname='com.whirled:EffectControl/getParameters' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
     Return the "parameters" (really just one unparsed String) for this effect, if any.
     ]]></description>
</method>
<method name='gotInitProps' fullname='com.whirled:EffectControl/protected:gotInitProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_params' fullname='com.whirled:EffectControl/protected:_params' type='String' isStatic='false' isConst='false' >
<description><![CDATA[ Our parameters, if any. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='PetControl' fullname='com.whirled:PetControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/PetControl.as' namespace='com.whirled' access='public' baseclass='com.whirled:ActorControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Defines actions, accessors and callbacks available to all Pets.
 ]]></description>
</classRec>
<method name='PetControl' fullname='com.whirled:PetControl/PetControl' isStatic='false' isFinal='false' isOverride='false'  param_names='disp' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Creates a controller for a Pet. The display object is the Pet's visualization.
     ]]></description>
</method>
<method name='getOwnerId' fullname='com.whirled:PetControl/getOwnerId' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
     Get the memberId of this pet's owner.
     This is just a convenience function to point out the rich API offered by getEntityPropery().
     ]]></description>
</method>
<method name='sendChat' fullname='com.whirled:PetControl/sendChat' isStatic='false' isFinal='false' isOverride='false'  param_names='msg' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Send a chat message to the entire room. The chat message will be treated as if it
     was typed in at the chat message box - it will be filtered.
     TODO: Any action commands (e.g. /emote) should be handled appropriately.
     ]]></description>
</method>
<method name='setUserProps' fullname='com.whirled:PetControl/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<classRec name='AvatarControl' fullname='com.whirled:AvatarControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/AvatarControl.as' namespace='com.whirled' access='public' baseclass='com.whirled:ActorControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Defines the mechanism by which avatars interact with the world view.
 ]]></description>
<metadata>
	<Event owner='com.whirled:AvatarControl' name='actionTriggered' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when the user or game controlling this avatar triggers an action.
 
 ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.ACTION_TRIGGERED
 ]]></eventType>
<see><![CDATA[com.whirled.avrg.PlayerSubControlBase#playAvatarAction()
 ]]></see>
	</Event>
</metadata>
<metadata>
	<Event owner='com.whirled:AvatarControl' name='avatarSpoke' type='com.whirled.ControlEvent' >
<description><![CDATA[
 Dispatched when the user controlling this avatar speaks. You may trigger a speak animation off
 of this event.
 
 ]]></description>
<eventType><![CDATA[com.whirled.ControlEvent.AVATAR_SPOKE
 ]]></eventType>
	</Event>
</metadata>
</classRec>
<method name='AvatarControl' fullname='com.whirled:AvatarControl/AvatarControl' isStatic='false' isFinal='false' isOverride='false'  param_names='disp' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Create an AvatarControl.
          ]]></description>
<param><![CDATA[disp A display object from your hierarchy. Must be on the stage.
     <p>
     Typical usage:
     <listing version="3.0">
        var ctrl :AvatarControl = new AvatarControl(this);
     </listing>
     </p>
     ]]></param>
</method>
<method name='appearanceChanged_v2' fullname='com.whirled:AvatarControl/protected:appearanceChanged_v2' isStatic='false' isFinal='false' isOverride='true'  param_names='location;orient;moving;sleeping' param_types='Array;Number;Boolean;Boolean' param_defaults='undefined;undefined;undefined;undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='avatarSpoke_v1' fullname='com.whirled:AvatarControl/protected:avatarSpoke_v1' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getActions_v1' fullname='com.whirled:AvatarControl/protected:getActions_v1' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[ 
     Get the names of all the current actions.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getState' fullname='com.whirled:AvatarControl/getState' isStatic='false' isFinal='false' isOverride='true'  result_type='String'>
<description><![CDATA[
     
     Get the current state. If no state has been set or the control is not connected to whirled,
     null will be returned.
     ]]></description>
</method>
<method name='getStates_v1' fullname='com.whirled:AvatarControl/protected:getStates_v1' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
     Get the names of all the current states.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='gotInitProps' fullname='com.whirled:AvatarControl/protected:gotInitProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isSleeping' fullname='com.whirled:AvatarControl/isSleeping' isStatic='false' isFinal='false' isOverride='false'  result_type='Boolean'>
<description><![CDATA[
     Detects whether this avatar is sleeping. An avatar is sleeping either when a user has
     intentially gone AFK (away from keyboard) or have let their client go idle, and zzz's appear
     over their head. You may react to isSleeping (if you want) to render a sleep state, or
     transition to an unregistered state that looks like sleeping.
          <p>Whenever this value changes an APPEARANCE_CHANGED event will be generated.</p>
     ]]></description>
</method>
<method name='registerActions' fullname='com.whirled:AvatarControl/registerActions' isStatic='false' isFinal='false' isOverride='false'  param_names='actions' param_types='restParam' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Register the named actions that can be used to animate the avatar.  Actions are "one-time"
     events that cause the avatar to do something in the whirled, like laugh, play a sound, or do
     a quick animation.  Actions are different from states- states are persistent and do not go
     away if you walk, talk, or play actions.
          These registered actions will show up in a menu from which the wearer of this avatar can
     select an action. Note, however, that you can fire unregistered actions as well.
          Note: actions must be 64 characters or less.
     ]]></description>
</method>
<method name='registerStates' fullname='com.whirled:AvatarControl/registerStates' isStatic='false' isFinal='false' isOverride='false'  param_names='states' param_types='restParam' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Register named states that can be selected by the wearer of this avatar.
          <p>States are persistent. An actor may only be in one state at a time.  If the actor is in a
     state and then needs to walk, talk, or play an action, then it should still be in the state
     during and after those actions.</p>
          <p>When an actor is first instantiated, it is in the normal state.  If no states are
     registered then there is an implicit unnamed normal state.</p>
          <p>States are different from actions- actions are not persistent and are instantly forgotten
     as soon as you play them. If an action is a laugh animation that plays for 5 seconds,
     someone who walks in the room 1 second after you laugh will see nothing.</p>
          <p>The first registered state will be your "default" state. If you call getState() without
     registering states you will get null.</p>
          <p>Note: states must be 64 characters or less.</p>
     ]]></description>
</method>
<method name='setPreferredY' fullname='com.whirled:AvatarControl/setPreferredY' isStatic='false' isFinal='false' isOverride='false'  param_names='pixels' param_types='int' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     Set this avatar's preferred height off the ground, in pixels.  If unset, it defaults to 0,
     meaning that it walks on the ground.
          <p>Calling this does not adjust the current location.</p>
     ]]></description>
</method>
<method name='setUserProps' fullname='com.whirled:AvatarControl/protected:setUserProps' isStatic='false' isFinal='false' isOverride='true'  param_names='o' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
     ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='verifyActionsOrStates' fullname='com.whirled:AvatarControl/protected:verifyActionsOrStates' isStatic='false' isFinal='false' isOverride='false'  param_names='vals;isAction' param_types='Array;Boolean' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
     Helpy method to verify that the actions or states are legal.
     ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_actions' fullname='com.whirled:AvatarControl/protected:_actions' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[ An array of all action names. ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_isSleeping' fullname='com.whirled:AvatarControl/protected:_isSleeping' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ Is this avatar asleep? ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_states' fullname='com.whirled:AvatarControl/protected:_states' type='Array' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[ An array of state names. ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='ToyControl' fullname='com.whirled:ToyControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/ToyControl.as' namespace='com.whirled' access='public' baseclass='com.whirled:FurniControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Used to create Toys: interactive furniture, usually with some shared state.
 ]]></description>
</classRec>
<method name='ToyControl' fullname='com.whirled:ToyControl/ToyControl' isStatic='false' isFinal='false' isOverride='false'  param_names='disp' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Create a ToyControl.
          ]]></description>
<param><![CDATA[disp a display object on the stage
     ]]></param>
</method>
<classRec name='BackdropControl' fullname='com.whirled:BackdropControl' sourcefile='/export/whirled/dist/tmp/pubas/com/whirled/BackdropControl.as' namespace='com.whirled' access='public' baseclass='com.whirled:FurniControl' isFinal='false' isDynamic='false' >
<description><![CDATA[
 Used to create room backdrops.
 ]]></description>
</classRec>
<method name='BackdropControl' fullname='com.whirled:BackdropControl/BackdropControl' isStatic='false' isFinal='false' isOverride='false'  param_names='disp' param_types='flash.display:DisplayObject' param_defaults='undefined' result_type='*'>
<description><![CDATA[
     Create a BackdropControl.
          ]]></description>
<param><![CDATA[disp a display object on the stage
     ]]></param>
</method>
</asdoc>
